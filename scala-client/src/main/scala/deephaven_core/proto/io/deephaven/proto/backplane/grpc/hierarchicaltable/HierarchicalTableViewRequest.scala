// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.hierarchicaltable

/** @param resultViewId
  *   Ticket to use to hold the result HierarchicalTableView
  * @param expansions
  *   Description for the expansions that define this view of the HierarchicalTable. If not present, the result will
  *   have default expansions, For RollupTables this will be the root (single row, top-level aggregation) and the next
  *   level if one exists (that is, if there are one or more group-by columns, or constituents are included). For
  *   TreeTables, this will be the root (one row for each child of the "null" parent identifier).
  */
@SerialVersionUID(0L)
final case class HierarchicalTableViewRequest(
    resultViewId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    target: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.Empty,
    expansions: _root_.scala.Option[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HierarchicalTableViewRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultViewId.isDefined) {
        val __value = resultViewId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (target.hierarchicalTableId.isDefined) {
        val __value = target.hierarchicalTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (target.existingViewId.isDefined) {
        val __value = target.existingViewId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (expansions.isDefined) {
        val __value = expansions.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultViewId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      target.hierarchicalTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      target.existingViewId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      expansions.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultViewId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultViewId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultViewId: HierarchicalTableViewRequest = copy(resultViewId = _root_.scala.None)
    def withResultViewId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): HierarchicalTableViewRequest = copy(resultViewId = Option(__v))
    def getHierarchicalTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = target.hierarchicalTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def withHierarchicalTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): HierarchicalTableViewRequest = copy(target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.HierarchicalTableId(__v))
    def getExistingViewId: io.deephaven.proto.backplane.grpc.ticket.Ticket = target.existingViewId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def withExistingViewId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): HierarchicalTableViewRequest = copy(target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.ExistingViewId(__v))
    def getExpansions: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor = expansions.getOrElse(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor.defaultInstance)
    def clearExpansions: HierarchicalTableViewRequest = copy(expansions = _root_.scala.None)
    def withExpansions(__v: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor): HierarchicalTableViewRequest = copy(expansions = Option(__v))
    def clearTarget: HierarchicalTableViewRequest = copy(target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.Empty)
    def withTarget(__v: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target): HierarchicalTableViewRequest = copy(target = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultViewId.orNull
        case 2 => target.hierarchicalTableId.orNull
        case 3 => target.existingViewId.orNull
        case 4 => expansions.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultViewId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => target.hierarchicalTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => target.existingViewId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => expansions.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.type = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest])
}

object HierarchicalTableViewRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest = {
    var __resultViewId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __expansions: _root_.scala.Option[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor] = _root_.scala.None
    var __target: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultViewId = _root_.scala.Option(__resultViewId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.HierarchicalTableId(__target.hierarchicalTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.ExistingViewId(__target.existingViewId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __expansions = _root_.scala.Option(__expansions.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest(
        resultViewId = __resultViewId,
        expansions = __expansions,
        target = __target,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest(
        resultViewId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        expansions = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor]]),
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]).map(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.HierarchicalTableId(_))
            .orElse[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]).map(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.ExistingViewId(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 3 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 4 => __out = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest(
    resultViewId = _root_.scala.None,
    expansions = _root_.scala.None,
    target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.Empty
  )
  sealed abstract class Target extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isHierarchicalTableId: _root_.scala.Boolean = false
    def isExistingViewId: _root_.scala.Boolean = false
    def hierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    def existingViewId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
  }
  object Target {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class HierarchicalTableId(value: io.deephaven.proto.backplane.grpc.ticket.Ticket) extends io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target {
      type ValueType = io.deephaven.proto.backplane.grpc.ticket.Ticket
      override def isHierarchicalTableId: _root_.scala.Boolean = true
      override def hierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class ExistingViewId(value: io.deephaven.proto.backplane.grpc.ticket.Ticket) extends io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target {
      type ValueType = io.deephaven.proto.backplane.grpc.ticket.Ticket
      override def isExistingViewId: _root_.scala.Boolean = true
      override def existingViewId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class HierarchicalTableViewRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest](_l) {
    def resultViewId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultViewId)((c_, f_) => c_.copy(resultViewId = _root_.scala.Option(f_)))
    def optionalResultViewId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultViewId)((c_, f_) => c_.copy(resultViewId = f_))
    def hierarchicalTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getHierarchicalTableId)((c_, f_) => c_.copy(target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.HierarchicalTableId(f_)))
    def existingViewId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getExistingViewId)((c_, f_) => c_.copy(target = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target.ExistingViewId(f_)))
    def expansions: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor] = field(_.getExpansions)((c_, f_) => c_.copy(expansions = _root_.scala.Option(f_)))
    def optionalExpansions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor]] = field(_.expansions)((c_, f_) => c_.copy(expansions = f_))
    def target: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target] = field(_.target)((c_, f_) => c_.copy(target = f_))
  }
  final val RESULT_VIEW_ID_FIELD_NUMBER = 1
  final val HIERARCHICAL_TABLE_ID_FIELD_NUMBER = 2
  final val EXISTING_VIEW_ID_FIELD_NUMBER = 3
  final val EXPANSIONS_FIELD_NUMBER = 4
  def of(
    resultViewId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    target: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest.Target,
    expansions: _root_.scala.Option[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor]
  ): _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest = _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest(
    resultViewId,
    target,
    expansions
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.HierarchicalTableViewRequest])
}
