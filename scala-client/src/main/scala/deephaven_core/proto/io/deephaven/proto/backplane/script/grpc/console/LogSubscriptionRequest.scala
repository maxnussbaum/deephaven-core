// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console

/** Presently you get _all_ logs, not just your console. A future version might take a specific console_id to
  * restrict this to a single console.
  *
  * @param lastSeenLogTimestamp
  *      Ticket console_id = 1;
  *   If a non-zero value is specified, represents the timestamp in microseconds since the unix epoch when
  *   the client last saw a message. Technically this might skip messages if more than one message was
  *   logged at the same microsecond that connection was lost - to avoid this, subtract one from the last
  *   seen message's micros, and expect to receive some messages that have already been seen.
  */
@SerialVersionUID(0L)
final case class LogSubscriptionRequest(
    lastSeenLogTimestamp: _root_.scala.Long = 0L,
    levels: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LogSubscriptionRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = lastSeenLogTimestamp
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      levels.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = lastSeenLogTimestamp
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      levels.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withLastSeenLogTimestamp(__v: _root_.scala.Long): LogSubscriptionRequest = copy(lastSeenLogTimestamp = __v)
    def clearLevels = copy(levels = _root_.scala.Seq.empty)
    def addLevels(__vs: _root_.scala.Predef.String *): LogSubscriptionRequest = addAllLevels(__vs)
    def addAllLevels(__vs: Iterable[_root_.scala.Predef.String]): LogSubscriptionRequest = copy(levels = levels ++ __vs)
    def withLevels(__v: _root_.scala.Seq[_root_.scala.Predef.String]): LogSubscriptionRequest = copy(levels = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = lastSeenLogTimestamp
          if (__t != 0L) __t else null
        }
        case 2 => levels
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(lastSeenLogTimestamp)
        case 2 => _root_.scalapb.descriptors.PRepeated(levels.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest.type = io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest])
}

object LogSubscriptionRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest = {
    var __lastSeenLogTimestamp: _root_.scala.Long = 0L
    val __levels: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __lastSeenLogTimestamp = _input__.readInt64()
        case 18 =>
          __levels += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest(
        lastSeenLogTimestamp = __lastSeenLogTimestamp,
        levels = __levels.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest(
        lastSeenLogTimestamp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        levels = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsoleProto.javaDescriptor.getMessageTypes().get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsoleProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest(
    lastSeenLogTimestamp = 0L,
    levels = _root_.scala.Seq.empty
  )
  implicit class LogSubscriptionRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest](_l) {
    def lastSeenLogTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.lastSeenLogTimestamp)((c_, f_) => c_.copy(lastSeenLogTimestamp = f_))
    def levels: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.levels)((c_, f_) => c_.copy(levels = f_))
  }
  final val LAST_SEEN_LOG_TIMESTAMP_FIELD_NUMBER = 1
  final val LEVELS_FIELD_NUMBER = 2
  def of(
    lastSeenLogTimestamp: _root_.scala.Long,
    levels: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest = _root_.io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest(
    lastSeenLogTimestamp,
    levels
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.LogSubscriptionRequest])
}
