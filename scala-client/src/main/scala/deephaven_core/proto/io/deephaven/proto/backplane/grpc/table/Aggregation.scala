// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class Aggregation(
    `type`: io.deephaven.proto.backplane.grpc.table.Aggregation.Type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Aggregation] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (`type`.columns.isDefined) {
        val __value = `type`.columns.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.count.isDefined) {
        val __value = `type`.count.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.firstRowKey.isDefined) {
        val __value = `type`.firstRowKey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.lastRowKey.isDefined) {
        val __value = `type`.lastRowKey.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.partition.isDefined) {
        val __value = `type`.partition.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.formula.isDefined) {
        val __value = `type`.formula.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.countWhere.isDefined) {
        val __value = `type`.countWhere.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.columns.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.count.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.firstRowKey.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.lastRowKey.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.partition.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.formula.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.countWhere.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getColumns: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns = `type`.columns.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns.defaultInstance)
    def withColumns(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Columns(__v))
    def getCount: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount = `type`.count.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount.defaultInstance)
    def withCount(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Count(__v))
    def getFirstRowKey: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey = `type`.firstRowKey.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey.defaultInstance)
    def withFirstRowKey(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.FirstRowKey(__v))
    def getLastRowKey: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey = `type`.lastRowKey.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey.defaultInstance)
    def withLastRowKey(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.LastRowKey(__v))
    def getPartition: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition = `type`.partition.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition.defaultInstance)
    def withPartition(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Partition(__v))
    def getFormula: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula = `type`.formula.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula.defaultInstance)
    def withFormula(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Formula(__v))
    def getCountWhere: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere = `type`.countWhere.getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere.defaultInstance)
    def withCountWhere(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere): Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.CountWhere(__v))
    def clearType: Aggregation = copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Empty)
    def withType(__v: io.deephaven.proto.backplane.grpc.table.Aggregation.Type): Aggregation = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.columns.orNull
        case 2 => `type`.count.orNull
        case 3 => `type`.firstRowKey.orNull
        case 4 => `type`.lastRowKey.orNull
        case 5 => `type`.partition.orNull
        case 6 => `type`.formula.orNull
        case 7 => `type`.countWhere.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.columns.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => `type`.count.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => `type`.firstRowKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => `type`.lastRowKey.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => `type`.partition.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => `type`.formula.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => `type`.countWhere.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.type = io.deephaven.proto.backplane.grpc.table.Aggregation
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation])
}

object Aggregation extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation = {
    var __type: io.deephaven.proto.backplane.grpc.table.Aggregation.Type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Columns(__type.columns.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Count(__type.count.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.FirstRowKey(__type.firstRowKey.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.LastRowKey(__type.lastRowKey.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Partition(__type.partition.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Formula(__type.formula.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __type = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.CountWhere(__type.countWhere.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.Aggregation(
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.Aggregation(
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Columns(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.Aggregation.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Count(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Aggregation.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.FirstRowKey(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Aggregation.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.LastRowKey(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Aggregation.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Partition(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Aggregation.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Formula(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Aggregation.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere]]).map(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.CountWhere(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getMessageTypes().get(37)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.messages(37)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey
      case 5 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition
      case 6 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula
      case 7 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns,
      _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount,
      _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere,
      _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey,
      _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition,
      _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation(
    `type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Empty
  )
  sealed abstract class Type extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isColumns: _root_.scala.Boolean = false
    def isCount: _root_.scala.Boolean = false
    def isFirstRowKey: _root_.scala.Boolean = false
    def isLastRowKey: _root_.scala.Boolean = false
    def isPartition: _root_.scala.Boolean = false
    def isFormula: _root_.scala.Boolean = false
    def isCountWhere: _root_.scala.Boolean = false
    def columns: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns] = _root_.scala.None
    def count: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount] = _root_.scala.None
    def firstRowKey: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = _root_.scala.None
    def lastRowKey: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = _root_.scala.None
    def partition: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition] = _root_.scala.None
    def formula: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula] = _root_.scala.None
    def countWhere: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere] = _root_.scala.None
  }
  object Type {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Columns(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns
      override def isColumns: _root_.scala.Boolean = true
      override def columns: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Count(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount
      override def isCount: _root_.scala.Boolean = true
      override def count: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class FirstRowKey(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey
      override def isFirstRowKey: _root_.scala.Boolean = true
      override def firstRowKey: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class LastRowKey(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey
      override def isLastRowKey: _root_.scala.Boolean = true
      override def lastRowKey: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Partition(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition
      override def isPartition: _root_.scala.Boolean = true
      override def partition: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Formula(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula
      override def isFormula: _root_.scala.Boolean = true
      override def formula: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class CountWhere(value: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere) extends io.deephaven.proto.backplane.grpc.table.Aggregation.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere
      override def isCountWhere: _root_.scala.Boolean = true
      override def countWhere: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere] = Some(value)
      override def number: _root_.scala.Int = 7
    }
  }
  @SerialVersionUID(0L)
  final case class AggregationColumns(
      spec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec] = _root_.scala.None,
      matchPairs: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregationColumns] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (spec.isDefined) {
          val __value = spec.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        matchPairs.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        spec.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        matchPairs.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getSpec: io.deephaven.proto.backplane.grpc.table.AggSpec = spec.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.defaultInstance)
      def clearSpec: AggregationColumns = copy(spec = _root_.scala.None)
      def withSpec(__v: io.deephaven.proto.backplane.grpc.table.AggSpec): AggregationColumns = copy(spec = Option(__v))
      def clearMatchPairs = copy(matchPairs = _root_.scala.Seq.empty)
      def addMatchPairs(__vs: _root_.scala.Predef.String *): AggregationColumns = addAllMatchPairs(__vs)
      def addAllMatchPairs(__vs: Iterable[_root_.scala.Predef.String]): AggregationColumns = copy(matchPairs = matchPairs ++ __vs)
      def withMatchPairs(__v: _root_.scala.Seq[_root_.scala.Predef.String]): AggregationColumns = copy(matchPairs = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => spec.orNull
          case 2 => matchPairs
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => spec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PRepeated(matchPairs.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns.type = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns])
  }
  
  object AggregationColumns extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns = {
      var __spec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec] = _root_.scala.None
      val __matchPairs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __spec = _root_.scala.Option(__spec.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __matchPairs += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns(
          spec = __spec,
          matchPairs = __matchPairs.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns(
          spec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec]]),
          matchPairs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns(
      spec = _root_.scala.None,
      matchPairs = _root_.scala.Seq.empty
    )
    implicit class AggregationColumnsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns](_l) {
      def spec: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec] = field(_.getSpec)((c_, f_) => c_.copy(spec = _root_.scala.Option(f_)))
      def optionalSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec]] = field(_.spec)((c_, f_) => c_.copy(spec = f_))
      def matchPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.matchPairs)((c_, f_) => c_.copy(matchPairs = f_))
    }
    final val SPEC_FIELD_NUMBER = 1
    final val MATCH_PAIRS_FIELD_NUMBER = 2
    def of(
      spec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec],
      matchPairs: _root_.scala.Seq[_root_.scala.Predef.String]
    ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns(
      spec,
      matchPairs
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation.AggregationColumns])
  }
  
  /** @param columnName
    *   The output column name
    */
  @SerialVersionUID(0L)
  final case class AggregationCount(
      columnName: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregationCount] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withColumnName(__v: _root_.scala.Predef.String): AggregationCount = copy(columnName = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = columnName
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(columnName)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount.type = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount])
  }
  
  object AggregationCount extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount = {
      var __columnName: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columnName = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount(
          columnName = __columnName,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount(
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount(
      columnName = ""
    )
    implicit class AggregationCountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount](_l) {
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
    }
    final val COLUMN_NAME_FIELD_NUMBER = 1
    def of(
      columnName: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount(
      columnName
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation.AggregationCount])
  }
  
  /** @param columnName
    *   The output column name
    */
  @SerialVersionUID(0L)
  final case class AggregationCountWhere(
      columnName: _root_.scala.Predef.String = "",
      filters: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregationCountWhere] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        filters.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        filters.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withColumnName(__v: _root_.scala.Predef.String): AggregationCountWhere = copy(columnName = __v)
      def clearFilters = copy(filters = _root_.scala.Seq.empty)
      def addFilters(__vs: _root_.scala.Predef.String *): AggregationCountWhere = addAllFilters(__vs)
      def addAllFilters(__vs: Iterable[_root_.scala.Predef.String]): AggregationCountWhere = copy(filters = filters ++ __vs)
      def withFilters(__v: _root_.scala.Seq[_root_.scala.Predef.String]): AggregationCountWhere = copy(filters = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = columnName
            if (__t != "") __t else null
          }
          case 2 => filters
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(columnName)
          case 2 => _root_.scalapb.descriptors.PRepeated(filters.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere.type = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation.AggregationCountWhere])
  }
  
  object AggregationCountWhere extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere = {
      var __columnName: _root_.scala.Predef.String = ""
      val __filters: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columnName = _input__.readStringRequireUtf8()
          case 18 =>
            __filters += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere(
          columnName = __columnName,
          filters = __filters.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere(
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          filters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere(
      columnName = "",
      filters = _root_.scala.Seq.empty
    )
    implicit class AggregationCountWhereLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere](_l) {
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
      def filters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.filters)((c_, f_) => c_.copy(filters = f_))
    }
    final val COLUMN_NAME_FIELD_NUMBER = 1
    final val FILTERS_FIELD_NUMBER = 2
    def of(
      columnName: _root_.scala.Predef.String,
      filters: _root_.scala.Seq[_root_.scala.Predef.String]
    ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere(
      columnName,
      filters
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation.AggregationCountWhere])
  }
  
  @SerialVersionUID(0L)
  final case class AggregationRowKey(
      columnName: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregationRowKey] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withColumnName(__v: _root_.scala.Predef.String): AggregationRowKey = copy(columnName = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = columnName
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(columnName)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey.type = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey])
  }
  
  object AggregationRowKey extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey = {
      var __columnName: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columnName = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey(
          columnName = __columnName,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey(
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey(
      columnName = ""
    )
    implicit class AggregationRowKeyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey](_l) {
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
    }
    final val COLUMN_NAME_FIELD_NUMBER = 1
    def of(
      columnName: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey(
      columnName
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation.AggregationRowKey])
  }
  
  @SerialVersionUID(0L)
  final case class AggregationPartition(
      columnName: _root_.scala.Predef.String = "",
      includeGroupByColumns: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregationPartition] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = includeGroupByColumns
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = includeGroupByColumns
          if (__v != false) {
            _output__.writeBool(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withColumnName(__v: _root_.scala.Predef.String): AggregationPartition = copy(columnName = __v)
      def withIncludeGroupByColumns(__v: _root_.scala.Boolean): AggregationPartition = copy(includeGroupByColumns = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = columnName
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = includeGroupByColumns
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(columnName)
          case 2 => _root_.scalapb.descriptors.PBoolean(includeGroupByColumns)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition.type = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition])
  }
  
  object AggregationPartition extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition = {
      var __columnName: _root_.scala.Predef.String = ""
      var __includeGroupByColumns: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columnName = _input__.readStringRequireUtf8()
          case 16 =>
            __includeGroupByColumns = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition(
          columnName = __columnName,
          includeGroupByColumns = __includeGroupByColumns,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition(
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          includeGroupByColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition(
      columnName = "",
      includeGroupByColumns = false
    )
    implicit class AggregationPartitionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition](_l) {
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
      def includeGroupByColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.includeGroupByColumns)((c_, f_) => c_.copy(includeGroupByColumns = f_))
    }
    final val COLUMN_NAME_FIELD_NUMBER = 1
    final val INCLUDE_GROUP_BY_COLUMNS_FIELD_NUMBER = 2
    def of(
      columnName: _root_.scala.Predef.String,
      includeGroupByColumns: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition(
      columnName,
      includeGroupByColumns
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation.AggregationPartition])
  }
  
  @SerialVersionUID(0L)
  final case class AggregationFormula(
      selectable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggregationFormula] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (selectable.isDefined) {
          val __value = selectable.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        selectable.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getSelectable: io.deephaven.proto.backplane.grpc.table.Selectable = selectable.getOrElse(io.deephaven.proto.backplane.grpc.table.Selectable.defaultInstance)
      def clearSelectable: AggregationFormula = copy(selectable = _root_.scala.None)
      def withSelectable(__v: io.deephaven.proto.backplane.grpc.table.Selectable): AggregationFormula = copy(selectable = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => selectable.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => selectable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula.type = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Aggregation.AggregationFormula])
  }
  
  object AggregationFormula extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula = {
      var __selectable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __selectable = _root_.scala.Option(__selectable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Selectable](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula(
          selectable = __selectable,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula(
          selectable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.Aggregation.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.grpc.table.Selectable
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula(
      selectable = _root_.scala.None
    )
    implicit class AggregationFormulaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula](_l) {
      def selectable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Selectable] = field(_.getSelectable)((c_, f_) => c_.copy(selectable = _root_.scala.Option(f_)))
      def optionalSelectable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable]] = field(_.selectable)((c_, f_) => c_.copy(selectable = f_))
    }
    final val SELECTABLE_FIELD_NUMBER = 1
    def of(
      selectable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable]
    ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula(
      selectable
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation.AggregationFormula])
  }
  
  implicit class AggregationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation](_l) {
    def columns: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationColumns] = field(_.getColumns)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Columns(f_)))
    def count: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCount] = field(_.getCount)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Count(f_)))
    def firstRowKey: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = field(_.getFirstRowKey)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.FirstRowKey(f_)))
    def lastRowKey: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationRowKey] = field(_.getLastRowKey)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.LastRowKey(f_)))
    def partition: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationPartition] = field(_.getPartition)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Partition(f_)))
    def formula: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationFormula] = field(_.getFormula)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.Formula(f_)))
    def countWhere: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.AggregationCountWhere] = field(_.getCountWhere)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Aggregation.Type.CountWhere(f_)))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Aggregation.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val COLUMNS_FIELD_NUMBER = 1
  final val COUNT_FIELD_NUMBER = 2
  final val FIRST_ROW_KEY_FIELD_NUMBER = 3
  final val LAST_ROW_KEY_FIELD_NUMBER = 4
  final val PARTITION_FIELD_NUMBER = 5
  final val FORMULA_FIELD_NUMBER = 6
  final val COUNT_WHERE_FIELD_NUMBER = 7
  def of(
    `type`: io.deephaven.proto.backplane.grpc.table.Aggregation.Type
  ): _root_.io.deephaven.proto.backplane.grpc.table.Aggregation = _root_.io.deephaven.proto.backplane.grpc.table.Aggregation(
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Aggregation])
}
