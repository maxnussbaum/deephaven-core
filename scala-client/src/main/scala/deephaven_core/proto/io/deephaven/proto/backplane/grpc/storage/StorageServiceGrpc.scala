// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.storage


object StorageServiceGrpc {
  val METHOD_LIST_ITEMS: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.storage.ListItemsRequest, io.deephaven.proto.backplane.grpc.storage.ListItemsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.StorageService", "ListItems"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.ListItemsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.ListItemsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_FETCH_FILE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.storage.FetchFileRequest, io.deephaven.proto.backplane.grpc.storage.FetchFileResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.StorageService", "FetchFile"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.FetchFileRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.FetchFileResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_SAVE_FILE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.storage.SaveFileRequest, io.deephaven.proto.backplane.grpc.storage.SaveFileResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.StorageService", "SaveFile"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.SaveFileRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.SaveFileResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_MOVE_ITEM: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.storage.MoveItemRequest, io.deephaven.proto.backplane.grpc.storage.MoveItemResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.StorageService", "MoveItem"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.MoveItemRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.MoveItemResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_CREATE_DIRECTORY: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest, io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.StorageService", "CreateDirectory"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_DELETE_ITEM: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest, io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.StorageService", "DeleteItem"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.StorageService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor))
      .addMethod(METHOD_LIST_ITEMS)
      .addMethod(METHOD_FETCH_FILE)
      .addMethod(METHOD_SAVE_FILE)
      .addMethod(METHOD_MOVE_ITEM)
      .addMethod(METHOD_CREATE_DIRECTORY)
      .addMethod(METHOD_DELETE_ITEM)
      .build()
  
  /**
    * Shared storage management service.
    *
    * Operations may fail (or omit data) if the current session does not have permission to read or write that resource.
    *
    * Paths will be "/" delimited and must start with a leading slash.
    */
  trait StorageService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[StorageService] = StorageService
    /** Lists the files and directories present in a given directory. Will return an error
      */
    def listItems(request: io.deephaven.proto.backplane.grpc.storage.ListItemsRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.ListItemsResponse]
    /** Reads the file at the given path. Client can optionally specify an etag, asking the server
      * not to send the file if it hasn't changed.
      */
    def fetchFile(request: io.deephaven.proto.backplane.grpc.storage.FetchFileRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.FetchFileResponse]
    /** Can create new files or modify existing with client provided contents.
      */
    def saveFile(request: io.deephaven.proto.backplane.grpc.storage.SaveFileRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.SaveFileResponse]
    /** Moves a file from one path to another.
      */
    def moveItem(request: io.deephaven.proto.backplane.grpc.storage.MoveItemRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.MoveItemResponse]
    /** Creates a directory at the given path.
      */
    def createDirectory(request: io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse]
    /** Deletes the file or directory at the given path. Directories must be empty to be deleted.
      */
    def deleteItem(request: io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse]
  }
  
  object StorageService extends _root_.scalapb.grpc.ServiceCompanion[StorageService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[StorageService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.storage.StorageProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: StorageService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_LIST_ITEMS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.storage.ListItemsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.storage.ListItemsResponse]) => {
          serviceImpl.listItems(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_FETCH_FILE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.storage.FetchFileRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.storage.FetchFileResponse]) => {
          serviceImpl.fetchFile(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SAVE_FILE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.storage.SaveFileRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.storage.SaveFileResponse]) => {
          serviceImpl.saveFile(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_MOVE_ITEM,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.storage.MoveItemRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.storage.MoveItemResponse]) => {
          serviceImpl.moveItem(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CREATE_DIRECTORY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse]) => {
          serviceImpl.createDirectory(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DELETE_ITEM,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse]) => {
          serviceImpl.deleteItem(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /**
    * Shared storage management service.
    *
    * Operations may fail (or omit data) if the current session does not have permission to read or write that resource.
    *
    * Paths will be "/" delimited and must start with a leading slash.
    */
  trait StorageServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[StorageService] = StorageService
    /** Lists the files and directories present in a given directory. Will return an error
      */
    def listItems(request: io.deephaven.proto.backplane.grpc.storage.ListItemsRequest): io.deephaven.proto.backplane.grpc.storage.ListItemsResponse
    /** Reads the file at the given path. Client can optionally specify an etag, asking the server
      * not to send the file if it hasn't changed.
      */
    def fetchFile(request: io.deephaven.proto.backplane.grpc.storage.FetchFileRequest): io.deephaven.proto.backplane.grpc.storage.FetchFileResponse
    /** Can create new files or modify existing with client provided contents.
      */
    def saveFile(request: io.deephaven.proto.backplane.grpc.storage.SaveFileRequest): io.deephaven.proto.backplane.grpc.storage.SaveFileResponse
    /** Moves a file from one path to another.
      */
    def moveItem(request: io.deephaven.proto.backplane.grpc.storage.MoveItemRequest): io.deephaven.proto.backplane.grpc.storage.MoveItemResponse
    /** Creates a directory at the given path.
      */
    def createDirectory(request: io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest): io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse
    /** Deletes the file or directory at the given path. Directories must be empty to be deleted.
      */
    def deleteItem(request: io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest): io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse
  }
  
  class StorageServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[StorageServiceBlockingStub](channel, options) with StorageServiceBlockingClient {
    /** Lists the files and directories present in a given directory. Will return an error
      */
    override def listItems(request: io.deephaven.proto.backplane.grpc.storage.ListItemsRequest): io.deephaven.proto.backplane.grpc.storage.ListItemsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_LIST_ITEMS, options, request)
    }
    
    /** Reads the file at the given path. Client can optionally specify an etag, asking the server
      * not to send the file if it hasn't changed.
      */
    override def fetchFile(request: io.deephaven.proto.backplane.grpc.storage.FetchFileRequest): io.deephaven.proto.backplane.grpc.storage.FetchFileResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_FETCH_FILE, options, request)
    }
    
    /** Can create new files or modify existing with client provided contents.
      */
    override def saveFile(request: io.deephaven.proto.backplane.grpc.storage.SaveFileRequest): io.deephaven.proto.backplane.grpc.storage.SaveFileResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_SAVE_FILE, options, request)
    }
    
    /** Moves a file from one path to another.
      */
    override def moveItem(request: io.deephaven.proto.backplane.grpc.storage.MoveItemRequest): io.deephaven.proto.backplane.grpc.storage.MoveItemResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_MOVE_ITEM, options, request)
    }
    
    /** Creates a directory at the given path.
      */
    override def createDirectory(request: io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest): io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CREATE_DIRECTORY, options, request)
    }
    
    /** Deletes the file or directory at the given path. Directories must be empty to be deleted.
      */
    override def deleteItem(request: io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest): io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_ITEM, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): StorageServiceBlockingStub = new StorageServiceBlockingStub(channel, options)
  }
  
  class StorageServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[StorageServiceStub](channel, options) with StorageService {
    /** Lists the files and directories present in a given directory. Will return an error
      */
    override def listItems(request: io.deephaven.proto.backplane.grpc.storage.ListItemsRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.ListItemsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_LIST_ITEMS, options, request)
    }
    
    /** Reads the file at the given path. Client can optionally specify an etag, asking the server
      * not to send the file if it hasn't changed.
      */
    override def fetchFile(request: io.deephaven.proto.backplane.grpc.storage.FetchFileRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.FetchFileResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_FETCH_FILE, options, request)
    }
    
    /** Can create new files or modify existing with client provided contents.
      */
    override def saveFile(request: io.deephaven.proto.backplane.grpc.storage.SaveFileRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.SaveFileResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_SAVE_FILE, options, request)
    }
    
    /** Moves a file from one path to another.
      */
    override def moveItem(request: io.deephaven.proto.backplane.grpc.storage.MoveItemRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.MoveItemResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_MOVE_ITEM, options, request)
    }
    
    /** Creates a directory at the given path.
      */
    override def createDirectory(request: io.deephaven.proto.backplane.grpc.storage.CreateDirectoryRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.CreateDirectoryResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CREATE_DIRECTORY, options, request)
    }
    
    /** Deletes the file or directory at the given path. Directories must be empty to be deleted.
      */
    override def deleteItem(request: io.deephaven.proto.backplane.grpc.storage.DeleteItemRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.storage.DeleteItemResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_ITEM, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): StorageServiceStub = new StorageServiceStub(channel, options)
  }
  
  object StorageServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[StorageServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): StorageServiceStub = new StorageServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[StorageServiceStub] = this
  }
  
  def bindService(serviceImpl: StorageService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = StorageService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): StorageServiceBlockingStub = new StorageServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): StorageServiceStub = new StorageServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.storage.StorageProto.javaDescriptor.getServices().get(0)
  
}