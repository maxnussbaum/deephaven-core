// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class Diagnostic(
    range: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange] = _root_.scala.None,
    severity: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.NOT_SET_SEVERITY,
    code: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    codeDescription: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription] = _root_.scala.None,
    source: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    message: _root_.scala.Predef.String = "",
    tags: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag] = _root_.scala.Seq.empty,
    data: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Diagnostic] {
    private[this] def tagsSerializedSize = {
      if (__tagsSerializedSizeField == 0) __tagsSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        tags.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
        __s
      }
      __tagsSerializedSizeField
    }
    @transient private[this] var __tagsSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (range.isDefined) {
        val __value = range.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = severity.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      if (code.isDefined) {
        val __value = code.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (codeDescription.isDefined) {
        val __value = codeDescription.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (source.isDefined) {
        val __value = source.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      if (tags.nonEmpty) {
        val __localsize = tagsSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      if (data.isDefined) {
        val __value = data.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(9, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      range.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = severity.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      code.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      codeDescription.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      source.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(6, __v)
        }
      };
      if (tags.nonEmpty) {
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(tagsSerializedSize)
        tags.foreach((_output__.writeEnumNoTag _).compose((_: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag).value))
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeBytes(9, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getRange: io.deephaven.proto.backplane.script.grpc.console.DocumentRange = range.getOrElse(io.deephaven.proto.backplane.script.grpc.console.DocumentRange.defaultInstance)
    def clearRange: Diagnostic = copy(range = _root_.scala.None)
    def withRange(__v: io.deephaven.proto.backplane.script.grpc.console.DocumentRange): Diagnostic = copy(range = Option(__v))
    def withSeverity(__v: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity): Diagnostic = copy(severity = __v)
    def getCode: _root_.scala.Predef.String = code.getOrElse("")
    def clearCode: Diagnostic = copy(code = _root_.scala.None)
    def withCode(__v: _root_.scala.Predef.String): Diagnostic = copy(code = Option(__v))
    def getCodeDescription: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription = codeDescription.getOrElse(io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription.defaultInstance)
    def clearCodeDescription: Diagnostic = copy(codeDescription = _root_.scala.None)
    def withCodeDescription(__v: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription): Diagnostic = copy(codeDescription = Option(__v))
    def getSource: _root_.scala.Predef.String = source.getOrElse("")
    def clearSource: Diagnostic = copy(source = _root_.scala.None)
    def withSource(__v: _root_.scala.Predef.String): Diagnostic = copy(source = Option(__v))
    def withMessage(__v: _root_.scala.Predef.String): Diagnostic = copy(message = __v)
    def clearTags = copy(tags = _root_.scala.Seq.empty)
    def addTags(__vs: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag *): Diagnostic = addAllTags(__vs)
    def addAllTags(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag]): Diagnostic = copy(tags = tags ++ __vs)
    def withTags(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag]): Diagnostic = copy(tags = __v)
    def getData: _root_.com.google.protobuf.ByteString = data.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def clearData: Diagnostic = copy(data = _root_.scala.None)
    def withData(__v: _root_.com.google.protobuf.ByteString): Diagnostic = copy(data = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => range.orNull
        case 2 => {
          val __t = severity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => code.orNull
        case 4 => codeDescription.orNull
        case 5 => source.orNull
        case 6 => {
          val __t = message
          if (__t != "") __t else null
        }
        case 7 => tags.iterator.map(_.javaValueDescriptor).toSeq
        case 9 => data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(severity.scalaValueDescriptor)
        case 3 => code.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => codeDescription.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => source.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PString(message)
        case 7 => _root_.scalapb.descriptors.PRepeated(tags.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
        case 9 => data.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.type = io.deephaven.proto.backplane.script.grpc.console.Diagnostic
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.Diagnostic])
}

object Diagnostic extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.Diagnostic] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.Diagnostic] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.Diagnostic = {
    var __range: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange] = _root_.scala.None
    var __severity: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.NOT_SET_SEVERITY
    var __code: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __codeDescription: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription] = _root_.scala.None
    var __source: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __message: _root_.scala.Predef.String = ""
    val __tags: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag]
    var __data: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __range = _root_.scala.Option(__range.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.DocumentRange](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __severity = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.fromValue(_input__.readEnum())
        case 26 =>
          __code = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 34 =>
          __codeDescription = _root_.scala.Option(__codeDescription.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __source = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 50 =>
          __message = _input__.readStringRequireUtf8()
        case 56 =>
          __tags += io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag.fromValue(_input__.readEnum())
        case 58 => {
          val length = _input__.readRawVarint32()
          val oldLimit = _input__.pushLimit(length)
          while (_input__.getBytesUntilLimit > 0) {
            __tags += io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag.fromValue(_input__.readEnum())
          }
          _input__.popLimit(oldLimit)
        }
        case 74 =>
          __data = _root_.scala.Option(_input__.readBytes())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.Diagnostic(
        range = __range,
        severity = __severity,
        code = __code,
        codeDescription = __codeDescription,
        source = __source,
        message = __message,
        tags = __tags.result(),
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.Diagnostic] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.Diagnostic(
        range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange]]),
        severity = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.NOT_SET_SEVERITY.scalaValueDescriptor).number),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        codeDescription = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription]]),
        source = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        tags = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag.fromValue(__e.number)).toSeq,
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsoleProto.javaDescriptor.getMessageTypes().get(42)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsoleProto.scalaDescriptor.messages(42)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.script.grpc.console.DocumentRange
      case 4 => __out = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity
      case 7 => io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.Diagnostic(
    range = _root_.scala.None,
    severity = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.NOT_SET_SEVERITY,
    code = _root_.scala.None,
    codeDescription = _root_.scala.None,
    source = _root_.scala.None,
    message = "",
    tags = _root_.scala.Seq.empty,
    data = _root_.scala.None
  )
  sealed abstract class DiagnosticSeverity(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity
    type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.Recognized
    def isNotSetSeverity: _root_.scala.Boolean = false
    def isError: _root_.scala.Boolean = false
    def isWarning: _root_.scala.Boolean = false
    def isInformation: _root_.scala.Boolean = false
    def isHint: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[DiagnosticSeverity] = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity.Recognized])
  }
  
  object DiagnosticSeverity extends _root_.scalapb.GeneratedEnumCompanion[DiagnosticSeverity] {
    sealed trait Recognized extends DiagnosticSeverity
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[DiagnosticSeverity] = this
    
    @SerialVersionUID(0L)
    case object NOT_SET_SEVERITY extends DiagnosticSeverity(0) with DiagnosticSeverity.Recognized {
      val index = 0
      val name = "NOT_SET_SEVERITY"
      override def isNotSetSeverity: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ERROR extends DiagnosticSeverity(1) with DiagnosticSeverity.Recognized {
      val index = 1
      val name = "ERROR"
      override def isError: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WARNING extends DiagnosticSeverity(2) with DiagnosticSeverity.Recognized {
      val index = 2
      val name = "WARNING"
      override def isWarning: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object INFORMATION extends DiagnosticSeverity(3) with DiagnosticSeverity.Recognized {
      val index = 3
      val name = "INFORMATION"
      override def isInformation: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HINT extends DiagnosticSeverity(4) with DiagnosticSeverity.Recognized {
      val index = 4
      val name = "HINT"
      override def isHint: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends DiagnosticSeverity(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(NOT_SET_SEVERITY, ERROR, WARNING, INFORMATION, HINT)
    def fromValue(__value: _root_.scala.Int): DiagnosticSeverity = __value match {
      case 0 => NOT_SET_SEVERITY
      case 1 => ERROR
      case 2 => WARNING
      case 3 => INFORMATION
      case 4 => HINT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.scalaDescriptor.enums(0)
  }
  sealed abstract class DiagnosticTag(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag
    type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag.Recognized
    def isNotSetTag: _root_.scala.Boolean = false
    def isUnnecessary: _root_.scala.Boolean = false
    def isDeprecated: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[DiagnosticTag] = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag.Recognized])
  }
  
  object DiagnosticTag extends _root_.scalapb.GeneratedEnumCompanion[DiagnosticTag] {
    sealed trait Recognized extends DiagnosticTag
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[DiagnosticTag] = this
    
    @SerialVersionUID(0L)
    case object NOT_SET_TAG extends DiagnosticTag(0) with DiagnosticTag.Recognized {
      val index = 0
      val name = "NOT_SET_TAG"
      override def isNotSetTag: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNNECESSARY extends DiagnosticTag(1) with DiagnosticTag.Recognized {
      val index = 1
      val name = "UNNECESSARY"
      override def isUnnecessary: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DEPRECATED extends DiagnosticTag(2) with DiagnosticTag.Recognized {
      val index = 2
      val name = "DEPRECATED"
      override def isDeprecated: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends DiagnosticTag(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(NOT_SET_TAG, UNNECESSARY, DEPRECATED)
    def fromValue(__value: _root_.scala.Int): DiagnosticTag = __value match {
      case 0 => NOT_SET_TAG
      case 1 => UNNECESSARY
      case 2 => DEPRECATED
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.javaDescriptor.getEnumTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.scalaDescriptor.enums(1)
  }
  @SerialVersionUID(0L)
  final case class CodeDescription(
      href: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CodeDescription] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = href
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = href
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withHref(__v: _root_.scala.Predef.String): CodeDescription = copy(href = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = href
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(href)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription.type = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription])
  }
  
  object CodeDescription extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription = {
      var __href: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __href = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription(
          href = __href,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription(
          href = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription(
      href = ""
    )
    implicit class CodeDescriptionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription](_l) {
      def href: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.href)((c_, f_) => c_.copy(href = f_))
    }
    final val HREF_FIELD_NUMBER = 1
    def of(
      href: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription = _root_.io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription(
      href
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.Diagnostic.CodeDescription])
  }
  
  implicit class DiagnosticLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.Diagnostic]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.Diagnostic](_l) {
    def range: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.DocumentRange] = field(_.getRange)((c_, f_) => c_.copy(range = _root_.scala.Option(f_)))
    def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange]] = field(_.range)((c_, f_) => c_.copy(range = f_))
    def severity: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity] = field(_.severity)((c_, f_) => c_.copy(severity = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getCode)((c_, f_) => c_.copy(code = _root_.scala.Option(f_)))
    def optionalCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def codeDescription: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription] = field(_.getCodeDescription)((c_, f_) => c_.copy(codeDescription = _root_.scala.Option(f_)))
    def optionalCodeDescription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription]] = field(_.codeDescription)((c_, f_) => c_.copy(codeDescription = f_))
    def source: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getSource)((c_, f_) => c_.copy(source = _root_.scala.Option(f_)))
    def optionalSource: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.source)((c_, f_) => c_.copy(source = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
    def tags: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag]] = field(_.tags)((c_, f_) => c_.copy(tags = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getData)((c_, f_) => c_.copy(data = _root_.scala.Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.com.google.protobuf.ByteString]] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val RANGE_FIELD_NUMBER = 1
  final val SEVERITY_FIELD_NUMBER = 2
  final val CODE_FIELD_NUMBER = 3
  final val CODE_DESCRIPTION_FIELD_NUMBER = 4
  final val SOURCE_FIELD_NUMBER = 5
  final val MESSAGE_FIELD_NUMBER = 6
  final val TAGS_FIELD_NUMBER = 7
  final val DATA_FIELD_NUMBER = 9
  def of(
    range: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange],
    severity: io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticSeverity,
    code: _root_.scala.Option[_root_.scala.Predef.String],
    codeDescription: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.CodeDescription],
    source: _root_.scala.Option[_root_.scala.Predef.String],
    message: _root_.scala.Predef.String,
    tags: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic.DiagnosticTag],
    data: _root_.scala.Option[_root_.com.google.protobuf.ByteString]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.Diagnostic = _root_.io.deephaven.proto.backplane.script.grpc.console.Diagnostic(
    range,
    severity,
    code,
    codeDescription,
    source,
    message,
    tags,
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.Diagnostic])
}
