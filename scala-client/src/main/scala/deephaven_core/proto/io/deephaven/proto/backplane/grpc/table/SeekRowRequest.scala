// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class SeekRowRequest(
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    startingRow: _root_.scala.Long = 0L,
    columnName: _root_.scala.Predef.String = "",
    seekValue: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal] = _root_.scala.None,
    insensitive: _root_.scala.Boolean = false,
    contains: _root_.scala.Boolean = false,
    isBackward: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SeekRowRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (sourceId.isDefined) {
        val __value = sourceId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = startingRow
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(2, __value)
        }
      };
      
      {
        val __value = columnName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (seekValue.isDefined) {
        val __value = seekValue.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = insensitive
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = contains
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      
      {
        val __value = isBackward
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      sourceId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = startingRow
        if (__v != 0L) {
          _output__.writeSInt64(2, __v)
        }
      };
      {
        val __v = columnName
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      seekValue.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = insensitive
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = contains
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      {
        val __v = isBackward
        if (__v != false) {
          _output__.writeBool(7, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getSourceId: io.deephaven.proto.backplane.grpc.ticket.Ticket = sourceId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearSourceId: SeekRowRequest = copy(sourceId = _root_.scala.None)
    def withSourceId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): SeekRowRequest = copy(sourceId = Option(__v))
    def withStartingRow(__v: _root_.scala.Long): SeekRowRequest = copy(startingRow = __v)
    def withColumnName(__v: _root_.scala.Predef.String): SeekRowRequest = copy(columnName = __v)
    def getSeekValue: io.deephaven.proto.backplane.grpc.table.Literal = seekValue.getOrElse(io.deephaven.proto.backplane.grpc.table.Literal.defaultInstance)
    def clearSeekValue: SeekRowRequest = copy(seekValue = _root_.scala.None)
    def withSeekValue(__v: io.deephaven.proto.backplane.grpc.table.Literal): SeekRowRequest = copy(seekValue = Option(__v))
    def withInsensitive(__v: _root_.scala.Boolean): SeekRowRequest = copy(insensitive = __v)
    def withContains(__v: _root_.scala.Boolean): SeekRowRequest = copy(contains = __v)
    def withIsBackward(__v: _root_.scala.Boolean): SeekRowRequest = copy(isBackward = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => sourceId.orNull
        case 2 => {
          val __t = startingRow
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = columnName
          if (__t != "") __t else null
        }
        case 4 => seekValue.orNull
        case 5 => {
          val __t = insensitive
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = contains
          if (__t != false) __t else null
        }
        case 7 => {
          val __t = isBackward
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => sourceId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(startingRow)
        case 3 => _root_.scalapb.descriptors.PString(columnName)
        case 4 => seekValue.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PBoolean(insensitive)
        case 6 => _root_.scalapb.descriptors.PBoolean(contains)
        case 7 => _root_.scalapb.descriptors.PBoolean(isBackward)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.SeekRowRequest.type = io.deephaven.proto.backplane.grpc.table.SeekRowRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.SeekRowRequest])
}

object SeekRowRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.SeekRowRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.SeekRowRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.SeekRowRequest = {
    var __sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __startingRow: _root_.scala.Long = 0L
    var __columnName: _root_.scala.Predef.String = ""
    var __seekValue: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal] = _root_.scala.None
    var __insensitive: _root_.scala.Boolean = false
    var __contains: _root_.scala.Boolean = false
    var __isBackward: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __sourceId = _root_.scala.Option(__sourceId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __startingRow = _input__.readSInt64()
        case 26 =>
          __columnName = _input__.readStringRequireUtf8()
        case 34 =>
          __seekValue = _root_.scala.Option(__seekValue.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Literal](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 40 =>
          __insensitive = _input__.readBool()
        case 48 =>
          __contains = _input__.readBool()
        case 56 =>
          __isBackward = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.SeekRowRequest(
        sourceId = __sourceId,
        startingRow = __startingRow,
        columnName = __columnName,
        seekValue = __seekValue,
        insensitive = __insensitive,
        contains = __contains,
        isBackward = __isBackward,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.SeekRowRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.SeekRowRequest(
        sourceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        startingRow = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        seekValue = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal]]),
        insensitive = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        contains = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        isBackward = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(41)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(41)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.Literal
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.SeekRowRequest(
    sourceId = _root_.scala.None,
    startingRow = 0L,
    columnName = "",
    seekValue = _root_.scala.None,
    insensitive = false,
    contains = false,
    isBackward = false
  )
  implicit class SeekRowRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SeekRowRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.SeekRowRequest](_l) {
    def sourceId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getSourceId)((c_, f_) => c_.copy(sourceId = _root_.scala.Option(f_)))
    def optionalSourceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.sourceId)((c_, f_) => c_.copy(sourceId = f_))
    def startingRow: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.startingRow)((c_, f_) => c_.copy(startingRow = f_))
    def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
    def seekValue: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Literal] = field(_.getSeekValue)((c_, f_) => c_.copy(seekValue = _root_.scala.Option(f_)))
    def optionalSeekValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal]] = field(_.seekValue)((c_, f_) => c_.copy(seekValue = f_))
    def insensitive: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.insensitive)((c_, f_) => c_.copy(insensitive = f_))
    def contains: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.contains)((c_, f_) => c_.copy(contains = f_))
    def isBackward: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isBackward)((c_, f_) => c_.copy(isBackward = f_))
  }
  final val SOURCE_ID_FIELD_NUMBER = 1
  final val STARTING_ROW_FIELD_NUMBER = 2
  final val COLUMN_NAME_FIELD_NUMBER = 3
  final val SEEK_VALUE_FIELD_NUMBER = 4
  final val INSENSITIVE_FIELD_NUMBER = 5
  final val CONTAINS_FIELD_NUMBER = 6
  final val IS_BACKWARD_FIELD_NUMBER = 7
  def of(
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    startingRow: _root_.scala.Long,
    columnName: _root_.scala.Predef.String,
    seekValue: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal],
    insensitive: _root_.scala.Boolean,
    contains: _root_.scala.Boolean,
    isBackward: _root_.scala.Boolean
  ): _root_.io.deephaven.proto.backplane.grpc.table.SeekRowRequest = _root_.io.deephaven.proto.backplane.grpc.table.SeekRowRequest(
    sourceId,
    startingRow,
    columnName,
    seekValue,
    insensitive,
    contains,
    isBackward
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.SeekRowRequest])
}
