// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.session


object SessionServiceGrpc {
  @scala.deprecated(message="Marked as deprecated in proto file", "") val METHOD_NEW_SESSION: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.HandshakeRequest, io.deephaven.proto.backplane.grpc.session.HandshakeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "NewSession"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.HandshakeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.HandshakeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  @scala.deprecated(message="Marked as deprecated in proto file", "") val METHOD_REFRESH_SESSION_TOKEN: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.HandshakeRequest, io.deephaven.proto.backplane.grpc.session.HandshakeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "RefreshSessionToken"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.HandshakeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.HandshakeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_CLOSE_SESSION: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.HandshakeRequest, io.deephaven.proto.backplane.grpc.session.CloseSessionResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "CloseSession"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.HandshakeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.CloseSessionResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_RELEASE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.ReleaseRequest, io.deephaven.proto.backplane.grpc.session.ReleaseResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "Release"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.ReleaseRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.ReleaseResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_EXPORT_FROM_TICKET: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.ExportRequest, io.deephaven.proto.backplane.grpc.session.ExportResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "ExportFromTicket"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.ExportRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.ExportResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_PUBLISH_FROM_TICKET: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.PublishRequest, io.deephaven.proto.backplane.grpc.session.PublishResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "PublishFromTicket"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.PublishRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.PublishResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val METHOD_EXPORT_NOTIFICATIONS: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest, io.deephaven.proto.backplane.grpc.session.ExportNotification] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "ExportNotifications"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.ExportNotification])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(6)))
      .build()
  
  val METHOD_TERMINATION_NOTIFICATION: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest, io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.SessionService", "TerminationNotification"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0).getMethods().get(7)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.SessionService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor))
      .addMethod(METHOD_NEW_SESSION)
      .addMethod(METHOD_REFRESH_SESSION_TOKEN)
      .addMethod(METHOD_CLOSE_SESSION)
      .addMethod(METHOD_RELEASE)
      .addMethod(METHOD_EXPORT_FROM_TICKET)
      .addMethod(METHOD_PUBLISH_FROM_TICKET)
      .addMethod(METHOD_EXPORT_NOTIFICATIONS)
      .addMethod(METHOD_TERMINATION_NOTIFICATION)
      .build()
  
  /**
    * User supplied Flight.Ticket(s) should begin with 'e' byte followed by an signed little-endian int. The client is only
    * allowed to use the positive exportId key-space (client generated exportIds should be greater than 0). The client is
    * encouraged to use a packed ranges of ids as this yields the smallest footprint server side for long running sessions.
    *
    * The client is responsible for releasing all Flight.Tickets that they create or that were created for them via a gRPC
    * call. The documentation for the gRPC call will indicate that the exports must be released. Exports that need to be
    * released will always be communicated over the session's ExportNotification stream.
    *
    * When a session ends, either explicitly or due to timeout, all exported objects in that session are released
    * automatically.
    *
    * Some parts of the API return a Flight.Ticket that does not need to be released. It is not an error to attempt to
    * release them.
    */
  trait SessionService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[SessionService] = SessionService
    /**
      * Handshake between client and server to create a new session. The response includes a metadata header name and the
      * token to send on every subsequent request. The auth mechanisms here are unary to best support grpc-web.
      *
      * Deprecated: Please use Flight's Handshake or http authorization headers instead.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def newSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.HandshakeResponse]
    /**
      * Keep-alive a given token to ensure that a session is not cleaned prematurely. The response may include an updated
      * token that should replace the existing token for subsequent requests.
      *
      * Deprecated: Please use Flight's Handshake with an empty payload.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def refreshSessionToken(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.HandshakeResponse]
    /**
      * Proactively close an open session. Sessions will automatically close on timeout. When a session is closed, all
      * unreleased exports will be automatically released.
      */
    def closeSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.CloseSessionResponse]
    /**
      * Attempts to release an export by its ticket. Returns true if an existing export was found. It is the client's
      * responsibility to release all resources they no longer want the server to hold on to. Proactively cancels work; do
      * not release a ticket that is needed by dependent work that has not yet finished
      * (i.e. the dependencies that are staying around should first be in EXPORTED state).
      */
    def release(request: io.deephaven.proto.backplane.grpc.session.ReleaseRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.ReleaseResponse]
    /**
      * Makes a copy from a source ticket to a client managed result ticket. The source ticket does not need to be
      * a client managed ticket.
      */
    def exportFromTicket(request: io.deephaven.proto.backplane.grpc.session.ExportRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.ExportResponse]
    /**
      * Makes a copy from a source ticket and publishes to a result ticket. Neither the source ticket, nor the destination
      * ticket, need to be a client managed ticket.
      */
    def publishFromTicket(request: io.deephaven.proto.backplane.grpc.session.PublishRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.PublishResponse]
    /**
      * Establish a stream to manage all session exports, including those lost due to partially complete rpc calls.
      *
      * New streams will flush notifications for all un-released exports, prior to seeing any new or updated exports
      * for all live exports. After the refresh of existing state, subscribers will receive notifications of new and
      * updated exports. An export id of zero will be sent to indicate all pre-existing exports have been sent.
      */
    def exportNotifications(request: io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.ExportNotification]): _root_.scala.Unit
    /**
      * Receive a best-effort message on-exit indicating why this server is exiting. Reception of this message cannot be
      * guaranteed.
      */
    def terminationNotification(request: io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse]
  }
  
  object SessionService extends _root_.scalapb.grpc.ServiceCompanion[SessionService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[SessionService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.session.SessionProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: SessionService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_NEW_SESSION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.HandshakeResponse]) => {
          serviceImpl.newSession(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_REFRESH_SESSION_TOKEN,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.HandshakeResponse]) => {
          serviceImpl.refreshSessionToken(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CLOSE_SESSION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.CloseSessionResponse]) => {
          serviceImpl.closeSession(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_RELEASE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.ReleaseRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.ReleaseResponse]) => {
          serviceImpl.release(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_EXPORT_FROM_TICKET,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.ExportRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.ExportResponse]) => {
          serviceImpl.exportFromTicket(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_PUBLISH_FROM_TICKET,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.PublishRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.PublishResponse]) => {
          serviceImpl.publishFromTicket(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_EXPORT_NOTIFICATIONS,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.ExportNotification]) => {
          serviceImpl.exportNotifications(request, observer)
        }))
      .addMethod(
        METHOD_TERMINATION_NOTIFICATION,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse]) => {
          serviceImpl.terminationNotification(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /**
    * User supplied Flight.Ticket(s) should begin with 'e' byte followed by an signed little-endian int. The client is only
    * allowed to use the positive exportId key-space (client generated exportIds should be greater than 0). The client is
    * encouraged to use a packed ranges of ids as this yields the smallest footprint server side for long running sessions.
    *
    * The client is responsible for releasing all Flight.Tickets that they create or that were created for them via a gRPC
    * call. The documentation for the gRPC call will indicate that the exports must be released. Exports that need to be
    * released will always be communicated over the session's ExportNotification stream.
    *
    * When a session ends, either explicitly or due to timeout, all exported objects in that session are released
    * automatically.
    *
    * Some parts of the API return a Flight.Ticket that does not need to be released. It is not an error to attempt to
    * release them.
    */
  trait SessionServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[SessionService] = SessionService
    /**
      * Handshake between client and server to create a new session. The response includes a metadata header name and the
      * token to send on every subsequent request. The auth mechanisms here are unary to best support grpc-web.
      *
      * Deprecated: Please use Flight's Handshake or http authorization headers instead.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def newSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): io.deephaven.proto.backplane.grpc.session.HandshakeResponse
    /**
      * Keep-alive a given token to ensure that a session is not cleaned prematurely. The response may include an updated
      * token that should replace the existing token for subsequent requests.
      *
      * Deprecated: Please use Flight's Handshake with an empty payload.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") def refreshSessionToken(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): io.deephaven.proto.backplane.grpc.session.HandshakeResponse
    /**
      * Proactively close an open session. Sessions will automatically close on timeout. When a session is closed, all
      * unreleased exports will be automatically released.
      */
    def closeSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): io.deephaven.proto.backplane.grpc.session.CloseSessionResponse
    /**
      * Attempts to release an export by its ticket. Returns true if an existing export was found. It is the client's
      * responsibility to release all resources they no longer want the server to hold on to. Proactively cancels work; do
      * not release a ticket that is needed by dependent work that has not yet finished
      * (i.e. the dependencies that are staying around should first be in EXPORTED state).
      */
    def release(request: io.deephaven.proto.backplane.grpc.session.ReleaseRequest): io.deephaven.proto.backplane.grpc.session.ReleaseResponse
    /**
      * Makes a copy from a source ticket to a client managed result ticket. The source ticket does not need to be
      * a client managed ticket.
      */
    def exportFromTicket(request: io.deephaven.proto.backplane.grpc.session.ExportRequest): io.deephaven.proto.backplane.grpc.session.ExportResponse
    /**
      * Makes a copy from a source ticket and publishes to a result ticket. Neither the source ticket, nor the destination
      * ticket, need to be a client managed ticket.
      */
    def publishFromTicket(request: io.deephaven.proto.backplane.grpc.session.PublishRequest): io.deephaven.proto.backplane.grpc.session.PublishResponse
    /**
      * Establish a stream to manage all session exports, including those lost due to partially complete rpc calls.
      *
      * New streams will flush notifications for all un-released exports, prior to seeing any new or updated exports
      * for all live exports. After the refresh of existing state, subscribers will receive notifications of new and
      * updated exports. An export id of zero will be sent to indicate all pre-existing exports have been sent.
      */
    def exportNotifications(request: io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest): scala.collection.Iterator[io.deephaven.proto.backplane.grpc.session.ExportNotification]
    /**
      * Receive a best-effort message on-exit indicating why this server is exiting. Reception of this message cannot be
      * guaranteed.
      */
    def terminationNotification(request: io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest): io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse
  }
  
  class SessionServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[SessionServiceBlockingStub](channel, options) with SessionServiceBlockingClient {
    /**
      * Handshake between client and server to create a new session. The response includes a metadata header name and the
      * token to send on every subsequent request. The auth mechanisms here are unary to best support grpc-web.
      *
      * Deprecated: Please use Flight's Handshake or http authorization headers instead.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def newSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): io.deephaven.proto.backplane.grpc.session.HandshakeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_NEW_SESSION, options, request)
    }
    
    /**
      * Keep-alive a given token to ensure that a session is not cleaned prematurely. The response may include an updated
      * token that should replace the existing token for subsequent requests.
      *
      * Deprecated: Please use Flight's Handshake with an empty payload.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def refreshSessionToken(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): io.deephaven.proto.backplane.grpc.session.HandshakeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_REFRESH_SESSION_TOKEN, options, request)
    }
    
    /**
      * Proactively close an open session. Sessions will automatically close on timeout. When a session is closed, all
      * unreleased exports will be automatically released.
      */
    override def closeSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): io.deephaven.proto.backplane.grpc.session.CloseSessionResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CLOSE_SESSION, options, request)
    }
    
    /**
      * Attempts to release an export by its ticket. Returns true if an existing export was found. It is the client's
      * responsibility to release all resources they no longer want the server to hold on to. Proactively cancels work; do
      * not release a ticket that is needed by dependent work that has not yet finished
      * (i.e. the dependencies that are staying around should first be in EXPORTED state).
      */
    override def release(request: io.deephaven.proto.backplane.grpc.session.ReleaseRequest): io.deephaven.proto.backplane.grpc.session.ReleaseResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_RELEASE, options, request)
    }
    
    /**
      * Makes a copy from a source ticket to a client managed result ticket. The source ticket does not need to be
      * a client managed ticket.
      */
    override def exportFromTicket(request: io.deephaven.proto.backplane.grpc.session.ExportRequest): io.deephaven.proto.backplane.grpc.session.ExportResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_EXPORT_FROM_TICKET, options, request)
    }
    
    /**
      * Makes a copy from a source ticket and publishes to a result ticket. Neither the source ticket, nor the destination
      * ticket, need to be a client managed ticket.
      */
    override def publishFromTicket(request: io.deephaven.proto.backplane.grpc.session.PublishRequest): io.deephaven.proto.backplane.grpc.session.PublishResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PUBLISH_FROM_TICKET, options, request)
    }
    
    /**
      * Establish a stream to manage all session exports, including those lost due to partially complete rpc calls.
      *
      * New streams will flush notifications for all un-released exports, prior to seeing any new or updated exports
      * for all live exports. After the refresh of existing state, subscribers will receive notifications of new and
      * updated exports. An export id of zero will be sent to indicate all pre-existing exports have been sent.
      */
    override def exportNotifications(request: io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest): scala.collection.Iterator[io.deephaven.proto.backplane.grpc.session.ExportNotification] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_EXPORT_NOTIFICATIONS, options, request)
    }
    
    /**
      * Receive a best-effort message on-exit indicating why this server is exiting. Reception of this message cannot be
      * guaranteed.
      */
    override def terminationNotification(request: io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest): io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TERMINATION_NOTIFICATION, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SessionServiceBlockingStub = new SessionServiceBlockingStub(channel, options)
  }
  
  class SessionServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[SessionServiceStub](channel, options) with SessionService {
    /**
      * Handshake between client and server to create a new session. The response includes a metadata header name and the
      * token to send on every subsequent request. The auth mechanisms here are unary to best support grpc-web.
      *
      * Deprecated: Please use Flight's Handshake or http authorization headers instead.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def newSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.HandshakeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_NEW_SESSION, options, request)
    }
    
    /**
      * Keep-alive a given token to ensure that a session is not cleaned prematurely. The response may include an updated
      * token that should replace the existing token for subsequent requests.
      *
      * Deprecated: Please use Flight's Handshake with an empty payload.
      */
    @scala.deprecated(message="Marked as deprecated in proto file", "") override def refreshSessionToken(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.HandshakeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_REFRESH_SESSION_TOKEN, options, request)
    }
    
    /**
      * Proactively close an open session. Sessions will automatically close on timeout. When a session is closed, all
      * unreleased exports will be automatically released.
      */
    override def closeSession(request: io.deephaven.proto.backplane.grpc.session.HandshakeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.CloseSessionResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CLOSE_SESSION, options, request)
    }
    
    /**
      * Attempts to release an export by its ticket. Returns true if an existing export was found. It is the client's
      * responsibility to release all resources they no longer want the server to hold on to. Proactively cancels work; do
      * not release a ticket that is needed by dependent work that has not yet finished
      * (i.e. the dependencies that are staying around should first be in EXPORTED state).
      */
    override def release(request: io.deephaven.proto.backplane.grpc.session.ReleaseRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.ReleaseResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_RELEASE, options, request)
    }
    
    /**
      * Makes a copy from a source ticket to a client managed result ticket. The source ticket does not need to be
      * a client managed ticket.
      */
    override def exportFromTicket(request: io.deephaven.proto.backplane.grpc.session.ExportRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.ExportResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_EXPORT_FROM_TICKET, options, request)
    }
    
    /**
      * Makes a copy from a source ticket and publishes to a result ticket. Neither the source ticket, nor the destination
      * ticket, need to be a client managed ticket.
      */
    override def publishFromTicket(request: io.deephaven.proto.backplane.grpc.session.PublishRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.PublishResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PUBLISH_FROM_TICKET, options, request)
    }
    
    /**
      * Establish a stream to manage all session exports, including those lost due to partially complete rpc calls.
      *
      * New streams will flush notifications for all un-released exports, prior to seeing any new or updated exports
      * for all live exports. After the refresh of existing state, subscribers will receive notifications of new and
      * updated exports. An export id of zero will be sent to indicate all pre-existing exports have been sent.
      */
    override def exportNotifications(request: io.deephaven.proto.backplane.grpc.session.ExportNotificationRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.session.ExportNotification]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_EXPORT_NOTIFICATIONS, options, request, responseObserver)
    }
    
    /**
      * Receive a best-effort message on-exit indicating why this server is exiting. Reception of this message cannot be
      * guaranteed.
      */
    override def terminationNotification(request: io.deephaven.proto.backplane.grpc.session.TerminationNotificationRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TERMINATION_NOTIFICATION, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SessionServiceStub = new SessionServiceStub(channel, options)
  }
  
  object SessionServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[SessionServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): SessionServiceStub = new SessionServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[SessionServiceStub] = this
  }
  
  def bindService(serviceImpl: SessionService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = SessionService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): SessionServiceBlockingStub = new SessionServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): SessionServiceStub = new SessionServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getServices().get(0)
  
}