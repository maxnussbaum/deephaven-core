// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class InvokeCondition(
    method: _root_.scala.Predef.String = "",
    target: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None,
    arguments: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InvokeCondition] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = method
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (target.isDefined) {
        val __value = target.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      arguments.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = method
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      target.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      arguments.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withMethod(__v: _root_.scala.Predef.String): InvokeCondition = copy(method = __v)
    def getTarget: io.deephaven.proto.backplane.grpc.table.Value = target.getOrElse(io.deephaven.proto.backplane.grpc.table.Value.defaultInstance)
    def clearTarget: InvokeCondition = copy(target = _root_.scala.None)
    def withTarget(__v: io.deephaven.proto.backplane.grpc.table.Value): InvokeCondition = copy(target = Option(__v))
    def clearArguments = copy(arguments = _root_.scala.Seq.empty)
    def addArguments(__vs: io.deephaven.proto.backplane.grpc.table.Value *): InvokeCondition = addAllArguments(__vs)
    def addAllArguments(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.Value]): InvokeCondition = copy(arguments = arguments ++ __vs)
    def withArguments(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]): InvokeCondition = copy(arguments = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = method
          if (__t != "") __t else null
        }
        case 2 => target.orNull
        case 3 => arguments
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(method)
        case 2 => target.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(arguments.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.InvokeCondition.type = io.deephaven.proto.backplane.grpc.table.InvokeCondition
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.InvokeCondition])
}

object InvokeCondition extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.InvokeCondition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.InvokeCondition] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.InvokeCondition = {
    var __method: _root_.scala.Predef.String = ""
    var __target: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None
    val __arguments: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Value] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Value]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __method = _input__.readStringRequireUtf8()
        case 18 =>
          __target = _root_.scala.Option(__target.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Value](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __arguments += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Value](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.InvokeCondition(
        method = __method,
        target = __target,
        arguments = __arguments.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.InvokeCondition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.InvokeCondition(
        method = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]]),
        arguments = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(52)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(52)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.Value
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.Value
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.InvokeCondition(
    method = "",
    target = _root_.scala.None,
    arguments = _root_.scala.Seq.empty
  )
  implicit class InvokeConditionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.InvokeCondition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.InvokeCondition](_l) {
    def method: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.method)((c_, f_) => c_.copy(method = f_))
    def target: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value] = field(_.getTarget)((c_, f_) => c_.copy(target = _root_.scala.Option(f_)))
    def optionalTarget: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]] = field(_.target)((c_, f_) => c_.copy(target = f_))
    def arguments: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]] = field(_.arguments)((c_, f_) => c_.copy(arguments = f_))
  }
  final val METHOD_FIELD_NUMBER = 1
  final val TARGET_FIELD_NUMBER = 2
  final val ARGUMENTS_FIELD_NUMBER = 3
  def of(
    method: _root_.scala.Predef.String,
    target: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value],
    arguments: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]
  ): _root_.io.deephaven.proto.backplane.grpc.table.InvokeCondition = _root_.io.deephaven.proto.backplane.grpc.table.InvokeCondition(
    method,
    target,
    arguments
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.InvokeCondition])
}
