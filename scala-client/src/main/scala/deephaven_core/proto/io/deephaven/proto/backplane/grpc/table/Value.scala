// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

/** could also inline this to each place that uses it
  */
@SerialVersionUID(0L)
final case class Value(
    data: io.deephaven.proto.backplane.grpc.table.Value.Data = io.deephaven.proto.backplane.grpc.table.Value.Data.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Value] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (data.reference.isDefined) {
        val __value = data.reference.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.literal.isDefined) {
        val __value = data.literal.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.reference.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.literal.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getReference: io.deephaven.proto.backplane.grpc.table.Reference = data.reference.getOrElse(io.deephaven.proto.backplane.grpc.table.Reference.defaultInstance)
    def withReference(__v: io.deephaven.proto.backplane.grpc.table.Reference): Value = copy(data = io.deephaven.proto.backplane.grpc.table.Value.Data.Reference(__v))
    def getLiteral: io.deephaven.proto.backplane.grpc.table.Literal = data.literal.getOrElse(io.deephaven.proto.backplane.grpc.table.Literal.defaultInstance)
    def withLiteral(__v: io.deephaven.proto.backplane.grpc.table.Literal): Value = copy(data = io.deephaven.proto.backplane.grpc.table.Value.Data.Literal(__v))
    def clearData: Value = copy(data = io.deephaven.proto.backplane.grpc.table.Value.Data.Empty)
    def withData(__v: io.deephaven.proto.backplane.grpc.table.Value.Data): Value = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data.reference.orNull
        case 2 => data.literal.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => data.reference.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.literal.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.Value.type = io.deephaven.proto.backplane.grpc.table.Value
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Value])
}

object Value extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Value] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Value] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Value = {
    var __data: io.deephaven.proto.backplane.grpc.table.Value.Data = io.deephaven.proto.backplane.grpc.table.Value.Data.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __data = io.deephaven.proto.backplane.grpc.table.Value.Data.Reference(__data.reference.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Reference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __data = io.deephaven.proto.backplane.grpc.table.Value.Data.Literal(__data.literal.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Literal](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.Value(
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.Value(
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Reference]]).map(io.deephaven.proto.backplane.grpc.table.Value.Data.Reference(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.Value.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal]]).map(io.deephaven.proto.backplane.grpc.table.Value.Data.Literal(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.Value.Data.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(45)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(45)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.Reference
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.Literal
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Value(
    data = io.deephaven.proto.backplane.grpc.table.Value.Data.Empty
  )
  sealed trait Data extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isReference: _root_.scala.Boolean = false
    def isLiteral: _root_.scala.Boolean = false
    def reference: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Reference] = _root_.scala.None
    def literal: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal] = _root_.scala.None
  }
  object Data {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.Value.Data {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Reference(value: io.deephaven.proto.backplane.grpc.table.Reference) extends io.deephaven.proto.backplane.grpc.table.Value.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Reference
      override def isReference: _root_.scala.Boolean = true
      override def reference: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Reference] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Literal(value: io.deephaven.proto.backplane.grpc.table.Literal) extends io.deephaven.proto.backplane.grpc.table.Value.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.Literal
      override def isLiteral: _root_.scala.Boolean = true
      override def literal: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Literal] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class ValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value](_l) {
    def reference: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Reference] = field(_.getReference)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Value.Data.Reference(f_)))
    def literal: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Literal] = field(_.getLiteral)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Value.Data.Literal(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value.Data] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val REFERENCE_FIELD_NUMBER = 1
  final val LITERAL_FIELD_NUMBER = 2
  def of(
    data: io.deephaven.proto.backplane.grpc.table.Value.Data
  ): _root_.io.deephaven.proto.backplane.grpc.table.Value = _root_.io.deephaven.proto.backplane.grpc.table.Value(
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Value])
}
