// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.hierarchicaltable

/** @param resultHierarchicalTableId
  *   Ticket to use to hold the result HierarchicalTable (RollupTable or TreeTable) from the applying the operations
  * @param inputHierarchicalTableId
  *   Ticket for the input HierarchicalTable (RollupTable or TreeTable) to apply operations to
  * @param filters
  *   Filters to apply to the input HierarchicalTable to produce the result HierarchicalTable. Never expressed against
  *   the "structural" columns included in the a HierarchicalTableDescriptor's snapshot_schema.
  *   For RollupTables, only the group-by columns may be filtered. The names are always expressed as they appear
  *   in aggregated node columns (and in the group-by columns). The filtering will result in a complete or partial
  *   new Table.rollup operation.
  *   For TreeTables, these may be variously applied to the source (resulting in a new Table.tree operation) or to the
  *   nodes (resulting in filtering at snapshot time).
  * @param sorts
  *   Sorts to apply to the input HierarchicalTable to produce the result HierarchicalTable. Never expressed against
  *   the "structural" columns included in the a HierarchicalTableDescriptor's snapshot_schema.
  *   For TreeTables, these are simply applied to the nodes at snapshot time.
  *   For RollupTables, these are expressed against the aggregated, constituent or updateView node columns. The
  *   appropriate sorts are applied to the nodes at snapshot time.
  * @param formatViews
  *   Format operations to apply to the nodes of the table.
  *   For RollupTables, the update is applied only to the specified node types.
  *   For TreeTables, the node type is ignored and the update is applied to all nodes.
  * @param updateViews
  *   User-supplied update_view operations to apply to the nodes of the table.
  *   For RollupTables, the update is applied only to the specified node types.
  *   For TreeTables, the node type is ignored and the update is applied to all nodes.
  */
@SerialVersionUID(0L)
final case class HierarchicalTableApplyRequest(
    resultHierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    inputHierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    filters: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Condition] = _root_.scala.Seq.empty,
    sorts: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.SortDescriptor] = _root_.scala.Seq.empty,
    formatViews: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] = _root_.scala.Seq.empty,
    updateViews: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HierarchicalTableApplyRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultHierarchicalTableId.isDefined) {
        val __value = resultHierarchicalTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (inputHierarchicalTableId.isDefined) {
        val __value = inputHierarchicalTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      filters.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      sorts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      formatViews.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      updateViews.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultHierarchicalTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      inputHierarchicalTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      filters.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sorts.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      formatViews.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      updateViews.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultHierarchicalTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultHierarchicalTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultHierarchicalTableId: HierarchicalTableApplyRequest = copy(resultHierarchicalTableId = _root_.scala.None)
    def withResultHierarchicalTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): HierarchicalTableApplyRequest = copy(resultHierarchicalTableId = Option(__v))
    def getInputHierarchicalTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = inputHierarchicalTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearInputHierarchicalTableId: HierarchicalTableApplyRequest = copy(inputHierarchicalTableId = _root_.scala.None)
    def withInputHierarchicalTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): HierarchicalTableApplyRequest = copy(inputHierarchicalTableId = Option(__v))
    def clearFilters = copy(filters = _root_.scala.Seq.empty)
    def addFilters(__vs: io.deephaven.proto.backplane.grpc.table.Condition *): HierarchicalTableApplyRequest = addAllFilters(__vs)
    def addAllFilters(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.Condition]): HierarchicalTableApplyRequest = copy(filters = filters ++ __vs)
    def withFilters(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Condition]): HierarchicalTableApplyRequest = copy(filters = __v)
    def clearSorts = copy(sorts = _root_.scala.Seq.empty)
    def addSorts(__vs: io.deephaven.proto.backplane.grpc.table.SortDescriptor *): HierarchicalTableApplyRequest = addAllSorts(__vs)
    def addAllSorts(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.SortDescriptor]): HierarchicalTableApplyRequest = copy(sorts = sorts ++ __vs)
    def withSorts(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.SortDescriptor]): HierarchicalTableApplyRequest = copy(sorts = __v)
    def clearFormatViews = copy(formatViews = _root_.scala.Seq.empty)
    def addFormatViews(__vs: io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest *): HierarchicalTableApplyRequest = addAllFormatViews(__vs)
    def addAllFormatViews(__vs: Iterable[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]): HierarchicalTableApplyRequest = copy(formatViews = formatViews ++ __vs)
    def withFormatViews(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]): HierarchicalTableApplyRequest = copy(formatViews = __v)
    def clearUpdateViews = copy(updateViews = _root_.scala.Seq.empty)
    def addUpdateViews(__vs: io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest *): HierarchicalTableApplyRequest = addAllUpdateViews(__vs)
    def addAllUpdateViews(__vs: Iterable[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]): HierarchicalTableApplyRequest = copy(updateViews = updateViews ++ __vs)
    def withUpdateViews(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]): HierarchicalTableApplyRequest = copy(updateViews = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultHierarchicalTableId.orNull
        case 2 => inputHierarchicalTableId.orNull
        case 3 => filters
        case 4 => sorts
        case 5 => formatViews
        case 6 => updateViews
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultHierarchicalTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => inputHierarchicalTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(filters.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(sorts.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(formatViews.iterator.map(_.toPMessage).toVector)
        case 6 => _root_.scalapb.descriptors.PRepeated(updateViews.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest.type = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest])
}

object HierarchicalTableApplyRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest = {
    var __resultHierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __inputHierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    val __filters: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Condition] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Condition]
    val __sorts: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.SortDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.SortDescriptor]
    val __formatViews: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]
    val __updateViews: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultHierarchicalTableId = _root_.scala.Option(__resultHierarchicalTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __inputHierarchicalTableId = _root_.scala.Option(__inputHierarchicalTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __filters += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Condition](_input__)
        case 34 =>
          __sorts += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SortDescriptor](_input__)
        case 42 =>
          __formatViews += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest](_input__)
        case 50 =>
          __updateViews += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest(
        resultHierarchicalTableId = __resultHierarchicalTableId,
        inputHierarchicalTableId = __inputHierarchicalTableId,
        filters = __filters.result(),
        sorts = __sorts.result(),
        formatViews = __formatViews.result(),
        updateViews = __updateViews.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest(
        resultHierarchicalTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        inputHierarchicalTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        filters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Condition]]).getOrElse(_root_.scala.Seq.empty),
        sorts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.SortDescriptor]]).getOrElse(_root_.scala.Seq.empty),
        formatViews = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]]).getOrElse(_root_.scala.Seq.empty),
        updateViews = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = HierarchicaltableProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = HierarchicaltableProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.Condition
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.SortDescriptor
      case 5 => __out = io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest
      case 6 => __out = io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest(
    resultHierarchicalTableId = _root_.scala.None,
    inputHierarchicalTableId = _root_.scala.None,
    filters = _root_.scala.Seq.empty,
    sorts = _root_.scala.Seq.empty,
    formatViews = _root_.scala.Seq.empty,
    updateViews = _root_.scala.Seq.empty
  )
  implicit class HierarchicalTableApplyRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest](_l) {
    def resultHierarchicalTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultHierarchicalTableId)((c_, f_) => c_.copy(resultHierarchicalTableId = _root_.scala.Option(f_)))
    def optionalResultHierarchicalTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultHierarchicalTableId)((c_, f_) => c_.copy(resultHierarchicalTableId = f_))
    def inputHierarchicalTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getInputHierarchicalTableId)((c_, f_) => c_.copy(inputHierarchicalTableId = _root_.scala.Option(f_)))
    def optionalInputHierarchicalTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.inputHierarchicalTableId)((c_, f_) => c_.copy(inputHierarchicalTableId = f_))
    def filters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Condition]] = field(_.filters)((c_, f_) => c_.copy(filters = f_))
    def sorts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.SortDescriptor]] = field(_.sorts)((c_, f_) => c_.copy(sorts = f_))
    def formatViews: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]] = field(_.formatViews)((c_, f_) => c_.copy(formatViews = f_))
    def updateViews: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]] = field(_.updateViews)((c_, f_) => c_.copy(updateViews = f_))
  }
  final val RESULT_HIERARCHICAL_TABLE_ID_FIELD_NUMBER = 1
  final val INPUT_HIERARCHICAL_TABLE_ID_FIELD_NUMBER = 2
  final val FILTERS_FIELD_NUMBER = 3
  final val SORTS_FIELD_NUMBER = 4
  final val FORMAT_VIEWS_FIELD_NUMBER = 5
  final val UPDATE_VIEWS_FIELD_NUMBER = 6
  def of(
    resultHierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    inputHierarchicalTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    filters: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Condition],
    sorts: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.SortDescriptor],
    formatViews: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest],
    updateViews: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]
  ): _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest = _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest(
    resultHierarchicalTableId,
    inputHierarchicalTableId,
    filters,
    sorts,
    formatViews,
    updateViews
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.HierarchicalTableApplyRequest])
}
