// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.hierarchicaltable

/** @param resultRollupTableId
  *   Ticket to use to hold the result RollupTable from the rollup operation
  * @param sourceTableId
  *   Ticket for the source Table to rollup
  * @param aggregations
  *   The aggregations that should be applied at each level of the rollup
  * @param includeConstituents
  *   Whether to include the leaf-level constituents in the result
  * @param groupByColumns
  *   The names of the columns to rollup by
  */
@SerialVersionUID(0L)
final case class RollupRequest(
    resultRollupTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    aggregations: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation] = _root_.scala.Seq.empty,
    includeConstituents: _root_.scala.Boolean = false,
    groupByColumns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RollupRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultRollupTableId.isDefined) {
        val __value = resultRollupTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sourceTableId.isDefined) {
        val __value = sourceTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      aggregations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = includeConstituents
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      groupByColumns.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultRollupTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sourceTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      aggregations.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = includeConstituents
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      groupByColumns.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultRollupTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultRollupTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultRollupTableId: RollupRequest = copy(resultRollupTableId = _root_.scala.None)
    def withResultRollupTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): RollupRequest = copy(resultRollupTableId = Option(__v))
    def getSourceTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = sourceTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearSourceTableId: RollupRequest = copy(sourceTableId = _root_.scala.None)
    def withSourceTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): RollupRequest = copy(sourceTableId = Option(__v))
    def clearAggregations = copy(aggregations = _root_.scala.Seq.empty)
    def addAggregations(__vs: io.deephaven.proto.backplane.grpc.table.Aggregation *): RollupRequest = addAllAggregations(__vs)
    def addAllAggregations(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.Aggregation]): RollupRequest = copy(aggregations = aggregations ++ __vs)
    def withAggregations(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation]): RollupRequest = copy(aggregations = __v)
    def withIncludeConstituents(__v: _root_.scala.Boolean): RollupRequest = copy(includeConstituents = __v)
    def clearGroupByColumns = copy(groupByColumns = _root_.scala.Seq.empty)
    def addGroupByColumns(__vs: _root_.scala.Predef.String *): RollupRequest = addAllGroupByColumns(__vs)
    def addAllGroupByColumns(__vs: Iterable[_root_.scala.Predef.String]): RollupRequest = copy(groupByColumns = groupByColumns ++ __vs)
    def withGroupByColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): RollupRequest = copy(groupByColumns = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultRollupTableId.orNull
        case 2 => sourceTableId.orNull
        case 3 => aggregations
        case 4 => {
          val __t = includeConstituents
          if (__t != false) __t else null
        }
        case 5 => groupByColumns
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultRollupTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sourceTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(aggregations.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PBoolean(includeConstituents)
        case 5 => _root_.scalapb.descriptors.PRepeated(groupByColumns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest.type = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.RollupRequest])
}

object RollupRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest = {
    var __resultRollupTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    val __aggregations: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Aggregation] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Aggregation]
    var __includeConstituents: _root_.scala.Boolean = false
    val __groupByColumns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultRollupTableId = _root_.scala.Option(__resultRollupTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sourceTableId = _root_.scala.Option(__sourceTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __aggregations += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation](_input__)
        case 32 =>
          __includeConstituents = _input__.readBool()
        case 42 =>
          __groupByColumns += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest(
        resultRollupTableId = __resultRollupTableId,
        sourceTableId = __sourceTableId,
        aggregations = __aggregations.result(),
        includeConstituents = __includeConstituents,
        groupByColumns = __groupByColumns.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest(
        resultRollupTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        sourceTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        aggregations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation]]).getOrElse(_root_.scala.Seq.empty),
        includeConstituents = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        groupByColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest(
    resultRollupTableId = _root_.scala.None,
    sourceTableId = _root_.scala.None,
    aggregations = _root_.scala.Seq.empty,
    includeConstituents = false,
    groupByColumns = _root_.scala.Seq.empty
  )
  implicit class RollupRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest](_l) {
    def resultRollupTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultRollupTableId)((c_, f_) => c_.copy(resultRollupTableId = _root_.scala.Option(f_)))
    def optionalResultRollupTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultRollupTableId)((c_, f_) => c_.copy(resultRollupTableId = f_))
    def sourceTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getSourceTableId)((c_, f_) => c_.copy(sourceTableId = _root_.scala.Option(f_)))
    def optionalSourceTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.sourceTableId)((c_, f_) => c_.copy(sourceTableId = f_))
    def aggregations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation]] = field(_.aggregations)((c_, f_) => c_.copy(aggregations = f_))
    def includeConstituents: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.includeConstituents)((c_, f_) => c_.copy(includeConstituents = f_))
    def groupByColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.groupByColumns)((c_, f_) => c_.copy(groupByColumns = f_))
  }
  final val RESULT_ROLLUP_TABLE_ID_FIELD_NUMBER = 1
  final val SOURCE_TABLE_ID_FIELD_NUMBER = 2
  final val AGGREGATIONS_FIELD_NUMBER = 3
  final val INCLUDE_CONSTITUENTS_FIELD_NUMBER = 4
  final val GROUP_BY_COLUMNS_FIELD_NUMBER = 5
  def of(
    resultRollupTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    aggregations: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation],
    includeConstituents: _root_.scala.Boolean,
    groupByColumns: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest = _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest(
    resultRollupTableId,
    sourceTableId,
    aggregations,
    includeConstituents,
    groupByColumns
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.RollupRequest])
}
