// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

/** @param success
  *   If this is part of a batch, you may receive creation messages that indicate the sub-operation failed.
  * @param errorInfo
  *   If this is part of a batch, this errorInfo will be the message provided
  * @param schemaHeader
  *   Schema as described in Arrow Message.fbs::Message.
  * @param isStatic
  *   Whether or not this table might change.
  * @param size
  *   The current number of rows for this table. If this is negative, the table isn't coalesced, meaning the
  *   size isn't known without scanning partitions. Typically, the client should filter the data by the
  *   partitioning columns first.
  */
@SerialVersionUID(0L)
final case class ExportedTableCreationResponse(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    success: _root_.scala.Boolean = false,
    errorInfo: _root_.scala.Predef.String = "",
    schemaHeader: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    isStatic: _root_.scala.Boolean = false,
    size: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExportedTableCreationResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = success
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = errorInfo
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = schemaHeader
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
        }
      };
      
      {
        val __value = isStatic
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = size
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = success
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = errorInfo
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = schemaHeader
        if (!__v.isEmpty) {
          _output__.writeBytes(4, __v)
        }
      };
      {
        val __v = isStatic
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = size
        if (__v != 0L) {
          _output__.writeSInt64(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.table.TableReference = resultId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearResultId: ExportedTableCreationResponse = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): ExportedTableCreationResponse = copy(resultId = Option(__v))
    def withSuccess(__v: _root_.scala.Boolean): ExportedTableCreationResponse = copy(success = __v)
    def withErrorInfo(__v: _root_.scala.Predef.String): ExportedTableCreationResponse = copy(errorInfo = __v)
    def withSchemaHeader(__v: _root_.com.google.protobuf.ByteString): ExportedTableCreationResponse = copy(schemaHeader = __v)
    def withIsStatic(__v: _root_.scala.Boolean): ExportedTableCreationResponse = copy(isStatic = __v)
    def withSize(__v: _root_.scala.Long): ExportedTableCreationResponse = copy(size = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => {
          val __t = success
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = errorInfo
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = schemaHeader
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 5 => {
          val __t = isStatic
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = size
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PBoolean(success)
        case 3 => _root_.scalapb.descriptors.PString(errorInfo)
        case 4 => _root_.scalapb.descriptors.PByteString(schemaHeader)
        case 5 => _root_.scalapb.descriptors.PBoolean(isStatic)
        case 6 => _root_.scalapb.descriptors.PLong(size)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse.type = io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse])
}

object ExportedTableCreationResponse extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __success: _root_.scala.Boolean = false
    var __errorInfo: _root_.scala.Predef.String = ""
    var __schemaHeader: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    var __isStatic: _root_.scala.Boolean = false
    var __size: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __success = _input__.readBool()
        case 26 =>
          __errorInfo = _input__.readStringRequireUtf8()
        case 34 =>
          __schemaHeader = _input__.readBytes()
        case 40 =>
          __isStatic = _input__.readBool()
        case 48 =>
          __size = _input__.readSInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse(
        resultId = __resultId,
        success = __success,
        errorInfo = __errorInfo,
        schemaHeader = __schemaHeader,
        isStatic = __isStatic,
        size = __size,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        success = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        errorInfo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        schemaHeader = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        isStatic = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse(
    resultId = _root_.scala.None,
    success = false,
    errorInfo = "",
    schemaHeader = _root_.com.google.protobuf.ByteString.EMPTY,
    isStatic = false,
    size = 0L
  )
  implicit class ExportedTableCreationResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def success: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.success)((c_, f_) => c_.copy(success = f_))
    def errorInfo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.errorInfo)((c_, f_) => c_.copy(errorInfo = f_))
    def schemaHeader: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.schemaHeader)((c_, f_) => c_.copy(schemaHeader = f_))
    def isStatic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isStatic)((c_, f_) => c_.copy(isStatic = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val SUCCESS_FIELD_NUMBER = 2
  final val ERROR_INFO_FIELD_NUMBER = 3
  final val SCHEMA_HEADER_FIELD_NUMBER = 4
  final val IS_STATIC_FIELD_NUMBER = 5
  final val SIZE_FIELD_NUMBER = 6
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    success: _root_.scala.Boolean,
    errorInfo: _root_.scala.Predef.String,
    schemaHeader: _root_.com.google.protobuf.ByteString,
    isStatic: _root_.scala.Boolean,
    size: _root_.scala.Long
  ): _root_.io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse = _root_.io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse(
    resultId,
    success,
    errorInfo,
    schemaHeader,
    isStatic,
    size
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ExportedTableCreationResponse])
}
