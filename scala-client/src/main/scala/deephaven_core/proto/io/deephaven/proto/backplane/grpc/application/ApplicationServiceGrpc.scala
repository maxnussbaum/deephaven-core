// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.application


object ApplicationServiceGrpc {
  val METHOD_LIST_FIELDS: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.application.ListFieldsRequest, io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.ApplicationService", "ListFields"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.application.ListFieldsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.application.ApplicationProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.ApplicationService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.application.ApplicationProto.javaDescriptor))
      .addMethod(METHOD_LIST_FIELDS)
      .build()
  
  /**
    * Allows clients to list fields that are accessible to them.
    */
  trait ApplicationService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ApplicationService] = ApplicationService
    /**
      * Request the list of the fields exposed via the worker.
      *
      * - The first received message contains all fields that are currently available
      *   on the worker. None of these fields will be RemovedFields.
      * - Subsequent messages modify the existing state. Fields are identified by
      *   their ticket and may be replaced or removed.
      */
    def listFields(request: io.deephaven.proto.backplane.grpc.application.ListFieldsRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate]): _root_.scala.Unit
  }
  
  object ApplicationService extends _root_.scalapb.grpc.ServiceCompanion[ApplicationService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ApplicationService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.application.ApplicationProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.application.ApplicationProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ApplicationService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_LIST_FIELDS,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: io.deephaven.proto.backplane.grpc.application.ListFieldsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate]) => {
          serviceImpl.listFields(request, observer)
        }))
      .build()
  }
  
  /**
    * Allows clients to list fields that are accessible to them.
    */
  trait ApplicationServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ApplicationService] = ApplicationService
    /**
      * Request the list of the fields exposed via the worker.
      *
      * - The first received message contains all fields that are currently available
      *   on the worker. None of these fields will be RemovedFields.
      * - Subsequent messages modify the existing state. Fields are identified by
      *   their ticket and may be replaced or removed.
      */
    def listFields(request: io.deephaven.proto.backplane.grpc.application.ListFieldsRequest): scala.collection.Iterator[io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate]
  }
  
  class ApplicationServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ApplicationServiceBlockingStub](channel, options) with ApplicationServiceBlockingClient {
    /**
      * Request the list of the fields exposed via the worker.
      *
      * - The first received message contains all fields that are currently available
      *   on the worker. None of these fields will be RemovedFields.
      * - Subsequent messages modify the existing state. Fields are identified by
      *   their ticket and may be replaced or removed.
      */
    override def listFields(request: io.deephaven.proto.backplane.grpc.application.ListFieldsRequest): scala.collection.Iterator[io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_LIST_FIELDS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ApplicationServiceBlockingStub = new ApplicationServiceBlockingStub(channel, options)
  }
  
  class ApplicationServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ApplicationServiceStub](channel, options) with ApplicationService {
    /**
      * Request the list of the fields exposed via the worker.
      *
      * - The first received message contains all fields that are currently available
      *   on the worker. None of these fields will be RemovedFields.
      * - Subsequent messages modify the existing state. Fields are identified by
      *   their ticket and may be replaced or removed.
      */
    override def listFields(request: io.deephaven.proto.backplane.grpc.application.ListFieldsRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.application.FieldsChangeUpdate]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_LIST_FIELDS, options, request, responseObserver)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ApplicationServiceStub = new ApplicationServiceStub(channel, options)
  }
  
  object ApplicationServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ApplicationServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ApplicationServiceStub = new ApplicationServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ApplicationServiceStub] = this
  }
  
  def bindService(serviceImpl: ApplicationService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ApplicationService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ApplicationServiceBlockingStub = new ApplicationServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ApplicationServiceStub = new ApplicationServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.application.ApplicationProto.javaDescriptor.getServices().get(0)
  
}