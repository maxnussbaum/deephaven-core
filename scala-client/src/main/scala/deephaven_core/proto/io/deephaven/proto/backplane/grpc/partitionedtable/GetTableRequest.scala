// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.partitionedtable

/** @param partitionedTable
  *   The ticket for the PartitionedTable object to query.
  * @param keyTableTicket
  *   The ticket for the table containing the key to fetch from the partitioned table.
  * @param resultId
  *   The ticket to use to hold the newly returned table.
  * @param uniqueBehavior
  *   The behavior for handling result Tables that do not have a unique result.
  */
@SerialVersionUID(0L)
final case class GetTableRequest(
    partitionedTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    keyTableTicket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    uniqueBehavior: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.NOT_SET_UNIQUE_BEHAVIOR,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetTableRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (partitionedTable.isDefined) {
        val __value = partitionedTable.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (keyTableTicket.isDefined) {
        val __value = keyTableTicket.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = uniqueBehavior.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      partitionedTable.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      keyTableTicket.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = uniqueBehavior.value
        if (__v != 0) {
          _output__.writeEnum(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getPartitionedTable: io.deephaven.proto.backplane.grpc.ticket.Ticket = partitionedTable.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearPartitionedTable: GetTableRequest = copy(partitionedTable = _root_.scala.None)
    def withPartitionedTable(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): GetTableRequest = copy(partitionedTable = Option(__v))
    def getKeyTableTicket: io.deephaven.proto.backplane.grpc.ticket.Ticket = keyTableTicket.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearKeyTableTicket: GetTableRequest = copy(keyTableTicket = _root_.scala.None)
    def withKeyTableTicket(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): GetTableRequest = copy(keyTableTicket = Option(__v))
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: GetTableRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): GetTableRequest = copy(resultId = Option(__v))
    def withUniqueBehavior(__v: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior): GetTableRequest = copy(uniqueBehavior = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => partitionedTable.orNull
        case 2 => keyTableTicket.orNull
        case 4 => resultId.orNull
        case 5 => {
          val __t = uniqueBehavior.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => partitionedTable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => keyTableTicket.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PEnum(uniqueBehavior.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.type = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.GetTableRequest])
}

object GetTableRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest = {
    var __partitionedTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __keyTableTicket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __uniqueBehavior: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.NOT_SET_UNIQUE_BEHAVIOR
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __partitionedTable = _root_.scala.Option(__partitionedTable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __keyTableTicket = _root_.scala.Option(__keyTableTicket.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 40 =>
          __uniqueBehavior = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest(
        partitionedTable = __partitionedTable,
        keyTableTicket = __keyTableTicket,
        resultId = __resultId,
        uniqueBehavior = __uniqueBehavior,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest(
        partitionedTable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        keyTableTicket = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        uniqueBehavior = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.NOT_SET_UNIQUE_BEHAVIOR.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = PartitionedtableProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = PartitionedtableProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 4 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 5 => io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest(
    partitionedTable = _root_.scala.None,
    keyTableTicket = _root_.scala.None,
    resultId = _root_.scala.None,
    uniqueBehavior = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.NOT_SET_UNIQUE_BEHAVIOR
  )
  sealed abstract class UniqueBehavior(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior
    type RecognizedType = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.Recognized
    def isNotSetUniqueBehavior: _root_.scala.Boolean = false
    def isRequireUniqueResultsStaticSingleKey: _root_.scala.Boolean = false
    def isPermitMultipleKeys: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[UniqueBehavior] = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior.Recognized])
  }
  
  object UniqueBehavior extends _root_.scalapb.GeneratedEnumCompanion[UniqueBehavior] {
    sealed trait Recognized extends UniqueBehavior
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[UniqueBehavior] = this
    
    /** The behavior is unset, in which case we default to requiring unique results.
      */
    @SerialVersionUID(0L)
    case object NOT_SET_UNIQUE_BEHAVIOR extends UniqueBehavior(0) with UniqueBehavior.Recognized {
      val index = 0
      val name = "NOT_SET_UNIQUE_BEHAVIOR"
      override def isNotSetUniqueBehavior: _root_.scala.Boolean = true
    }
    
    /** Only one key is permitted, the key table is snapshot if not static, and the resulting partitioned table must have exactly one key.
      */
    @SerialVersionUID(0L)
    case object REQUIRE_UNIQUE_RESULTS_STATIC_SINGLE_KEY extends UniqueBehavior(1) with UniqueBehavior.Recognized {
      val index = 1
      val name = "REQUIRE_UNIQUE_RESULTS_STATIC_SINGLE_KEY"
      override def isRequireUniqueResultsStaticSingleKey: _root_.scala.Boolean = true
    }
    
    /** Merge results from multiple (or zero keys).
      */
    @SerialVersionUID(0L)
    case object PERMIT_MULTIPLE_KEYS extends UniqueBehavior(2) with UniqueBehavior.Recognized {
      val index = 2
      val name = "PERMIT_MULTIPLE_KEYS"
      override def isPermitMultipleKeys: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends UniqueBehavior(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(NOT_SET_UNIQUE_BEHAVIOR, REQUIRE_UNIQUE_RESULTS_STATIC_SINGLE_KEY, PERMIT_MULTIPLE_KEYS)
    def fromValue(__value: _root_.scala.Int): UniqueBehavior = __value match {
      case 0 => NOT_SET_UNIQUE_BEHAVIOR
      case 1 => REQUIRE_UNIQUE_RESULTS_STATIC_SINGLE_KEY
      case 2 => PERMIT_MULTIPLE_KEYS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.scalaDescriptor.enums(0)
  }
  implicit class GetTableRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest](_l) {
    def partitionedTable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getPartitionedTable)((c_, f_) => c_.copy(partitionedTable = _root_.scala.Option(f_)))
    def optionalPartitionedTable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.partitionedTable)((c_, f_) => c_.copy(partitionedTable = f_))
    def keyTableTicket: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getKeyTableTicket)((c_, f_) => c_.copy(keyTableTicket = _root_.scala.Option(f_)))
    def optionalKeyTableTicket: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.keyTableTicket)((c_, f_) => c_.copy(keyTableTicket = f_))
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def uniqueBehavior: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior] = field(_.uniqueBehavior)((c_, f_) => c_.copy(uniqueBehavior = f_))
  }
  final val PARTITIONED_TABLE_FIELD_NUMBER = 1
  final val KEY_TABLE_TICKET_FIELD_NUMBER = 2
  final val RESULT_ID_FIELD_NUMBER = 4
  final val UNIQUE_BEHAVIOR_FIELD_NUMBER = 5
  def of(
    partitionedTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    keyTableTicket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    uniqueBehavior: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest.UniqueBehavior
  ): _root_.io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest = _root_.io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest(
    partitionedTable,
    keyTableTicket,
    resultId,
    uniqueBehavior
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.GetTableRequest])
}
