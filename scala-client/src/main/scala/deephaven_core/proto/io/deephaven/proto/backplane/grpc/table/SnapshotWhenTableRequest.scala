// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

/** @param baseId
  *   The base table.
  * @param triggerId
  *   The trigger table.
  * @param initial
  *   Whether the results should contain an initial snapshot.
  * @param incremental
  *   Whether the results should be incremental.
  * @param history
  *   Whether the results should keep history.
  * @param stampColumns
  *   Which columns to stamp from the trigger table. If empty, all columns from the trigger table are stamped. Allows renaming columns.
  */
@SerialVersionUID(0L)
final case class SnapshotWhenTableRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    baseId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    triggerId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    initial: _root_.scala.Boolean = false,
    incremental: _root_.scala.Boolean = false,
    history: _root_.scala.Boolean = false,
    stampColumns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SnapshotWhenTableRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (baseId.isDefined) {
        val __value = baseId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (triggerId.isDefined) {
        val __value = triggerId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = initial
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      
      {
        val __value = incremental
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      
      {
        val __value = history
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(6, __value)
        }
      };
      stampColumns.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      baseId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      triggerId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = initial
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      {
        val __v = incremental
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      {
        val __v = history
        if (__v != false) {
          _output__.writeBool(6, __v)
        }
      };
      stampColumns.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: SnapshotWhenTableRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): SnapshotWhenTableRequest = copy(resultId = Option(__v))
    def getBaseId: io.deephaven.proto.backplane.grpc.table.TableReference = baseId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearBaseId: SnapshotWhenTableRequest = copy(baseId = _root_.scala.None)
    def withBaseId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): SnapshotWhenTableRequest = copy(baseId = Option(__v))
    def getTriggerId: io.deephaven.proto.backplane.grpc.table.TableReference = triggerId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearTriggerId: SnapshotWhenTableRequest = copy(triggerId = _root_.scala.None)
    def withTriggerId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): SnapshotWhenTableRequest = copy(triggerId = Option(__v))
    def withInitial(__v: _root_.scala.Boolean): SnapshotWhenTableRequest = copy(initial = __v)
    def withIncremental(__v: _root_.scala.Boolean): SnapshotWhenTableRequest = copy(incremental = __v)
    def withHistory(__v: _root_.scala.Boolean): SnapshotWhenTableRequest = copy(history = __v)
    def clearStampColumns = copy(stampColumns = _root_.scala.Seq.empty)
    def addStampColumns(__vs: _root_.scala.Predef.String *): SnapshotWhenTableRequest = addAllStampColumns(__vs)
    def addAllStampColumns(__vs: Iterable[_root_.scala.Predef.String]): SnapshotWhenTableRequest = copy(stampColumns = stampColumns ++ __vs)
    def withStampColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): SnapshotWhenTableRequest = copy(stampColumns = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => baseId.orNull
        case 3 => triggerId.orNull
        case 4 => {
          val __t = initial
          if (__t != false) __t else null
        }
        case 5 => {
          val __t = incremental
          if (__t != false) __t else null
        }
        case 6 => {
          val __t = history
          if (__t != false) __t else null
        }
        case 7 => stampColumns
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => baseId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => triggerId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PBoolean(initial)
        case 5 => _root_.scalapb.descriptors.PBoolean(incremental)
        case 6 => _root_.scalapb.descriptors.PBoolean(history)
        case 7 => _root_.scalapb.descriptors.PRepeated(stampColumns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest.type = io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest])
}

object SnapshotWhenTableRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __baseId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __triggerId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __initial: _root_.scala.Boolean = false
    var __incremental: _root_.scala.Boolean = false
    var __history: _root_.scala.Boolean = false
    val __stampColumns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __baseId = _root_.scala.Option(__baseId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __triggerId = _root_.scala.Option(__triggerId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 32 =>
          __initial = _input__.readBool()
        case 40 =>
          __incremental = _input__.readBool()
        case 48 =>
          __history = _input__.readBool()
        case 58 =>
          __stampColumns += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest(
        resultId = __resultId,
        baseId = __baseId,
        triggerId = __triggerId,
        initial = __initial,
        incremental = __incremental,
        history = __history,
        stampColumns = __stampColumns.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        baseId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        triggerId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        initial = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        incremental = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        history = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        stampColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(23)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(23)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest(
    resultId = _root_.scala.None,
    baseId = _root_.scala.None,
    triggerId = _root_.scala.None,
    initial = false,
    incremental = false,
    history = false,
    stampColumns = _root_.scala.Seq.empty
  )
  implicit class SnapshotWhenTableRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def baseId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getBaseId)((c_, f_) => c_.copy(baseId = _root_.scala.Option(f_)))
    def optionalBaseId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.baseId)((c_, f_) => c_.copy(baseId = f_))
    def triggerId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getTriggerId)((c_, f_) => c_.copy(triggerId = _root_.scala.Option(f_)))
    def optionalTriggerId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.triggerId)((c_, f_) => c_.copy(triggerId = f_))
    def initial: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.initial)((c_, f_) => c_.copy(initial = f_))
    def incremental: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.incremental)((c_, f_) => c_.copy(incremental = f_))
    def history: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.history)((c_, f_) => c_.copy(history = f_))
    def stampColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.stampColumns)((c_, f_) => c_.copy(stampColumns = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val BASE_ID_FIELD_NUMBER = 2
  final val TRIGGER_ID_FIELD_NUMBER = 3
  final val INITIAL_FIELD_NUMBER = 4
  final val INCREMENTAL_FIELD_NUMBER = 5
  final val HISTORY_FIELD_NUMBER = 6
  final val STAMP_COLUMNS_FIELD_NUMBER = 7
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    baseId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    triggerId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    initial: _root_.scala.Boolean,
    incremental: _root_.scala.Boolean,
    history: _root_.scala.Boolean,
    stampColumns: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest = _root_.io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest(
    resultId,
    baseId,
    triggerId,
    initial,
    incremental,
    history,
    stampColumns
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.SnapshotWhenTableRequest])
}
