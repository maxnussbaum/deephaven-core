// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.session

/** @param context
  *  
  *   any errors will include an id that can be used to find details of the error in the logs
  * @param dependentHandle
  *  
  *   will be set to an identifier of the dependency that cascaded the error if applicable
  */
@SerialVersionUID(0L)
final case class ExportNotification(
    ticket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    exportState: io.deephaven.proto.backplane.grpc.session.ExportNotification.State = io.deephaven.proto.backplane.grpc.session.ExportNotification.State.UNKNOWN,
    context: _root_.scala.Predef.String = "",
    dependentHandle: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExportNotification] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (ticket.isDefined) {
        val __value = ticket.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = exportState.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      
      {
        val __value = context
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = dependentHandle
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ticket.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = exportState.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      {
        val __v = context
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = dependentHandle
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getTicket: io.deephaven.proto.backplane.grpc.ticket.Ticket = ticket.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearTicket: ExportNotification = copy(ticket = _root_.scala.None)
    def withTicket(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): ExportNotification = copy(ticket = Option(__v))
    def withExportState(__v: io.deephaven.proto.backplane.grpc.session.ExportNotification.State): ExportNotification = copy(exportState = __v)
    def withContext(__v: _root_.scala.Predef.String): ExportNotification = copy(context = __v)
    def withDependentHandle(__v: _root_.scala.Predef.String): ExportNotification = copy(dependentHandle = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ticket.orNull
        case 2 => {
          val __t = exportState.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => {
          val __t = context
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = dependentHandle
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ticket.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(exportState.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PString(context)
        case 4 => _root_.scalapb.descriptors.PString(dependentHandle)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.session.ExportNotification.type = io.deephaven.proto.backplane.grpc.session.ExportNotification
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ExportNotification])
}

object ExportNotification extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.session.ExportNotification] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.session.ExportNotification] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.session.ExportNotification = {
    var __ticket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __exportState: io.deephaven.proto.backplane.grpc.session.ExportNotification.State = io.deephaven.proto.backplane.grpc.session.ExportNotification.State.UNKNOWN
    var __context: _root_.scala.Predef.String = ""
    var __dependentHandle: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __ticket = _root_.scala.Option(__ticket.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __exportState = io.deephaven.proto.backplane.grpc.session.ExportNotification.State.fromValue(_input__.readEnum())
        case 26 =>
          __context = _input__.readStringRequireUtf8()
        case 34 =>
          __dependentHandle = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.session.ExportNotification(
        ticket = __ticket,
        exportState = __exportState,
        context = __context,
        dependentHandle = __dependentHandle,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.session.ExportNotification] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.session.ExportNotification(
        ticket = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        exportState = io.deephaven.proto.backplane.grpc.session.ExportNotification.State.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.session.ExportNotification.State.UNKNOWN.scalaValueDescriptor).number),
        context = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        dependentHandle = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = SessionProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = SessionProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.deephaven.proto.backplane.grpc.session.ExportNotification.State
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.session.ExportNotification(
    ticket = _root_.scala.None,
    exportState = io.deephaven.proto.backplane.grpc.session.ExportNotification.State.UNKNOWN,
    context = "",
    dependentHandle = ""
  )
  sealed abstract class State(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.session.ExportNotification.State
    type RecognizedType = io.deephaven.proto.backplane.grpc.session.ExportNotification.State.Recognized
    def isUnknown: _root_.scala.Boolean = false
    def isPending: _root_.scala.Boolean = false
    def isPublishing: _root_.scala.Boolean = false
    def isQueued: _root_.scala.Boolean = false
    def isRunning: _root_.scala.Boolean = false
    def isExported: _root_.scala.Boolean = false
    def isReleased: _root_.scala.Boolean = false
    def isCancelled: _root_.scala.Boolean = false
    def isFailed: _root_.scala.Boolean = false
    def isDependencyFailed: _root_.scala.Boolean = false
    def isDependencyNeverFound: _root_.scala.Boolean = false
    def isDependencyCancelled: _root_.scala.Boolean = false
    def isDependencyReleased: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[State] = io.deephaven.proto.backplane.grpc.session.ExportNotification.State
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.session.ExportNotification.State.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.session.ExportNotification.State.Recognized])
  }
  
  object State extends _root_.scalapb.GeneratedEnumCompanion[State] {
    sealed trait Recognized extends State
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[State] = this
    
    /** This item is a dependency, but hasn't been registered yet.
      */
    @SerialVersionUID(0L)
    case object UNKNOWN extends State(0) with State.Recognized {
      val index = 0
      val name = "UNKNOWN"
      override def isUnknown: _root_.scala.Boolean = true
    }
    
    /** This item has pending dependencies.
      */
    @SerialVersionUID(0L)
    case object PENDING extends State(1) with State.Recognized {
      val index = 1
      val name = "PENDING"
      override def isPending: _root_.scala.Boolean = true
    }
    
    /** This item is a client-supplied dependency with no guarantee on timing to EXPORT state.
      */
    @SerialVersionUID(0L)
    case object PUBLISHING extends State(2) with State.Recognized {
      val index = 2
      val name = "PUBLISHING"
      override def isPublishing: _root_.scala.Boolean = true
    }
    
    /** This item is eligible for resolution and has been submitted to the executor.
      */
    @SerialVersionUID(0L)
    case object QUEUED extends State(3) with State.Recognized {
      val index = 3
      val name = "QUEUED"
      override def isQueued: _root_.scala.Boolean = true
    }
    
    /** This item is now executing.
      */
    @SerialVersionUID(0L)
    case object RUNNING extends State(4) with State.Recognized {
      val index = 4
      val name = "RUNNING"
      override def isRunning: _root_.scala.Boolean = true
    }
    
    /** This item was successfully exported and is currently being retained.
      */
    @SerialVersionUID(0L)
    case object EXPORTED extends State(5) with State.Recognized {
      val index = 5
      val name = "EXPORTED"
      override def isExported: _root_.scala.Boolean = true
    }
    
    /** This item was successfully released.
      */
    @SerialVersionUID(0L)
    case object RELEASED extends State(6) with State.Recognized {
      val index = 6
      val name = "RELEASED"
      override def isReleased: _root_.scala.Boolean = true
    }
    
    /**  CANCELLED: The user cancelled the item before it exported.
      */
    @SerialVersionUID(0L)
    case object CANCELLED extends State(7) with State.Recognized {
      val index = 7
      val name = "CANCELLED"
      override def isCancelled: _root_.scala.Boolean = true
    }
    
    /** This item had a specific error.
      */
    @SerialVersionUID(0L)
    case object FAILED extends State(8) with State.Recognized {
      val index = 8
      val name = "FAILED"
      override def isFailed: _root_.scala.Boolean = true
    }
    
    /** One of this item's dependencies had an internal error before it exported.
      */
    @SerialVersionUID(0L)
    case object DEPENDENCY_FAILED extends State(9) with State.Recognized {
      val index = 9
      val name = "DEPENDENCY_FAILED"
      override def isDependencyFailed: _root_.scala.Boolean = true
    }
    
    /** One of this item's dependencies was already released or never submitted within the out-of-order window.
      */
    @SerialVersionUID(0L)
    case object DEPENDENCY_NEVER_FOUND extends State(10) with State.Recognized {
      val index = 10
      val name = "DEPENDENCY_NEVER_FOUND"
      override def isDependencyNeverFound: _root_.scala.Boolean = true
    }
    
    /** Dependency was cancelled, causing a cascading cancel that applies to this export.
      */
    @SerialVersionUID(0L)
    case object DEPENDENCY_CANCELLED extends State(11) with State.Recognized {
      val index = 11
      val name = "DEPENDENCY_CANCELLED"
      override def isDependencyCancelled: _root_.scala.Boolean = true
    }
    
    /** Dependency was already released, causing a cascading failure that applies to this export.
      */
    @SerialVersionUID(0L)
    case object DEPENDENCY_RELEASED extends State(12) with State.Recognized {
      val index = 12
      val name = "DEPENDENCY_RELEASED"
      override def isDependencyReleased: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends State(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(UNKNOWN, PENDING, PUBLISHING, QUEUED, RUNNING, EXPORTED, RELEASED, CANCELLED, FAILED, DEPENDENCY_FAILED, DEPENDENCY_NEVER_FOUND, DEPENDENCY_CANCELLED, DEPENDENCY_RELEASED)
    def fromValue(__value: _root_.scala.Int): State = __value match {
      case 0 => UNKNOWN
      case 1 => PENDING
      case 2 => PUBLISHING
      case 3 => QUEUED
      case 4 => RUNNING
      case 5 => EXPORTED
      case 6 => RELEASED
      case 7 => CANCELLED
      case 8 => FAILED
      case 9 => DEPENDENCY_FAILED
      case 10 => DEPENDENCY_NEVER_FOUND
      case 11 => DEPENDENCY_CANCELLED
      case 12 => DEPENDENCY_RELEASED
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.session.ExportNotification.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.session.ExportNotification.scalaDescriptor.enums(0)
  }
  implicit class ExportNotificationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.session.ExportNotification]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.session.ExportNotification](_l) {
    def ticket: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getTicket)((c_, f_) => c_.copy(ticket = _root_.scala.Option(f_)))
    def optionalTicket: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.ticket)((c_, f_) => c_.copy(ticket = f_))
    def exportState: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.session.ExportNotification.State] = field(_.exportState)((c_, f_) => c_.copy(exportState = f_))
    def context: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.context)((c_, f_) => c_.copy(context = f_))
    def dependentHandle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.dependentHandle)((c_, f_) => c_.copy(dependentHandle = f_))
  }
  final val TICKET_FIELD_NUMBER = 1
  final val EXPORT_STATE_FIELD_NUMBER = 2
  final val CONTEXT_FIELD_NUMBER = 3
  final val DEPENDENT_HANDLE_FIELD_NUMBER = 4
  def of(
    ticket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    exportState: io.deephaven.proto.backplane.grpc.session.ExportNotification.State,
    context: _root_.scala.Predef.String,
    dependentHandle: _root_.scala.Predef.String
  ): _root_.io.deephaven.proto.backplane.grpc.session.ExportNotification = _root_.io.deephaven.proto.backplane.grpc.session.ExportNotification(
    ticket,
    exportState,
    context,
    dependentHandle
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ExportNotification])
}
