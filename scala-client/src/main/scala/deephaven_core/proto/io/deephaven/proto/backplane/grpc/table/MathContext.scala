// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class MathContext(
    precision: _root_.scala.Int = 0,
    roundingMode: io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.ROUNDING_MODE_NOT_SPECIFIED,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MathContext] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = precision
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(1, __value)
        }
      };
      
      {
        val __value = roundingMode.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = precision
        if (__v != 0) {
          _output__.writeSInt32(1, __v)
        }
      };
      {
        val __v = roundingMode.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withPrecision(__v: _root_.scala.Int): MathContext = copy(precision = __v)
    def withRoundingMode(__v: io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode): MathContext = copy(roundingMode = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = precision
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = roundingMode.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(precision)
        case 2 => _root_.scalapb.descriptors.PEnum(roundingMode.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.MathContext.type = io.deephaven.proto.backplane.grpc.table.MathContext
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.MathContext])
}

object MathContext extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.MathContext] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.MathContext] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.MathContext = {
    var __precision: _root_.scala.Int = 0
    var __roundingMode: io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.ROUNDING_MODE_NOT_SPECIFIED
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __precision = _input__.readSInt32()
        case 16 =>
          __roundingMode = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.MathContext(
        precision = __precision,
        roundingMode = __roundingMode,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.MathContext] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.MathContext(
        precision = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        roundingMode = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.ROUNDING_MODE_NOT_SPECIFIED.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(10)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(10)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.MathContext(
    precision = 0,
    roundingMode = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.ROUNDING_MODE_NOT_SPECIFIED
  )
  sealed abstract class RoundingMode(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode
    type RecognizedType = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.Recognized
    def isRoundingModeNotSpecified: _root_.scala.Boolean = false
    def isUp: _root_.scala.Boolean = false
    def isDown: _root_.scala.Boolean = false
    def isCeiling: _root_.scala.Boolean = false
    def isFloor: _root_.scala.Boolean = false
    def isHalfUp: _root_.scala.Boolean = false
    def isHalfDown: _root_.scala.Boolean = false
    def isHalfEven: _root_.scala.Boolean = false
    def isUnnecessary: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[RoundingMode] = io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode.Recognized])
  }
  
  object RoundingMode extends _root_.scalapb.GeneratedEnumCompanion[RoundingMode] {
    sealed trait Recognized extends RoundingMode
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[RoundingMode] = this
    
    @SerialVersionUID(0L)
    case object ROUNDING_MODE_NOT_SPECIFIED extends RoundingMode(0) with RoundingMode.Recognized {
      val index = 0
      val name = "ROUNDING_MODE_NOT_SPECIFIED"
      override def isRoundingModeNotSpecified: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UP extends RoundingMode(1) with RoundingMode.Recognized {
      val index = 1
      val name = "UP"
      override def isUp: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object DOWN extends RoundingMode(2) with RoundingMode.Recognized {
      val index = 2
      val name = "DOWN"
      override def isDown: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CEILING extends RoundingMode(3) with RoundingMode.Recognized {
      val index = 3
      val name = "CEILING"
      override def isCeiling: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FLOOR extends RoundingMode(4) with RoundingMode.Recognized {
      val index = 4
      val name = "FLOOR"
      override def isFloor: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HALF_UP extends RoundingMode(5) with RoundingMode.Recognized {
      val index = 5
      val name = "HALF_UP"
      override def isHalfUp: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HALF_DOWN extends RoundingMode(6) with RoundingMode.Recognized {
      val index = 6
      val name = "HALF_DOWN"
      override def isHalfDown: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HALF_EVEN extends RoundingMode(7) with RoundingMode.Recognized {
      val index = 7
      val name = "HALF_EVEN"
      override def isHalfEven: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object UNNECESSARY extends RoundingMode(8) with RoundingMode.Recognized {
      val index = 8
      val name = "UNNECESSARY"
      override def isUnnecessary: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends RoundingMode(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(ROUNDING_MODE_NOT_SPECIFIED, UP, DOWN, CEILING, FLOOR, HALF_UP, HALF_DOWN, HALF_EVEN, UNNECESSARY)
    def fromValue(__value: _root_.scala.Int): RoundingMode = __value match {
      case 0 => ROUNDING_MODE_NOT_SPECIFIED
      case 1 => UP
      case 2 => DOWN
      case 3 => CEILING
      case 4 => FLOOR
      case 5 => HALF_UP
      case 6 => HALF_DOWN
      case 7 => HALF_EVEN
      case 8 => UNNECESSARY
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.MathContext.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.MathContext.scalaDescriptor.enums(0)
  }
  implicit class MathContextLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MathContext]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.MathContext](_l) {
    def precision: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.precision)((c_, f_) => c_.copy(precision = f_))
    def roundingMode: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode] = field(_.roundingMode)((c_, f_) => c_.copy(roundingMode = f_))
  }
  final val PRECISION_FIELD_NUMBER = 1
  final val ROUNDING_MODE_FIELD_NUMBER = 2
  def of(
    precision: _root_.scala.Int,
    roundingMode: io.deephaven.proto.backplane.grpc.table.MathContext.RoundingMode
  ): _root_.io.deephaven.proto.backplane.grpc.table.MathContext = _root_.io.deephaven.proto.backplane.grpc.table.MathContext(
    precision,
    roundingMode
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.MathContext])
}
