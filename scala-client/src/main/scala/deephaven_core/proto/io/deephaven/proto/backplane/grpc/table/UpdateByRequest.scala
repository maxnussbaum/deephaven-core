// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

/** Create a table with the same rowset as its parent that will perform the specified set of row
  * based operations to it. As opposed to {&#64;link #update(String...)} these operations are more restricted but are
  * capable of processing state between rows. This operation will group the table by the specified set of keys if
  * provided before applying the operation.
  */
@SerialVersionUID(0L)
final case class UpdateByRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions] = _root_.scala.None,
    operations: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation] = _root_.scala.Seq.empty,
    groupByColumns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sourceId.isDefined) {
        val __value = sourceId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (options.isDefined) {
        val __value = options.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      operations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      groupByColumns.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sourceId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      options.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      operations.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      groupByColumns.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: UpdateByRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): UpdateByRequest = copy(resultId = Option(__v))
    def getSourceId: io.deephaven.proto.backplane.grpc.table.TableReference = sourceId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearSourceId: UpdateByRequest = copy(sourceId = _root_.scala.None)
    def withSourceId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): UpdateByRequest = copy(sourceId = Option(__v))
    def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions.defaultInstance)
    def clearOptions: UpdateByRequest = copy(options = _root_.scala.None)
    def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions): UpdateByRequest = copy(options = Option(__v))
    def clearOperations = copy(operations = _root_.scala.Seq.empty)
    def addOperations(__vs: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation *): UpdateByRequest = addAllOperations(__vs)
    def addAllOperations(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation]): UpdateByRequest = copy(operations = operations ++ __vs)
    def withOperations(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation]): UpdateByRequest = copy(operations = __v)
    def clearGroupByColumns = copy(groupByColumns = _root_.scala.Seq.empty)
    def addGroupByColumns(__vs: _root_.scala.Predef.String *): UpdateByRequest = addAllGroupByColumns(__vs)
    def addAllGroupByColumns(__vs: Iterable[_root_.scala.Predef.String]): UpdateByRequest = copy(groupByColumns = groupByColumns ++ __vs)
    def withGroupByColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): UpdateByRequest = copy(groupByColumns = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => sourceId.orNull
        case 3 => options.orNull
        case 4 => operations
        case 5 => groupByColumns
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sourceId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(operations.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(groupByColumns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest])
}

object UpdateByRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions] = _root_.scala.None
    val __operations: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation]
    val __groupByColumns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sourceId = _root_.scala.Option(__sourceId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __operations += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation](_input__)
        case 42 =>
          __groupByColumns += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.UpdateByRequest(
        resultId = __resultId,
        sourceId = __sourceId,
        options = __options,
        operations = __operations.result(),
        groupByColumns = __groupByColumns.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.UpdateByRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        sourceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions]]),
        operations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation]]).getOrElse(_root_.scala.Seq.empty),
        groupByColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions,
      _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest(
    resultId = _root_.scala.None,
    sourceId = _root_.scala.None,
    options = _root_.scala.None,
    operations = _root_.scala.Seq.empty,
    groupByColumns = _root_.scala.Seq.empty
  )
  /** @param useRedirection
    *   If redirections should be used for output sources instead of sparse array sources.
    *   If unset, defaults to server-provided defaults.
    * @param chunkCapacity
    *   The maximum chunk capacity.
    *   If unset, defaults to server-provided defaults.
    * @param maxStaticSparseMemoryOverhead
    *   The maximum fractional memory overhead allowable for sparse redirections as a fraction (e.g. 1.1 is 10%
    *   overhead). Values less than zero disable overhead checking, and result in always using the sparse structure. A
    *   value of zero results in never using the sparse structure.
    *   If unset, defaults to server-provided defaults.
    * @param initialHashTableSize
    *   The initial hash table size.
    *   If unset, defaults to server-provided defaults.
    * @param maximumLoadFactor
    *   The maximum load factor for the hash table.
    *   If unset, defaults to server-provided defaults.
    * @param targetLoadFactor
    *   The target load factor for the hash table.
    *   If unset, defaults to server-provided defaults.
    * @param mathContext
    *   The math context.
    */
  @SerialVersionUID(0L)
  final case class UpdateByOptions(
      useRedirection: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
      chunkCapacity: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      maxStaticSparseMemoryOverhead: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      initialHashTableSize: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
      maximumLoadFactor: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      targetLoadFactor: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      mathContext: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MathContext] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByOptions] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (useRedirection.isDefined) {
          val __value = useRedirection.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        };
        if (chunkCapacity.isDefined) {
          val __value = chunkCapacity.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        };
        if (maxStaticSparseMemoryOverhead.isDefined) {
          val __value = maxStaticSparseMemoryOverhead.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(3, __value)
        };
        if (initialHashTableSize.isDefined) {
          val __value = initialHashTableSize.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        };
        if (maximumLoadFactor.isDefined) {
          val __value = maximumLoadFactor.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(5, __value)
        };
        if (targetLoadFactor.isDefined) {
          val __value = targetLoadFactor.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(6, __value)
        };
        if (mathContext.isDefined) {
          val __value = mathContext.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        useRedirection.foreach { __v =>
          val __m = __v
          _output__.writeBool(1, __m)
        };
        chunkCapacity.foreach { __v =>
          val __m = __v
          _output__.writeInt32(2, __m)
        };
        maxStaticSparseMemoryOverhead.foreach { __v =>
          val __m = __v
          _output__.writeDouble(3, __m)
        };
        initialHashTableSize.foreach { __v =>
          val __m = __v
          _output__.writeInt32(4, __m)
        };
        maximumLoadFactor.foreach { __v =>
          val __m = __v
          _output__.writeDouble(5, __m)
        };
        targetLoadFactor.foreach { __v =>
          val __m = __v
          _output__.writeDouble(6, __m)
        };
        mathContext.foreach { __v =>
          val __m = __v
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getUseRedirection: _root_.scala.Boolean = useRedirection.getOrElse(false)
      def clearUseRedirection: UpdateByOptions = copy(useRedirection = _root_.scala.None)
      def withUseRedirection(__v: _root_.scala.Boolean): UpdateByOptions = copy(useRedirection = Option(__v))
      def getChunkCapacity: _root_.scala.Int = chunkCapacity.getOrElse(0)
      def clearChunkCapacity: UpdateByOptions = copy(chunkCapacity = _root_.scala.None)
      def withChunkCapacity(__v: _root_.scala.Int): UpdateByOptions = copy(chunkCapacity = Option(__v))
      def getMaxStaticSparseMemoryOverhead: _root_.scala.Double = maxStaticSparseMemoryOverhead.getOrElse(0.0)
      def clearMaxStaticSparseMemoryOverhead: UpdateByOptions = copy(maxStaticSparseMemoryOverhead = _root_.scala.None)
      def withMaxStaticSparseMemoryOverhead(__v: _root_.scala.Double): UpdateByOptions = copy(maxStaticSparseMemoryOverhead = Option(__v))
      def getInitialHashTableSize: _root_.scala.Int = initialHashTableSize.getOrElse(0)
      def clearInitialHashTableSize: UpdateByOptions = copy(initialHashTableSize = _root_.scala.None)
      def withInitialHashTableSize(__v: _root_.scala.Int): UpdateByOptions = copy(initialHashTableSize = Option(__v))
      def getMaximumLoadFactor: _root_.scala.Double = maximumLoadFactor.getOrElse(0.0)
      def clearMaximumLoadFactor: UpdateByOptions = copy(maximumLoadFactor = _root_.scala.None)
      def withMaximumLoadFactor(__v: _root_.scala.Double): UpdateByOptions = copy(maximumLoadFactor = Option(__v))
      def getTargetLoadFactor: _root_.scala.Double = targetLoadFactor.getOrElse(0.0)
      def clearTargetLoadFactor: UpdateByOptions = copy(targetLoadFactor = _root_.scala.None)
      def withTargetLoadFactor(__v: _root_.scala.Double): UpdateByOptions = copy(targetLoadFactor = Option(__v))
      def getMathContext: io.deephaven.proto.backplane.grpc.table.MathContext = mathContext.getOrElse(io.deephaven.proto.backplane.grpc.table.MathContext.defaultInstance)
      def clearMathContext: UpdateByOptions = copy(mathContext = _root_.scala.None)
      def withMathContext(__v: io.deephaven.proto.backplane.grpc.table.MathContext): UpdateByOptions = copy(mathContext = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => useRedirection.orNull
          case 2 => chunkCapacity.orNull
          case 3 => maxStaticSparseMemoryOverhead.orNull
          case 4 => initialHashTableSize.orNull
          case 5 => maximumLoadFactor.orNull
          case 6 => targetLoadFactor.orNull
          case 7 => mathContext.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => useRedirection.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => chunkCapacity.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => maxStaticSparseMemoryOverhead.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => initialHashTableSize.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => maximumLoadFactor.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => targetLoadFactor.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => mathContext.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions])
  }
  
  object UpdateByOptions extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions = {
      var __useRedirection: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
      var __chunkCapacity: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __maxStaticSparseMemoryOverhead: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      var __initialHashTableSize: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      var __maximumLoadFactor: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      var __targetLoadFactor: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      var __mathContext: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MathContext] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __useRedirection = _root_.scala.Option(_input__.readBool())
          case 16 =>
            __chunkCapacity = _root_.scala.Option(_input__.readInt32())
          case 25 =>
            __maxStaticSparseMemoryOverhead = _root_.scala.Option(_input__.readDouble())
          case 32 =>
            __initialHashTableSize = _root_.scala.Option(_input__.readInt32())
          case 41 =>
            __maximumLoadFactor = _root_.scala.Option(_input__.readDouble())
          case 49 =>
            __targetLoadFactor = _root_.scala.Option(_input__.readDouble())
          case 58 =>
            __mathContext = _root_.scala.Option(__mathContext.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.MathContext](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions(
          useRedirection = __useRedirection,
          chunkCapacity = __chunkCapacity,
          maxStaticSparseMemoryOverhead = __maxStaticSparseMemoryOverhead,
          initialHashTableSize = __initialHashTableSize,
          maximumLoadFactor = __maximumLoadFactor,
          targetLoadFactor = __targetLoadFactor,
          mathContext = __mathContext,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions(
          useRedirection = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
          chunkCapacity = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          maxStaticSparseMemoryOverhead = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
          initialHashTableSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
          maximumLoadFactor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
          targetLoadFactor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
          mathContext = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MathContext]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 7 => __out = io.deephaven.proto.backplane.grpc.table.MathContext
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions(
      useRedirection = _root_.scala.None,
      chunkCapacity = _root_.scala.None,
      maxStaticSparseMemoryOverhead = _root_.scala.None,
      initialHashTableSize = _root_.scala.None,
      maximumLoadFactor = _root_.scala.None,
      targetLoadFactor = _root_.scala.None,
      mathContext = _root_.scala.None
    )
    implicit class UpdateByOptionsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions](_l) {
      def useRedirection: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getUseRedirection)((c_, f_) => c_.copy(useRedirection = _root_.scala.Option(f_)))
      def optionalUseRedirection: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.useRedirection)((c_, f_) => c_.copy(useRedirection = f_))
      def chunkCapacity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getChunkCapacity)((c_, f_) => c_.copy(chunkCapacity = _root_.scala.Option(f_)))
      def optionalChunkCapacity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.chunkCapacity)((c_, f_) => c_.copy(chunkCapacity = f_))
      def maxStaticSparseMemoryOverhead: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getMaxStaticSparseMemoryOverhead)((c_, f_) => c_.copy(maxStaticSparseMemoryOverhead = _root_.scala.Option(f_)))
      def optionalMaxStaticSparseMemoryOverhead: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.maxStaticSparseMemoryOverhead)((c_, f_) => c_.copy(maxStaticSparseMemoryOverhead = f_))
      def initialHashTableSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getInitialHashTableSize)((c_, f_) => c_.copy(initialHashTableSize = _root_.scala.Option(f_)))
      def optionalInitialHashTableSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.initialHashTableSize)((c_, f_) => c_.copy(initialHashTableSize = f_))
      def maximumLoadFactor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getMaximumLoadFactor)((c_, f_) => c_.copy(maximumLoadFactor = _root_.scala.Option(f_)))
      def optionalMaximumLoadFactor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.maximumLoadFactor)((c_, f_) => c_.copy(maximumLoadFactor = f_))
      def targetLoadFactor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getTargetLoadFactor)((c_, f_) => c_.copy(targetLoadFactor = _root_.scala.Option(f_)))
      def optionalTargetLoadFactor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.targetLoadFactor)((c_, f_) => c_.copy(targetLoadFactor = f_))
      def mathContext: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MathContext] = field(_.getMathContext)((c_, f_) => c_.copy(mathContext = _root_.scala.Option(f_)))
      def optionalMathContext: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MathContext]] = field(_.mathContext)((c_, f_) => c_.copy(mathContext = f_))
    }
    final val USE_REDIRECTION_FIELD_NUMBER = 1
    final val CHUNK_CAPACITY_FIELD_NUMBER = 2
    final val MAX_STATIC_SPARSE_MEMORY_OVERHEAD_FIELD_NUMBER = 3
    final val INITIAL_HASH_TABLE_SIZE_FIELD_NUMBER = 4
    final val MAXIMUM_LOAD_FACTOR_FIELD_NUMBER = 5
    final val TARGET_LOAD_FACTOR_FIELD_NUMBER = 6
    final val MATH_CONTEXT_FIELD_NUMBER = 7
    def of(
      useRedirection: _root_.scala.Option[_root_.scala.Boolean],
      chunkCapacity: _root_.scala.Option[_root_.scala.Int],
      maxStaticSparseMemoryOverhead: _root_.scala.Option[_root_.scala.Double],
      initialHashTableSize: _root_.scala.Option[_root_.scala.Int],
      maximumLoadFactor: _root_.scala.Option[_root_.scala.Double],
      targetLoadFactor: _root_.scala.Option[_root_.scala.Double],
      mathContext: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MathContext]
    ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions(
      useRedirection,
      chunkCapacity,
      maxStaticSparseMemoryOverhead,
      initialHashTableSize,
      maximumLoadFactor,
      targetLoadFactor,
      mathContext
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOptions])
  }
  
  @SerialVersionUID(0L)
  final case class UpdateByOperation(
      `type`: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByOperation] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (`type`.column.isDefined) {
          val __value = `type`.column.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        `type`.column.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getColumn: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn = `type`.column.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.defaultInstance)
      def withColumn(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn): UpdateByOperation = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Column(__v))
      def clearType: UpdateByOperation = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Empty)
      def withType(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type): UpdateByOperation = copy(`type` = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.column.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.column.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation])
  }
  
  object UpdateByOperation extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation = {
      var __type: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Column(__type.column.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation(
          `type` = __type,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation(
          `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Column(_))
              .getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
        _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation(
      `type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Empty
    )
    sealed trait Type extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isColumn: _root_.scala.Boolean = false
      def column: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn] = _root_.scala.None
    }
    object Type {
      @SerialVersionUID(0L)
      case object Empty extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class Column(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type {
        type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn
        override def isColumn: _root_.scala.Boolean = true
        override def column: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn] = Some(value)
        override def number: _root_.scala.Int = 1
      }
    }
    @SerialVersionUID(0L)
    final case class UpdateByColumn(
        spec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec] = _root_.scala.None,
        matchPairs: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByColumn] {
        @transient
        private var __serializedSizeMemoized: _root_.scala.Int = 0
        private def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          if (spec.isDefined) {
            val __value = spec.get
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          };
          matchPairs.foreach { __item =>
            val __value = __item
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          spec.foreach { __v =>
            val __m = __v
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          matchPairs.foreach { __v =>
            val __m = __v
            _output__.writeString(2, __m)
          };
          unknownFields.writeTo(_output__)
        }
        def getSpec: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec = spec.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.defaultInstance)
        def clearSpec: UpdateByColumn = copy(spec = _root_.scala.None)
        def withSpec(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec): UpdateByColumn = copy(spec = Option(__v))
        def clearMatchPairs = copy(matchPairs = _root_.scala.Seq.empty)
        def addMatchPairs(__vs: _root_.scala.Predef.String *): UpdateByColumn = addAllMatchPairs(__vs)
        def addAllMatchPairs(__vs: Iterable[_root_.scala.Predef.String]): UpdateByColumn = copy(matchPairs = matchPairs ++ __vs)
        def withMatchPairs(__v: _root_.scala.Seq[_root_.scala.Predef.String]): UpdateByColumn = copy(matchPairs = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => spec.orNull
            case 2 => matchPairs
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => spec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 2 => _root_.scalapb.descriptors.PRepeated(matchPairs.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn])
    }
    
    object UpdateByColumn extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn = {
        var __spec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec] = _root_.scala.None
        val __matchPairs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __spec = _root_.scala.Option(__spec.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            case 18 =>
              __matchPairs += _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn(
            spec = __spec,
            matchPairs = __matchPairs.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn(
            spec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec]]),
            matchPairs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
        (__number: @_root_.scala.unchecked) match {
          case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
        Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
          _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec
        )
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn(
        spec = _root_.scala.None,
        matchPairs = _root_.scala.Seq.empty
      )
      @SerialVersionUID(0L)
      final case class UpdateBySpec(
          `type`: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Empty,
          unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
          ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateBySpec] {
          @transient
          private var __serializedSizeMemoized: _root_.scala.Int = 0
          private def __computeSerializedSize(): _root_.scala.Int = {
            var __size = 0
            if (`type`.sum.isDefined) {
              val __value = `type`.sum.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.min.isDefined) {
              val __value = `type`.min.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.max.isDefined) {
              val __value = `type`.max.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.product.isDefined) {
              val __value = `type`.product.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.fill.isDefined) {
              val __value = `type`.fill.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.ema.isDefined) {
              val __value = `type`.ema.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingSum.isDefined) {
              val __value = `type`.rollingSum.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingGroup.isDefined) {
              val __value = `type`.rollingGroup.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingAvg.isDefined) {
              val __value = `type`.rollingAvg.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingMin.isDefined) {
              val __value = `type`.rollingMin.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingMax.isDefined) {
              val __value = `type`.rollingMax.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingProduct.isDefined) {
              val __value = `type`.rollingProduct.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.delta.isDefined) {
              val __value = `type`.delta.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.ems.isDefined) {
              val __value = `type`.ems.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.emMin.isDefined) {
              val __value = `type`.emMin.get
              __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.emMax.isDefined) {
              val __value = `type`.emMax.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.emStd.isDefined) {
              val __value = `type`.emStd.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingCount.isDefined) {
              val __value = `type`.rollingCount.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingStd.isDefined) {
              val __value = `type`.rollingStd.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingWavg.isDefined) {
              val __value = `type`.rollingWavg.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingFormula.isDefined) {
              val __value = `type`.rollingFormula.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.rollingCountWhere.isDefined) {
              val __value = `type`.rollingCountWhere.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            if (`type`.countWhere.isDefined) {
              val __value = `type`.countWhere.get
              __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
            };
            __size += unknownFields.serializedSize
            __size
          }
          override def serializedSize: _root_.scala.Int = {
            var __size = __serializedSizeMemoized
            if (__size == 0) {
              __size = __computeSerializedSize() + 1
              __serializedSizeMemoized = __size
            }
            __size - 1
            
          }
          def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
            `type`.sum.foreach { __v =>
              val __m = __v
              _output__.writeTag(1, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.min.foreach { __v =>
              val __m = __v
              _output__.writeTag(2, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.max.foreach { __v =>
              val __m = __v
              _output__.writeTag(3, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.product.foreach { __v =>
              val __m = __v
              _output__.writeTag(4, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.fill.foreach { __v =>
              val __m = __v
              _output__.writeTag(5, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.ema.foreach { __v =>
              val __m = __v
              _output__.writeTag(6, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingSum.foreach { __v =>
              val __m = __v
              _output__.writeTag(7, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingGroup.foreach { __v =>
              val __m = __v
              _output__.writeTag(8, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingAvg.foreach { __v =>
              val __m = __v
              _output__.writeTag(9, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingMin.foreach { __v =>
              val __m = __v
              _output__.writeTag(10, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingMax.foreach { __v =>
              val __m = __v
              _output__.writeTag(11, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingProduct.foreach { __v =>
              val __m = __v
              _output__.writeTag(12, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.delta.foreach { __v =>
              val __m = __v
              _output__.writeTag(13, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.ems.foreach { __v =>
              val __m = __v
              _output__.writeTag(14, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.emMin.foreach { __v =>
              val __m = __v
              _output__.writeTag(15, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.emMax.foreach { __v =>
              val __m = __v
              _output__.writeTag(16, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.emStd.foreach { __v =>
              val __m = __v
              _output__.writeTag(17, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingCount.foreach { __v =>
              val __m = __v
              _output__.writeTag(18, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingStd.foreach { __v =>
              val __m = __v
              _output__.writeTag(19, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingWavg.foreach { __v =>
              val __m = __v
              _output__.writeTag(20, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingFormula.foreach { __v =>
              val __m = __v
              _output__.writeTag(21, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.rollingCountWhere.foreach { __v =>
              val __m = __v
              _output__.writeTag(22, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            `type`.countWhere.foreach { __v =>
              val __m = __v
              _output__.writeTag(23, 2)
              _output__.writeUInt32NoTag(__m.serializedSize)
              __m.writeTo(_output__)
            };
            unknownFields.writeTo(_output__)
          }
          def getSum: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum = `type`.sum.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum.defaultInstance)
          def withSum(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Sum(__v))
          def getMin: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin = `type`.min.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin.defaultInstance)
          def withMin(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Min(__v))
          def getMax: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax = `type`.max.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax.defaultInstance)
          def withMax(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Max(__v))
          def getProduct: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct = `type`.product.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct.defaultInstance)
          def withProduct(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Product(__v))
          def getFill: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill = `type`.fill.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill.defaultInstance)
          def withFill(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Fill(__v))
          def getEma: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma = `type`.ema.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma.defaultInstance)
          def withEma(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ema(__v))
          def getRollingSum: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum = `type`.rollingSum.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum.defaultInstance)
          def withRollingSum(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingSum(__v))
          def getRollingGroup: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup = `type`.rollingGroup.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup.defaultInstance)
          def withRollingGroup(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingGroup(__v))
          def getRollingAvg: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg = `type`.rollingAvg.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg.defaultInstance)
          def withRollingAvg(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingAvg(__v))
          def getRollingMin: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin = `type`.rollingMin.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin.defaultInstance)
          def withRollingMin(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMin(__v))
          def getRollingMax: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax = `type`.rollingMax.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax.defaultInstance)
          def withRollingMax(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMax(__v))
          def getRollingProduct: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct = `type`.rollingProduct.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct.defaultInstance)
          def withRollingProduct(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingProduct(__v))
          def getDelta: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta = `type`.delta.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta.defaultInstance)
          def withDelta(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Delta(__v))
          def getEms: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms = `type`.ems.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms.defaultInstance)
          def withEms(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ems(__v))
          def getEmMin: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin = `type`.emMin.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin.defaultInstance)
          def withEmMin(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMin(__v))
          def getEmMax: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax = `type`.emMax.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax.defaultInstance)
          def withEmMax(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMax(__v))
          def getEmStd: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd = `type`.emStd.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd.defaultInstance)
          def withEmStd(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmStd(__v))
          def getRollingCount: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount = `type`.rollingCount.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount.defaultInstance)
          def withRollingCount(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCount(__v))
          def getRollingStd: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd = `type`.rollingStd.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd.defaultInstance)
          def withRollingStd(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingStd(__v))
          def getRollingWavg: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg = `type`.rollingWavg.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg.defaultInstance)
          def withRollingWavg(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingWavg(__v))
          def getRollingFormula: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula = `type`.rollingFormula.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.defaultInstance)
          def withRollingFormula(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingFormula(__v))
          def getRollingCountWhere: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere = `type`.rollingCountWhere.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere.defaultInstance)
          def withRollingCountWhere(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCountWhere(__v))
          def getCountWhere: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere = `type`.countWhere.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere.defaultInstance)
          def withCountWhere(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere): UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.CountWhere(__v))
          def clearType: UpdateBySpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Empty)
          def withType(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type): UpdateBySpec = copy(`type` = __v)
          def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
          def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
          def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
            (__fieldNumber: @_root_.scala.unchecked) match {
              case 1 => `type`.sum.orNull
              case 2 => `type`.min.orNull
              case 3 => `type`.max.orNull
              case 4 => `type`.product.orNull
              case 5 => `type`.fill.orNull
              case 6 => `type`.ema.orNull
              case 7 => `type`.rollingSum.orNull
              case 8 => `type`.rollingGroup.orNull
              case 9 => `type`.rollingAvg.orNull
              case 10 => `type`.rollingMin.orNull
              case 11 => `type`.rollingMax.orNull
              case 12 => `type`.rollingProduct.orNull
              case 13 => `type`.delta.orNull
              case 14 => `type`.ems.orNull
              case 15 => `type`.emMin.orNull
              case 16 => `type`.emMax.orNull
              case 17 => `type`.emStd.orNull
              case 18 => `type`.rollingCount.orNull
              case 19 => `type`.rollingStd.orNull
              case 20 => `type`.rollingWavg.orNull
              case 21 => `type`.rollingFormula.orNull
              case 22 => `type`.rollingCountWhere.orNull
              case 23 => `type`.countWhere.orNull
            }
          }
          def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
            _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
            (__field.number: @_root_.scala.unchecked) match {
              case 1 => `type`.sum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 2 => `type`.min.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 3 => `type`.max.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 4 => `type`.product.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 5 => `type`.fill.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 6 => `type`.ema.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 7 => `type`.rollingSum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 8 => `type`.rollingGroup.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 9 => `type`.rollingAvg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 10 => `type`.rollingMin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 11 => `type`.rollingMax.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 12 => `type`.rollingProduct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 13 => `type`.delta.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 14 => `type`.ems.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 15 => `type`.emMin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 16 => `type`.emMax.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 17 => `type`.emStd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 18 => `type`.rollingCount.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 19 => `type`.rollingStd.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 20 => `type`.rollingWavg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 21 => `type`.rollingFormula.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 22 => `type`.rollingCountWhere.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              case 23 => `type`.countWhere.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            }
          }
          def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
          def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec
          // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec])
      }
      
      object UpdateBySpec extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec] {
        implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec] = this
        def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec = {
          var __type: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Empty
          var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
          var _done__ = false
          while (!_done__) {
            val _tag__ = _input__.readTag()
            _tag__ match {
              case 0 => _done__ = true
              case 10 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Sum(__type.sum.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 18 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Min(__type.min.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 26 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Max(__type.max.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 34 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Product(__type.product.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 42 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Fill(__type.fill.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 50 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ema(__type.ema.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 58 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingSum(__type.rollingSum.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 66 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingGroup(__type.rollingGroup.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 74 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingAvg(__type.rollingAvg.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 82 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMin(__type.rollingMin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 90 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMax(__type.rollingMax.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 98 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingProduct(__type.rollingProduct.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 106 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Delta(__type.delta.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 114 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ems(__type.ems.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 122 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMin(__type.emMin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 130 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMax(__type.emMax.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 138 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmStd(__type.emStd.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 146 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCount(__type.rollingCount.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 154 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingStd(__type.rollingStd.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 162 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingWavg(__type.rollingWavg.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 170 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingFormula(__type.rollingFormula.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 178 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCountWhere(__type.rollingCountWhere.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case 186 =>
                __type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.CountWhere(__type.countWhere.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
              case tag =>
                if (_unknownFields__ == null) {
                  _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                }
                _unknownFields__.parseField(tag, _input__)
            }
          }
          io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec(
              `type` = __type,
              unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
          )
        }
        implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec] = _root_.scalapb.descriptors.Reads{
          case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
            _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec(
              `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Sum(_))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Min(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Max(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Product(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Fill(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ema(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingSum(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingGroup(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingAvg(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMin(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMax(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingProduct(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Delta(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ems(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMin(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMax(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmStd(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCount(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingStd(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingWavg(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingFormula(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCountWhere(_)))
                  .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.CountWhere(_)))
                  .getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Empty)
            )
          case _ => throw new RuntimeException("Expected PMessage")
        }
        def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.javaDescriptor.getNestedTypes().get(0)
        def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.scalaDescriptor.nestedMessages(0)
        def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
          var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
          (__number: @_root_.scala.unchecked) match {
            case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum
            case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin
            case 3 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax
            case 4 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct
            case 5 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill
            case 6 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma
            case 7 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum
            case 8 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup
            case 9 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg
            case 10 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin
            case 11 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax
            case 12 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct
            case 13 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta
            case 14 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms
            case 15 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin
            case 16 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax
            case 17 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd
            case 18 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount
            case 19 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd
            case 20 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg
            case 21 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula
            case 22 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere
            case 23 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere
          }
          __out
        }
        lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
          Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere,
            _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere
          )
        def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
        lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec(
          `type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Empty
        )
        sealed trait Type extends _root_.scalapb.GeneratedOneof {
          def isEmpty: _root_.scala.Boolean = false
          def isDefined: _root_.scala.Boolean = true
          def isSum: _root_.scala.Boolean = false
          def isMin: _root_.scala.Boolean = false
          def isMax: _root_.scala.Boolean = false
          def isProduct: _root_.scala.Boolean = false
          def isFill: _root_.scala.Boolean = false
          def isEma: _root_.scala.Boolean = false
          def isRollingSum: _root_.scala.Boolean = false
          def isRollingGroup: _root_.scala.Boolean = false
          def isRollingAvg: _root_.scala.Boolean = false
          def isRollingMin: _root_.scala.Boolean = false
          def isRollingMax: _root_.scala.Boolean = false
          def isRollingProduct: _root_.scala.Boolean = false
          def isDelta: _root_.scala.Boolean = false
          def isEms: _root_.scala.Boolean = false
          def isEmMin: _root_.scala.Boolean = false
          def isEmMax: _root_.scala.Boolean = false
          def isEmStd: _root_.scala.Boolean = false
          def isRollingCount: _root_.scala.Boolean = false
          def isRollingStd: _root_.scala.Boolean = false
          def isRollingWavg: _root_.scala.Boolean = false
          def isRollingFormula: _root_.scala.Boolean = false
          def isRollingCountWhere: _root_.scala.Boolean = false
          def isCountWhere: _root_.scala.Boolean = false
          def sum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum] = _root_.scala.None
          def min: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin] = _root_.scala.None
          def max: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax] = _root_.scala.None
          def product: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct] = _root_.scala.None
          def fill: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill] = _root_.scala.None
          def ema: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma] = _root_.scala.None
          def rollingSum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum] = _root_.scala.None
          def rollingGroup: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup] = _root_.scala.None
          def rollingAvg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg] = _root_.scala.None
          def rollingMin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin] = _root_.scala.None
          def rollingMax: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax] = _root_.scala.None
          def rollingProduct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct] = _root_.scala.None
          def delta: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta] = _root_.scala.None
          def ems: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms] = _root_.scala.None
          def emMin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin] = _root_.scala.None
          def emMax: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax] = _root_.scala.None
          def emStd: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd] = _root_.scala.None
          def rollingCount: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount] = _root_.scala.None
          def rollingStd: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd] = _root_.scala.None
          def rollingWavg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg] = _root_.scala.None
          def rollingFormula: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula] = _root_.scala.None
          def rollingCountWhere: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere] = _root_.scala.None
          def countWhere: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere] = _root_.scala.None
        }
        object Type {
          @SerialVersionUID(0L)
          case object Empty extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = _root_.scala.Nothing
            override def isEmpty: _root_.scala.Boolean = true
            override def isDefined: _root_.scala.Boolean = false
            override def number: _root_.scala.Int = 0
            override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
          }
        
          @SerialVersionUID(0L)
          final case class Sum(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum
            override def isSum: _root_.scala.Boolean = true
            override def sum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum] = Some(value)
            override def number: _root_.scala.Int = 1
          }
          @SerialVersionUID(0L)
          final case class Min(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin
            override def isMin: _root_.scala.Boolean = true
            override def min: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin] = Some(value)
            override def number: _root_.scala.Int = 2
          }
          @SerialVersionUID(0L)
          final case class Max(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax
            override def isMax: _root_.scala.Boolean = true
            override def max: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax] = Some(value)
            override def number: _root_.scala.Int = 3
          }
          @SerialVersionUID(0L)
          final case class Product(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct
            override def isProduct: _root_.scala.Boolean = true
            override def product: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct] = Some(value)
            override def number: _root_.scala.Int = 4
          }
          @SerialVersionUID(0L)
          final case class Fill(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill
            override def isFill: _root_.scala.Boolean = true
            override def fill: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill] = Some(value)
            override def number: _root_.scala.Int = 5
          }
          @SerialVersionUID(0L)
          final case class Ema(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma
            override def isEma: _root_.scala.Boolean = true
            override def ema: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma] = Some(value)
            override def number: _root_.scala.Int = 6
          }
          @SerialVersionUID(0L)
          final case class RollingSum(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum
            override def isRollingSum: _root_.scala.Boolean = true
            override def rollingSum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum] = Some(value)
            override def number: _root_.scala.Int = 7
          }
          @SerialVersionUID(0L)
          final case class RollingGroup(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup
            override def isRollingGroup: _root_.scala.Boolean = true
            override def rollingGroup: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup] = Some(value)
            override def number: _root_.scala.Int = 8
          }
          @SerialVersionUID(0L)
          final case class RollingAvg(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg
            override def isRollingAvg: _root_.scala.Boolean = true
            override def rollingAvg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg] = Some(value)
            override def number: _root_.scala.Int = 9
          }
          @SerialVersionUID(0L)
          final case class RollingMin(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin
            override def isRollingMin: _root_.scala.Boolean = true
            override def rollingMin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin] = Some(value)
            override def number: _root_.scala.Int = 10
          }
          @SerialVersionUID(0L)
          final case class RollingMax(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax
            override def isRollingMax: _root_.scala.Boolean = true
            override def rollingMax: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax] = Some(value)
            override def number: _root_.scala.Int = 11
          }
          @SerialVersionUID(0L)
          final case class RollingProduct(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct
            override def isRollingProduct: _root_.scala.Boolean = true
            override def rollingProduct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct] = Some(value)
            override def number: _root_.scala.Int = 12
          }
          @SerialVersionUID(0L)
          final case class Delta(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta
            override def isDelta: _root_.scala.Boolean = true
            override def delta: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta] = Some(value)
            override def number: _root_.scala.Int = 13
          }
          @SerialVersionUID(0L)
          final case class Ems(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms
            override def isEms: _root_.scala.Boolean = true
            override def ems: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms] = Some(value)
            override def number: _root_.scala.Int = 14
          }
          @SerialVersionUID(0L)
          final case class EmMin(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin
            override def isEmMin: _root_.scala.Boolean = true
            override def emMin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin] = Some(value)
            override def number: _root_.scala.Int = 15
          }
          @SerialVersionUID(0L)
          final case class EmMax(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax
            override def isEmMax: _root_.scala.Boolean = true
            override def emMax: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax] = Some(value)
            override def number: _root_.scala.Int = 16
          }
          @SerialVersionUID(0L)
          final case class EmStd(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd
            override def isEmStd: _root_.scala.Boolean = true
            override def emStd: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd] = Some(value)
            override def number: _root_.scala.Int = 17
          }
          @SerialVersionUID(0L)
          final case class RollingCount(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount
            override def isRollingCount: _root_.scala.Boolean = true
            override def rollingCount: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount] = Some(value)
            override def number: _root_.scala.Int = 18
          }
          @SerialVersionUID(0L)
          final case class RollingStd(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd
            override def isRollingStd: _root_.scala.Boolean = true
            override def rollingStd: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd] = Some(value)
            override def number: _root_.scala.Int = 19
          }
          @SerialVersionUID(0L)
          final case class RollingWavg(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg
            override def isRollingWavg: _root_.scala.Boolean = true
            override def rollingWavg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg] = Some(value)
            override def number: _root_.scala.Int = 20
          }
          @SerialVersionUID(0L)
          final case class RollingFormula(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula
            override def isRollingFormula: _root_.scala.Boolean = true
            override def rollingFormula: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula] = Some(value)
            override def number: _root_.scala.Int = 21
          }
          @SerialVersionUID(0L)
          final case class RollingCountWhere(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere
            override def isRollingCountWhere: _root_.scala.Boolean = true
            override def rollingCountWhere: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere] = Some(value)
            override def number: _root_.scala.Int = 22
          }
          @SerialVersionUID(0L)
          final case class CountWhere(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere) extends io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type {
            type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere
            override def isCountWhere: _root_.scala.Boolean = true
            override def countWhere: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere] = Some(value)
            override def number: _root_.scala.Int = 23
          }
        }
        @SerialVersionUID(0L)
        final case class UpdateByCumulativeSum(
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByCumulativeSum] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              unknownFields.writeTo(_output__)
            }
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum])
        }
        
        object UpdateByCumulativeSum extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum = {
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum(
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum(
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(0)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(0)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum(
          )
          implicit class UpdateByCumulativeSumLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum](_l) {
          }
          def of(
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum(
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByCumulativeMin(
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByCumulativeMin] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              unknownFields.writeTo(_output__)
            }
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin])
        }
        
        object UpdateByCumulativeMin extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin = {
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin(
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin(
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(1)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(1)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin(
          )
          implicit class UpdateByCumulativeMinLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin](_l) {
          }
          def of(
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin(
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByCumulativeMax(
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByCumulativeMax] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              unknownFields.writeTo(_output__)
            }
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax])
        }
        
        object UpdateByCumulativeMax extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax = {
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax(
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax(
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(2)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(2)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax(
          )
          implicit class UpdateByCumulativeMaxLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax](_l) {
          }
          def of(
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax(
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByCumulativeProduct(
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByCumulativeProduct] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              unknownFields.writeTo(_output__)
            }
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct])
        }
        
        object UpdateByCumulativeProduct extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct = {
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct(
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct(
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(3)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(3)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct(
          )
          implicit class UpdateByCumulativeProductLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct](_l) {
          }
          def of(
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct(
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByFill(
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByFill] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              unknownFields.writeTo(_output__)
            }
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill])
        }
        
        object UpdateByFill extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill = {
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill(
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill(
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(4)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(4)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill(
          )
          implicit class UpdateByFillLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill](_l) {
          }
          def of(
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill(
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByEma(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None,
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByEma] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (options.isDefined) {
                val __value = options.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (windowScale.isDefined) {
                val __value = windowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              options.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              windowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions.defaultInstance)
            def clearOptions: UpdateByEma = copy(options = _root_.scala.None)
            def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions): UpdateByEma = copy(options = Option(__v))
            def getWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = windowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearWindowScale: UpdateByEma = copy(windowScale = _root_.scala.None)
            def withWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByEma = copy(windowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => options.orNull
                case 2 => windowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => windowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma])
        }
        
        object UpdateByEma extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma = {
            var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None
            var __windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __windowScale = _root_.scala.Option(__windowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma(
                options = __options,
                windowScale = __windowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma(
                options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]]),
                windowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(5)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(5)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma(
            options = _root_.scala.None,
            windowScale = _root_.scala.None
          )
          implicit class UpdateByEmaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma](_l) {
            def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
            def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
            def windowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getWindowScale)((c_, f_) => c_.copy(windowScale = _root_.scala.Option(f_)))
            def optionalWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.windowScale)((c_, f_) => c_.copy(windowScale = f_))
          }
          final val OPTIONS_FIELD_NUMBER = 1
          final val WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions],
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma(
            options,
            windowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByEms(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None,
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByEms] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (options.isDefined) {
                val __value = options.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (windowScale.isDefined) {
                val __value = windowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              options.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              windowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions.defaultInstance)
            def clearOptions: UpdateByEms = copy(options = _root_.scala.None)
            def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions): UpdateByEms = copy(options = Option(__v))
            def getWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = windowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearWindowScale: UpdateByEms = copy(windowScale = _root_.scala.None)
            def withWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByEms = copy(windowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => options.orNull
                case 2 => windowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => windowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms])
        }
        
        object UpdateByEms extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms = {
            var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None
            var __windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __windowScale = _root_.scala.Option(__windowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms(
                options = __options,
                windowScale = __windowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms(
                options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]]),
                windowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(6)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(6)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms(
            options = _root_.scala.None,
            windowScale = _root_.scala.None
          )
          implicit class UpdateByEmsLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms](_l) {
            def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
            def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
            def windowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getWindowScale)((c_, f_) => c_.copy(windowScale = _root_.scala.Option(f_)))
            def optionalWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.windowScale)((c_, f_) => c_.copy(windowScale = f_))
          }
          final val OPTIONS_FIELD_NUMBER = 1
          final val WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions],
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms(
            options,
            windowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByEmMin(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None,
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByEmMin] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (options.isDefined) {
                val __value = options.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (windowScale.isDefined) {
                val __value = windowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              options.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              windowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions.defaultInstance)
            def clearOptions: UpdateByEmMin = copy(options = _root_.scala.None)
            def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions): UpdateByEmMin = copy(options = Option(__v))
            def getWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = windowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearWindowScale: UpdateByEmMin = copy(windowScale = _root_.scala.None)
            def withWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByEmMin = copy(windowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => options.orNull
                case 2 => windowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => windowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin])
        }
        
        object UpdateByEmMin extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin = {
            var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None
            var __windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __windowScale = _root_.scala.Option(__windowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin(
                options = __options,
                windowScale = __windowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin(
                options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]]),
                windowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(7)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(7)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin(
            options = _root_.scala.None,
            windowScale = _root_.scala.None
          )
          implicit class UpdateByEmMinLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin](_l) {
            def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
            def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
            def windowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getWindowScale)((c_, f_) => c_.copy(windowScale = _root_.scala.Option(f_)))
            def optionalWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.windowScale)((c_, f_) => c_.copy(windowScale = f_))
          }
          final val OPTIONS_FIELD_NUMBER = 1
          final val WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions],
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin(
            options,
            windowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByEmMax(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None,
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByEmMax] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (options.isDefined) {
                val __value = options.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (windowScale.isDefined) {
                val __value = windowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              options.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              windowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions.defaultInstance)
            def clearOptions: UpdateByEmMax = copy(options = _root_.scala.None)
            def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions): UpdateByEmMax = copy(options = Option(__v))
            def getWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = windowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearWindowScale: UpdateByEmMax = copy(windowScale = _root_.scala.None)
            def withWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByEmMax = copy(windowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => options.orNull
                case 2 => windowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => windowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax])
        }
        
        object UpdateByEmMax extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax = {
            var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None
            var __windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __windowScale = _root_.scala.Option(__windowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax(
                options = __options,
                windowScale = __windowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax(
                options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]]),
                windowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(8)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(8)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax(
            options = _root_.scala.None,
            windowScale = _root_.scala.None
          )
          implicit class UpdateByEmMaxLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax](_l) {
            def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
            def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
            def windowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getWindowScale)((c_, f_) => c_.copy(windowScale = _root_.scala.Option(f_)))
            def optionalWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.windowScale)((c_, f_) => c_.copy(windowScale = f_))
          }
          final val OPTIONS_FIELD_NUMBER = 1
          final val WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions],
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax(
            options,
            windowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByEmStd(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None,
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByEmStd] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (options.isDefined) {
                val __value = options.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (windowScale.isDefined) {
                val __value = windowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              options.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              windowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions.defaultInstance)
            def clearOptions: UpdateByEmStd = copy(options = _root_.scala.None)
            def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions): UpdateByEmStd = copy(options = Option(__v))
            def getWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = windowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearWindowScale: UpdateByEmStd = copy(windowScale = _root_.scala.None)
            def withWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByEmStd = copy(windowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => options.orNull
                case 2 => windowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => windowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd])
        }
        
        object UpdateByEmStd extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd = {
            var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = _root_.scala.None
            var __windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __windowScale = _root_.scala.Option(__windowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd(
                options = __options,
                windowScale = __windowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd(
                options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]]),
                windowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(9)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(9)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd(
            options = _root_.scala.None,
            windowScale = _root_.scala.None
          )
          implicit class UpdateByEmStdLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd](_l) {
            def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
            def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
            def windowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getWindowScale)((c_, f_) => c_.copy(windowScale = _root_.scala.Option(f_)))
            def optionalWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.windowScale)((c_, f_) => c_.copy(windowScale = f_))
          }
          final val OPTIONS_FIELD_NUMBER = 1
          final val WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByEmOptions],
            windowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd(
            options,
            windowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByDelta(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByDelta] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (options.isDefined) {
                val __value = options.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              options.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getOptions: io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions = options.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions.defaultInstance)
            def clearOptions: UpdateByDelta = copy(options = _root_.scala.None)
            def withOptions(__v: io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions): UpdateByDelta = copy(options = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => options.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => options.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta])
        }
        
        object UpdateByDelta extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta = {
            var __options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __options = _root_.scala.Option(__options.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta(
                options = __options,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta(
                options = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(10)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(10)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta(
            options = _root_.scala.None
          )
          implicit class UpdateByDeltaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta](_l) {
            def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
            def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
          }
          final val OPTIONS_FIELD_NUMBER = 1
          def of(
            options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByDeltaOptions]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta(
            options
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingSum(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingSum] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingSum = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingSum = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingSum = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingSum = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum])
        }
        
        object UpdateByRollingSum extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(11)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(11)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingSumLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingGroup(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingGroup] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingGroup = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingGroup = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingGroup = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingGroup = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup])
        }
        
        object UpdateByRollingGroup extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(12)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(12)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingGroupLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingAvg(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingAvg] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingAvg = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingAvg = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingAvg = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingAvg = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg])
        }
        
        object UpdateByRollingAvg extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(13)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(13)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingAvgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingMin(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingMin] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingMin = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingMin = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingMin = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingMin = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin])
        }
        
        object UpdateByRollingMin extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(14)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(14)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingMinLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingMax(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingMax] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingMax = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingMax = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingMax = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingMax = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax])
        }
        
        object UpdateByRollingMax extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(15)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(15)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingMaxLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingProduct(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingProduct] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingProduct = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingProduct = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingProduct = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingProduct = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct])
        }
        
        object UpdateByRollingProduct extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(16)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(16)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingProductLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingCount(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingCount] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingCount = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingCount = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingCount = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingCount = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount])
        }
        
        object UpdateByRollingCount extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(17)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(17)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingCountLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingStd(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingStd] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingStd = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingStd = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingStd = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingStd = copy(forwardWindowScale = Option(__v))
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd])
        }
        
        object UpdateByRollingStd extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]])
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(18)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(18)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None
          )
          implicit class UpdateByRollingStdLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd(
            reverseWindowScale,
            forwardWindowScale
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd])
        }
        
        /** @param weightColumn
          *   Column name for the source of input weights.
          */
        @SerialVersionUID(0L)
        final case class UpdateByRollingWAvg(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            weightColumn: _root_.scala.Predef.String = "",
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingWAvg] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              
              {
                val __value = weightColumn
                if (!__value.isEmpty) {
                  __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
                }
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              {
                val __v = weightColumn
                if (!__v.isEmpty) {
                  _output__.writeString(3, __v)
                }
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingWAvg = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingWAvg = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingWAvg = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingWAvg = copy(forwardWindowScale = Option(__v))
            def withWeightColumn(__v: _root_.scala.Predef.String): UpdateByRollingWAvg = copy(weightColumn = __v)
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
                case 3 => {
                  val __t = weightColumn
                  if (__t != "") __t else null
                }
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 3 => _root_.scalapb.descriptors.PString(weightColumn)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg])
        }
        
        object UpdateByRollingWAvg extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __weightColumn: _root_.scala.Predef.String = ""
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 26 =>
                  __weightColumn = _input__.readStringRequireUtf8()
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                weightColumn = __weightColumn,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                weightColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(19)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(19)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None,
            weightColumn = ""
          )
          implicit class UpdateByRollingWAvgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
            def weightColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.weightColumn)((c_, f_) => c_.copy(weightColumn = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          final val WEIGHT_COLUMN_FIELD_NUMBER = 3
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            weightColumn: _root_.scala.Predef.String
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg(
            reverseWindowScale,
            forwardWindowScale,
            weightColumn
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg])
        }
        
        @SerialVersionUID(0L)
        final case class UpdateByRollingFormula(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            formula: _root_.scala.Predef.String = "",
            paramToken: _root_.scala.Predef.String = "",
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingFormula] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              
              {
                val __value = formula
                if (!__value.isEmpty) {
                  __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
                }
              };
              
              {
                val __value = paramToken
                if (!__value.isEmpty) {
                  __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
                }
              };
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              {
                val __v = formula
                if (!__v.isEmpty) {
                  _output__.writeString(3, __v)
                }
              };
              {
                val __v = paramToken
                if (!__v.isEmpty) {
                  _output__.writeString(4, __v)
                }
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingFormula = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingFormula = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingFormula = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingFormula = copy(forwardWindowScale = Option(__v))
            def withFormula(__v: _root_.scala.Predef.String): UpdateByRollingFormula = copy(formula = __v)
            def withParamToken(__v: _root_.scala.Predef.String): UpdateByRollingFormula = copy(paramToken = __v)
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
                case 3 => {
                  val __t = formula
                  if (__t != "") __t else null
                }
                case 4 => {
                  val __t = paramToken
                  if (__t != "") __t else null
                }
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 3 => _root_.scalapb.descriptors.PString(formula)
                case 4 => _root_.scalapb.descriptors.PString(paramToken)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula])
        }
        
        object UpdateByRollingFormula extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __formula: _root_.scala.Predef.String = ""
            var __paramToken: _root_.scala.Predef.String = ""
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 26 =>
                  __formula = _input__.readStringRequireUtf8()
                case 34 =>
                  __paramToken = _input__.readStringRequireUtf8()
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                formula = __formula,
                paramToken = __paramToken,
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                formula = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
                paramToken = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(20)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(20)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None,
            formula = "",
            paramToken = ""
          )
          implicit class UpdateByRollingFormulaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
            def formula: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.formula)((c_, f_) => c_.copy(formula = f_))
            def paramToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.paramToken)((c_, f_) => c_.copy(paramToken = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          final val FORMULA_FIELD_NUMBER = 3
          final val PARAM_TOKEN_FIELD_NUMBER = 4
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            formula: _root_.scala.Predef.String,
            paramToken: _root_.scala.Predef.String
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula(
            reverseWindowScale,
            forwardWindowScale,
            formula,
            paramToken
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula])
        }
        
        /** @param reverseWindowScale
          *   The reverse window for the rolling operation, may be in ticks or time-based.
          * @param forwardWindowScale
          *   The forward window for the rolling operation, may be in ticks or time-based.
          * @param resultColumn
          *   The output column name
          * @param filters
          *   The filters tp apply before counting
          */
        @SerialVersionUID(0L)
        final case class UpdateByRollingCountWhere(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None,
            resultColumn: _root_.scala.Predef.String = "",
            filters: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByRollingCountWhere] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              if (reverseWindowScale.isDefined) {
                val __value = reverseWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              if (forwardWindowScale.isDefined) {
                val __value = forwardWindowScale.get
                __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
              };
              
              {
                val __value = resultColumn
                if (!__value.isEmpty) {
                  __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
                }
              };
              filters.foreach { __item =>
                val __value = __item
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
              }
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              reverseWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(1, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              forwardWindowScale.foreach { __v =>
                val __m = __v
                _output__.writeTag(2, 2)
                _output__.writeUInt32NoTag(__m.serializedSize)
                __m.writeTo(_output__)
              };
              {
                val __v = resultColumn
                if (!__v.isEmpty) {
                  _output__.writeString(3, __v)
                }
              };
              filters.foreach { __v =>
                val __m = __v
                _output__.writeString(4, __m)
              };
              unknownFields.writeTo(_output__)
            }
            def getReverseWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = reverseWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearReverseWindowScale: UpdateByRollingCountWhere = copy(reverseWindowScale = _root_.scala.None)
            def withReverseWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingCountWhere = copy(reverseWindowScale = Option(__v))
            def getForwardWindowScale: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = forwardWindowScale.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.defaultInstance)
            def clearForwardWindowScale: UpdateByRollingCountWhere = copy(forwardWindowScale = _root_.scala.None)
            def withForwardWindowScale(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale): UpdateByRollingCountWhere = copy(forwardWindowScale = Option(__v))
            def withResultColumn(__v: _root_.scala.Predef.String): UpdateByRollingCountWhere = copy(resultColumn = __v)
            def clearFilters = copy(filters = _root_.scala.Seq.empty)
            def addFilters(__vs: _root_.scala.Predef.String *): UpdateByRollingCountWhere = addAllFilters(__vs)
            def addAllFilters(__vs: Iterable[_root_.scala.Predef.String]): UpdateByRollingCountWhere = copy(filters = filters ++ __vs)
            def withFilters(__v: _root_.scala.Seq[_root_.scala.Predef.String]): UpdateByRollingCountWhere = copy(filters = __v)
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.orNull
                case 2 => forwardWindowScale.orNull
                case 3 => {
                  val __t = resultColumn
                  if (__t != "") __t else null
                }
                case 4 => filters
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => reverseWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 2 => forwardWindowScale.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
                case 3 => _root_.scalapb.descriptors.PString(resultColumn)
                case 4 => _root_.scalapb.descriptors.PRepeated(filters.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere])
        }
        
        object UpdateByRollingCountWhere extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere = {
            var __reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scala.None
            var __resultColumn: _root_.scala.Predef.String = ""
            val __filters: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __reverseWindowScale = _root_.scala.Option(__reverseWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 18 =>
                  __forwardWindowScale = _root_.scala.Option(__forwardWindowScale.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
                case 26 =>
                  __resultColumn = _input__.readStringRequireUtf8()
                case 34 =>
                  __filters += _input__.readStringRequireUtf8()
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere(
                reverseWindowScale = __reverseWindowScale,
                forwardWindowScale = __forwardWindowScale,
                resultColumn = __resultColumn,
                filters = __filters.result(),
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere(
                reverseWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                forwardWindowScale = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]]),
                resultColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
                filters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(21)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(21)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
            var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
            (__number: @_root_.scala.unchecked) match {
              case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
              case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
            }
            __out
          }
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere(
            reverseWindowScale = _root_.scala.None,
            forwardWindowScale = _root_.scala.None,
            resultColumn = "",
            filters = _root_.scala.Seq.empty
          )
          implicit class UpdateByRollingCountWhereLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere](_l) {
            def reverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getReverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = _root_.scala.Option(f_)))
            def optionalReverseWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.reverseWindowScale)((c_, f_) => c_.copy(reverseWindowScale = f_))
            def forwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = field(_.getForwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = _root_.scala.Option(f_)))
            def optionalForwardWindowScale: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]] = field(_.forwardWindowScale)((c_, f_) => c_.copy(forwardWindowScale = f_))
            def resultColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resultColumn)((c_, f_) => c_.copy(resultColumn = f_))
            def filters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.filters)((c_, f_) => c_.copy(filters = f_))
          }
          final val REVERSE_WINDOW_SCALE_FIELD_NUMBER = 1
          final val FORWARD_WINDOW_SCALE_FIELD_NUMBER = 2
          final val RESULT_COLUMN_FIELD_NUMBER = 3
          final val FILTERS_FIELD_NUMBER = 4
          def of(
            reverseWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            forwardWindowScale: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale],
            resultColumn: _root_.scala.Predef.String,
            filters: _root_.scala.Seq[_root_.scala.Predef.String]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere(
            reverseWindowScale,
            forwardWindowScale,
            resultColumn,
            filters
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere])
        }
        
        /** @param resultColumn
          *   The output column name
          * @param filters
          *   The filters tp apply before counting
          */
        @SerialVersionUID(0L)
        final case class UpdateByCumulativeCountWhere(
            resultColumn: _root_.scala.Predef.String = "",
            filters: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
            unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
            ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByCumulativeCountWhere] {
            @transient
            private var __serializedSizeMemoized: _root_.scala.Int = 0
            private def __computeSerializedSize(): _root_.scala.Int = {
              var __size = 0
              
              {
                val __value = resultColumn
                if (!__value.isEmpty) {
                  __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
                }
              };
              filters.foreach { __item =>
                val __value = __item
                __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
              }
              __size += unknownFields.serializedSize
              __size
            }
            override def serializedSize: _root_.scala.Int = {
              var __size = __serializedSizeMemoized
              if (__size == 0) {
                __size = __computeSerializedSize() + 1
                __serializedSizeMemoized = __size
              }
              __size - 1
              
            }
            def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
              {
                val __v = resultColumn
                if (!__v.isEmpty) {
                  _output__.writeString(1, __v)
                }
              };
              filters.foreach { __v =>
                val __m = __v
                _output__.writeString(2, __m)
              };
              unknownFields.writeTo(_output__)
            }
            def withResultColumn(__v: _root_.scala.Predef.String): UpdateByCumulativeCountWhere = copy(resultColumn = __v)
            def clearFilters = copy(filters = _root_.scala.Seq.empty)
            def addFilters(__vs: _root_.scala.Predef.String *): UpdateByCumulativeCountWhere = addAllFilters(__vs)
            def addAllFilters(__vs: Iterable[_root_.scala.Predef.String]): UpdateByCumulativeCountWhere = copy(filters = filters ++ __vs)
            def withFilters(__v: _root_.scala.Seq[_root_.scala.Predef.String]): UpdateByCumulativeCountWhere = copy(filters = __v)
            def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
            def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
            def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
              (__fieldNumber: @_root_.scala.unchecked) match {
                case 1 => {
                  val __t = resultColumn
                  if (__t != "") __t else null
                }
                case 2 => filters
              }
            }
            def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
              _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
              (__field.number: @_root_.scala.unchecked) match {
                case 1 => _root_.scalapb.descriptors.PString(resultColumn)
                case 2 => _root_.scalapb.descriptors.PRepeated(filters.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
              }
            }
            def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
            def companion: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere.type = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere
            // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere])
        }
        
        object UpdateByCumulativeCountWhere extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere] {
          implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere] = this
          def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere = {
            var __resultColumn: _root_.scala.Predef.String = ""
            val __filters: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
            var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
            var _done__ = false
            while (!_done__) {
              val _tag__ = _input__.readTag()
              _tag__ match {
                case 0 => _done__ = true
                case 10 =>
                  __resultColumn = _input__.readStringRequireUtf8()
                case 18 =>
                  __filters += _input__.readStringRequireUtf8()
                case tag =>
                  if (_unknownFields__ == null) {
                    _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
                  }
                  _unknownFields__.parseField(tag, _input__)
              }
            }
            io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere(
                resultColumn = __resultColumn,
                filters = __filters.result(),
                unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
            )
          }
          implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere] = _root_.scalapb.descriptors.Reads{
            case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
              _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
              io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere(
                resultColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
                filters = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
              )
            case _ => throw new RuntimeException("Expected PMessage")
          }
          def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.javaDescriptor.getNestedTypes().get(22)
          def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.scalaDescriptor.nestedMessages(22)
          def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
          lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
          def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
          lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere(
            resultColumn = "",
            filters = _root_.scala.Seq.empty
          )
          implicit class UpdateByCumulativeCountWhereLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere](_l) {
            def resultColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resultColumn)((c_, f_) => c_.copy(resultColumn = f_))
            def filters: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.filters)((c_, f_) => c_.copy(filters = f_))
          }
          final val RESULT_COLUMN_FIELD_NUMBER = 1
          final val FILTERS_FIELD_NUMBER = 2
          def of(
            resultColumn: _root_.scala.Predef.String,
            filters: _root_.scala.Seq[_root_.scala.Predef.String]
          ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere(
            resultColumn,
            filters
          )
          // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere])
        }
        
        implicit class UpdateBySpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec](_l) {
          def sum: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeSum] = field(_.getSum)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Sum(f_)))
          def min: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMin] = field(_.getMin)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Min(f_)))
          def max: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeMax] = field(_.getMax)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Max(f_)))
          def product: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeProduct] = field(_.getProduct)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Product(f_)))
          def fill: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByFill] = field(_.getFill)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Fill(f_)))
          def ema: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEma] = field(_.getEma)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ema(f_)))
          def rollingSum: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingSum] = field(_.getRollingSum)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingSum(f_)))
          def rollingGroup: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingGroup] = field(_.getRollingGroup)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingGroup(f_)))
          def rollingAvg: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingAvg] = field(_.getRollingAvg)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingAvg(f_)))
          def rollingMin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMin] = field(_.getRollingMin)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMin(f_)))
          def rollingMax: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingMax] = field(_.getRollingMax)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingMax(f_)))
          def rollingProduct: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingProduct] = field(_.getRollingProduct)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingProduct(f_)))
          def delta: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByDelta] = field(_.getDelta)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Delta(f_)))
          def ems: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEms] = field(_.getEms)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.Ems(f_)))
          def emMin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMin] = field(_.getEmMin)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMin(f_)))
          def emMax: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmMax] = field(_.getEmMax)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmMax(f_)))
          def emStd: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByEmStd] = field(_.getEmStd)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.EmStd(f_)))
          def rollingCount: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCount] = field(_.getRollingCount)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCount(f_)))
          def rollingStd: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingStd] = field(_.getRollingStd)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingStd(f_)))
          def rollingWavg: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingWAvg] = field(_.getRollingWavg)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingWavg(f_)))
          def rollingFormula: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingFormula] = field(_.getRollingFormula)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingFormula(f_)))
          def rollingCountWhere: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByRollingCountWhere] = field(_.getRollingCountWhere)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.RollingCountWhere(f_)))
          def countWhere: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.UpdateByCumulativeCountWhere] = field(_.getCountWhere)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type.CountWhere(f_)))
          def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
        }
        final val SUM_FIELD_NUMBER = 1
        final val MIN_FIELD_NUMBER = 2
        final val MAX_FIELD_NUMBER = 3
        final val PRODUCT_FIELD_NUMBER = 4
        final val FILL_FIELD_NUMBER = 5
        final val EMA_FIELD_NUMBER = 6
        final val ROLLING_SUM_FIELD_NUMBER = 7
        final val ROLLING_GROUP_FIELD_NUMBER = 8
        final val ROLLING_AVG_FIELD_NUMBER = 9
        final val ROLLING_MIN_FIELD_NUMBER = 10
        final val ROLLING_MAX_FIELD_NUMBER = 11
        final val ROLLING_PRODUCT_FIELD_NUMBER = 12
        final val DELTA_FIELD_NUMBER = 13
        final val EMS_FIELD_NUMBER = 14
        final val EM_MIN_FIELD_NUMBER = 15
        final val EM_MAX_FIELD_NUMBER = 16
        final val EM_STD_FIELD_NUMBER = 17
        final val ROLLING_COUNT_FIELD_NUMBER = 18
        final val ROLLING_STD_FIELD_NUMBER = 19
        final val ROLLING_WAVG_FIELD_NUMBER = 20
        final val ROLLING_FORMULA_FIELD_NUMBER = 21
        final val ROLLING_COUNT_WHERE_FIELD_NUMBER = 22
        final val COUNT_WHERE_FIELD_NUMBER = 23
        def of(
          `type`: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec.Type
        ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec(
          `type`
        )
        // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec])
      }
      
      implicit class UpdateByColumnLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn](_l) {
        def spec: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec] = field(_.getSpec)((c_, f_) => c_.copy(spec = _root_.scala.Option(f_)))
        def optionalSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec]] = field(_.spec)((c_, f_) => c_.copy(spec = f_))
        def matchPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.matchPairs)((c_, f_) => c_.copy(matchPairs = f_))
      }
      final val SPEC_FIELD_NUMBER = 1
      final val MATCH_PAIRS_FIELD_NUMBER = 2
      def of(
        spec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn.UpdateBySpec],
        matchPairs: _root_.scala.Seq[_root_.scala.Predef.String]
      ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn(
        spec,
        matchPairs
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation.UpdateByColumn])
    }
    
    implicit class UpdateByOperationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation](_l) {
      def column: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.UpdateByColumn] = field(_.getColumn)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type.Column(f_)))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    }
    final val COLUMN_FIELD_NUMBER = 1
    def of(
      `type`: io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation.Type
    ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation(
      `type`
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest.UpdateByOperation])
  }
  
  implicit class UpdateByRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def sourceId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getSourceId)((c_, f_) => c_.copy(sourceId = _root_.scala.Option(f_)))
    def optionalSourceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.sourceId)((c_, f_) => c_.copy(sourceId = f_))
    def options: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions] = field(_.getOptions)((c_, f_) => c_.copy(options = _root_.scala.Option(f_)))
    def optionalOptions: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions]] = field(_.options)((c_, f_) => c_.copy(options = f_))
    def operations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation]] = field(_.operations)((c_, f_) => c_.copy(operations = f_))
    def groupByColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.groupByColumns)((c_, f_) => c_.copy(groupByColumns = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val SOURCE_ID_FIELD_NUMBER = 2
  final val OPTIONS_FIELD_NUMBER = 3
  final val OPERATIONS_FIELD_NUMBER = 4
  final val GROUP_BY_COLUMNS_FIELD_NUMBER = 5
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    options: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOptions],
    operations: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.UpdateByRequest.UpdateByOperation],
    groupByColumns: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByRequest(
    resultId,
    sourceId,
    options,
    operations,
    groupByColumns
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByRequest])
}
