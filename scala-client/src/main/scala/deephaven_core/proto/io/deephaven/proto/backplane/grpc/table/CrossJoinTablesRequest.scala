// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

/** @param reserveBits
  *   the number of bits of key-space to initially reserve per group; default is 10
  */
@SerialVersionUID(0L)
final case class CrossJoinTablesRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    leftId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    rightId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    columnsToMatch: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    columnsToAdd: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    reserveBits: _root_.scala.Int = 0,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CrossJoinTablesRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (leftId.isDefined) {
        val __value = leftId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (rightId.isDefined) {
        val __value = rightId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      columnsToMatch.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      columnsToAdd.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      }
      
      {
        val __value = reserveBits
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(6, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      leftId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      rightId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      columnsToMatch.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      columnsToAdd.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      {
        val __v = reserveBits
        if (__v != 0) {
          _output__.writeInt32(6, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: CrossJoinTablesRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): CrossJoinTablesRequest = copy(resultId = Option(__v))
    def getLeftId: io.deephaven.proto.backplane.grpc.table.TableReference = leftId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearLeftId: CrossJoinTablesRequest = copy(leftId = _root_.scala.None)
    def withLeftId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): CrossJoinTablesRequest = copy(leftId = Option(__v))
    def getRightId: io.deephaven.proto.backplane.grpc.table.TableReference = rightId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearRightId: CrossJoinTablesRequest = copy(rightId = _root_.scala.None)
    def withRightId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): CrossJoinTablesRequest = copy(rightId = Option(__v))
    def clearColumnsToMatch = copy(columnsToMatch = _root_.scala.Seq.empty)
    def addColumnsToMatch(__vs: _root_.scala.Predef.String *): CrossJoinTablesRequest = addAllColumnsToMatch(__vs)
    def addAllColumnsToMatch(__vs: Iterable[_root_.scala.Predef.String]): CrossJoinTablesRequest = copy(columnsToMatch = columnsToMatch ++ __vs)
    def withColumnsToMatch(__v: _root_.scala.Seq[_root_.scala.Predef.String]): CrossJoinTablesRequest = copy(columnsToMatch = __v)
    def clearColumnsToAdd = copy(columnsToAdd = _root_.scala.Seq.empty)
    def addColumnsToAdd(__vs: _root_.scala.Predef.String *): CrossJoinTablesRequest = addAllColumnsToAdd(__vs)
    def addAllColumnsToAdd(__vs: Iterable[_root_.scala.Predef.String]): CrossJoinTablesRequest = copy(columnsToAdd = columnsToAdd ++ __vs)
    def withColumnsToAdd(__v: _root_.scala.Seq[_root_.scala.Predef.String]): CrossJoinTablesRequest = copy(columnsToAdd = __v)
    def withReserveBits(__v: _root_.scala.Int): CrossJoinTablesRequest = copy(reserveBits = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => leftId.orNull
        case 3 => rightId.orNull
        case 4 => columnsToMatch
        case 5 => columnsToAdd
        case 6 => {
          val __t = reserveBits
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => leftId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => rightId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(columnsToMatch.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(columnsToAdd.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 6 => _root_.scalapb.descriptors.PInt(reserveBits)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest.type = io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest])
}

object CrossJoinTablesRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __leftId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __rightId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    val __columnsToMatch: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    val __columnsToAdd: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __reserveBits: _root_.scala.Int = 0
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __leftId = _root_.scala.Option(__leftId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __rightId = _root_.scala.Option(__rightId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __columnsToMatch += _input__.readStringRequireUtf8()
        case 42 =>
          __columnsToAdd += _input__.readStringRequireUtf8()
        case 48 =>
          __reserveBits = _input__.readInt32()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest(
        resultId = __resultId,
        leftId = __leftId,
        rightId = __rightId,
        columnsToMatch = __columnsToMatch.result(),
        columnsToAdd = __columnsToAdd.result(),
        reserveBits = __reserveBits,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        leftId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        rightId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        columnsToMatch = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        columnsToAdd = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        reserveBits = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getMessageTypes().get(24)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.messages(24)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest(
    resultId = _root_.scala.None,
    leftId = _root_.scala.None,
    rightId = _root_.scala.None,
    columnsToMatch = _root_.scala.Seq.empty,
    columnsToAdd = _root_.scala.Seq.empty,
    reserveBits = 0
  )
  implicit class CrossJoinTablesRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def leftId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getLeftId)((c_, f_) => c_.copy(leftId = _root_.scala.Option(f_)))
    def optionalLeftId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.leftId)((c_, f_) => c_.copy(leftId = f_))
    def rightId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getRightId)((c_, f_) => c_.copy(rightId = _root_.scala.Option(f_)))
    def optionalRightId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.rightId)((c_, f_) => c_.copy(rightId = f_))
    def columnsToMatch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.columnsToMatch)((c_, f_) => c_.copy(columnsToMatch = f_))
    def columnsToAdd: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.columnsToAdd)((c_, f_) => c_.copy(columnsToAdd = f_))
    def reserveBits: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.reserveBits)((c_, f_) => c_.copy(reserveBits = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val LEFT_ID_FIELD_NUMBER = 2
  final val RIGHT_ID_FIELD_NUMBER = 3
  final val COLUMNS_TO_MATCH_FIELD_NUMBER = 4
  final val COLUMNS_TO_ADD_FIELD_NUMBER = 5
  final val RESERVE_BITS_FIELD_NUMBER = 6
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    leftId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    rightId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    columnsToMatch: _root_.scala.Seq[_root_.scala.Predef.String],
    columnsToAdd: _root_.scala.Seq[_root_.scala.Predef.String],
    reserveBits: _root_.scala.Int
  ): _root_.io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest = _root_.io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest(
    resultId,
    leftId,
    rightId,
    columnsToMatch,
    columnsToAdd,
    reserveBits
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CrossJoinTablesRequest])
}
