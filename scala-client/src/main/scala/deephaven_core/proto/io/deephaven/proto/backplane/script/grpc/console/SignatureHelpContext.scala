// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class SignatureHelpContext(
    triggerKind: _root_.scala.Int = 0,
    triggerCharacter: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    isRetrigger: _root_.scala.Boolean = false,
    activeSignatureHelp: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SignatureHelpContext] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = triggerKind
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      if (triggerCharacter.isDefined) {
        val __value = triggerCharacter.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      
      {
        val __value = isRetrigger
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      if (activeSignatureHelp.isDefined) {
        val __value = activeSignatureHelp.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = triggerKind
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      triggerCharacter.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      {
        val __v = isRetrigger
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      activeSignatureHelp.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withTriggerKind(__v: _root_.scala.Int): SignatureHelpContext = copy(triggerKind = __v)
    def getTriggerCharacter: _root_.scala.Predef.String = triggerCharacter.getOrElse("")
    def clearTriggerCharacter: SignatureHelpContext = copy(triggerCharacter = _root_.scala.None)
    def withTriggerCharacter(__v: _root_.scala.Predef.String): SignatureHelpContext = copy(triggerCharacter = Option(__v))
    def withIsRetrigger(__v: _root_.scala.Boolean): SignatureHelpContext = copy(isRetrigger = __v)
    def getActiveSignatureHelp: io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse = activeSignatureHelp.getOrElse(io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse.defaultInstance)
    def clearActiveSignatureHelp: SignatureHelpContext = copy(activeSignatureHelp = _root_.scala.None)
    def withActiveSignatureHelp(__v: io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse): SignatureHelpContext = copy(activeSignatureHelp = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = triggerKind
          if (__t != 0) __t else null
        }
        case 2 => triggerCharacter.orNull
        case 3 => {
          val __t = isRetrigger
          if (__t != false) __t else null
        }
        case 4 => activeSignatureHelp.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(triggerKind)
        case 2 => triggerCharacter.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PBoolean(isRetrigger)
        case 4 => activeSignatureHelp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext.type = io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.SignatureHelpContext])
}

object SignatureHelpContext extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext = {
    var __triggerKind: _root_.scala.Int = 0
    var __triggerCharacter: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __isRetrigger: _root_.scala.Boolean = false
    var __activeSignatureHelp: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __triggerKind = _input__.readInt32()
        case 18 =>
          __triggerCharacter = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 24 =>
          __isRetrigger = _input__.readBool()
        case 34 =>
          __activeSignatureHelp = _root_.scala.Option(__activeSignatureHelp.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext(
        triggerKind = __triggerKind,
        triggerCharacter = __triggerCharacter,
        isRetrigger = __isRetrigger,
        activeSignatureHelp = __activeSignatureHelp,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext(
        triggerKind = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        triggerCharacter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        isRetrigger = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        activeSignatureHelp = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getMessageTypes().get(33)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.scalaDescriptor.messages(33)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext(
    triggerKind = 0,
    triggerCharacter = _root_.scala.None,
    isRetrigger = false,
    activeSignatureHelp = _root_.scala.None
  )
  implicit class SignatureHelpContextLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext](_l) {
    def triggerKind: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.triggerKind)((c_, f_) => c_.copy(triggerKind = f_))
    def triggerCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTriggerCharacter)((c_, f_) => c_.copy(triggerCharacter = _root_.scala.Option(f_)))
    def optionalTriggerCharacter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.triggerCharacter)((c_, f_) => c_.copy(triggerCharacter = f_))
    def isRetrigger: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isRetrigger)((c_, f_) => c_.copy(isRetrigger = f_))
    def activeSignatureHelp: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse] = field(_.getActiveSignatureHelp)((c_, f_) => c_.copy(activeSignatureHelp = _root_.scala.Option(f_)))
    def optionalActiveSignatureHelp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse]] = field(_.activeSignatureHelp)((c_, f_) => c_.copy(activeSignatureHelp = f_))
  }
  final val TRIGGER_KIND_FIELD_NUMBER = 1
  final val TRIGGER_CHARACTER_FIELD_NUMBER = 2
  final val IS_RETRIGGER_FIELD_NUMBER = 3
  final val ACTIVE_SIGNATURE_HELP_FIELD_NUMBER = 4
  def of(
    triggerKind: _root_.scala.Int,
    triggerCharacter: _root_.scala.Option[_root_.scala.Predef.String],
    isRetrigger: _root_.scala.Boolean,
    activeSignatureHelp: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext = _root_.io.deephaven.proto.backplane.script.grpc.console.SignatureHelpContext(
    triggerKind,
    triggerCharacter,
    isRetrigger,
    activeSignatureHelp
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.SignatureHelpContext])
}
