// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.`object`

/**
  * A generic payload sent from the client to the server. The specific requirements and
  * guarantees are defined by the specific plugin.
  *
  * @param payload
  *   The payload, may be empty.
  * @param references
  *  
  *   The typed references, may be empty.
  *  
  *   These references may be any ticket, resolved or not. This lets the client reference
  *   objects that already exist on the server or are still pending. Note that pending
  *   tickets require the server to wait until that object exists before passing this request
  *   to the server plugin, and since messages are always processed in order, later requests
  *   will also be delayed.
  */
@SerialVersionUID(0L)
final case class ClientData(
    payload: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
    references: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.ticket.TypedTicket] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ClientData] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = payload
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
        }
      };
      references.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = payload
        if (!__v.isEmpty) {
          _output__.writeBytes(1, __v)
        }
      };
      references.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withPayload(__v: _root_.com.google.protobuf.ByteString): ClientData = copy(payload = __v)
    def clearReferences = copy(references = _root_.scala.Seq.empty)
    def addReferences(__vs: io.deephaven.proto.backplane.grpc.ticket.TypedTicket *): ClientData = addAllReferences(__vs)
    def addAllReferences(__vs: Iterable[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]): ClientData = copy(references = references ++ __vs)
    def withReferences(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]): ClientData = copy(references = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = payload
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
        case 2 => references
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PByteString(payload)
        case 2 => _root_.scalapb.descriptors.PRepeated(references.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.`object`.ClientData.type = io.deephaven.proto.backplane.grpc.`object`.ClientData
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ClientData])
}

object ClientData extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.`object`.ClientData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.`object`.ClientData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.`object`.ClientData = {
    var __payload: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    val __references: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.ticket.TypedTicket] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __payload = _input__.readBytes()
        case 18 =>
          __references += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.TypedTicket](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.`object`.ClientData(
        payload = __payload,
        references = __references.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.`object`.ClientData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.`object`.ClientData(
        payload = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
        references = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.`object`.ObjectProto.javaDescriptor.getMessageTypes().get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.`object`.ObjectProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 2 => __out = io.deephaven.proto.backplane.grpc.ticket.TypedTicket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.`object`.ClientData(
    payload = _root_.com.google.protobuf.ByteString.EMPTY,
    references = _root_.scala.Seq.empty
  )
  implicit class ClientDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.ClientData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.ClientData](_l) {
    def payload: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.payload)((c_, f_) => c_.copy(payload = f_))
    def references: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]] = field(_.references)((c_, f_) => c_.copy(references = f_))
  }
  final val PAYLOAD_FIELD_NUMBER = 1
  final val REFERENCES_FIELD_NUMBER = 2
  def of(
    payload: _root_.com.google.protobuf.ByteString,
    references: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]
  ): _root_.io.deephaven.proto.backplane.grpc.`object`.ClientData = _root_.io.deephaven.proto.backplane.grpc.`object`.ClientData(
    payload,
    references
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ClientData])
}
