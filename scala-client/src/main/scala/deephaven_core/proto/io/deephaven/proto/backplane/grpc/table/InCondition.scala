// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class InCondition(
    target: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None,
    candidates: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.Seq.empty,
    caseSensitivity: io.deephaven.proto.backplane.grpc.table.CaseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE,
    matchType: io.deephaven.proto.backplane.grpc.table.MatchType = io.deephaven.proto.backplane.grpc.table.MatchType.REGULAR,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InCondition] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (target.isDefined) {
        val __value = target.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      candidates.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = caseSensitivity.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
        }
      };
      
      {
        val __value = matchType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      target.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      candidates.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = caseSensitivity.value
        if (__v != 0) {
          _output__.writeEnum(3, __v)
        }
      };
      {
        val __v = matchType.value
        if (__v != 0) {
          _output__.writeEnum(4, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getTarget: io.deephaven.proto.backplane.grpc.table.Value = target.getOrElse(io.deephaven.proto.backplane.grpc.table.Value.defaultInstance)
    def clearTarget: InCondition = copy(target = _root_.scala.None)
    def withTarget(__v: io.deephaven.proto.backplane.grpc.table.Value): InCondition = copy(target = Option(__v))
    def clearCandidates = copy(candidates = _root_.scala.Seq.empty)
    def addCandidates(__vs: io.deephaven.proto.backplane.grpc.table.Value *): InCondition = addAllCandidates(__vs)
    def addAllCandidates(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.Value]): InCondition = copy(candidates = candidates ++ __vs)
    def withCandidates(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]): InCondition = copy(candidates = __v)
    def withCaseSensitivity(__v: io.deephaven.proto.backplane.grpc.table.CaseSensitivity): InCondition = copy(caseSensitivity = __v)
    def withMatchType(__v: io.deephaven.proto.backplane.grpc.table.MatchType): InCondition = copy(matchType = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => target.orNull
        case 2 => candidates
        case 3 => {
          val __t = caseSensitivity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 4 => {
          val __t = matchType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => target.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PRepeated(candidates.iterator.map(_.toPMessage).toVector)
        case 3 => _root_.scalapb.descriptors.PEnum(caseSensitivity.scalaValueDescriptor)
        case 4 => _root_.scalapb.descriptors.PEnum(matchType.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.InCondition.type = io.deephaven.proto.backplane.grpc.table.InCondition
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.InCondition])
}

object InCondition extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.InCondition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.InCondition] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.InCondition = {
    var __target: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None
    val __candidates: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Value] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Value]
    var __caseSensitivity: io.deephaven.proto.backplane.grpc.table.CaseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE
    var __matchType: io.deephaven.proto.backplane.grpc.table.MatchType = io.deephaven.proto.backplane.grpc.table.MatchType.REGULAR
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __target = _root_.scala.Option(__target.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Value](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __candidates += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Value](_input__)
        case 24 =>
          __caseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.fromValue(_input__.readEnum())
        case 32 =>
          __matchType = io.deephaven.proto.backplane.grpc.table.MatchType.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.InCondition(
        target = __target,
        candidates = __candidates.result(),
        caseSensitivity = __caseSensitivity,
        matchType = __matchType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.InCondition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.InCondition(
        target = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]]),
        candidates = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]]).getOrElse(_root_.scala.Seq.empty),
        caseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE.scalaValueDescriptor).number),
        matchType = io.deephaven.proto.backplane.grpc.table.MatchType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.MatchType.REGULAR.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getMessageTypes().get(51)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.messages(51)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.Value
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.Value
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 3 => io.deephaven.proto.backplane.grpc.table.CaseSensitivity
      case 4 => io.deephaven.proto.backplane.grpc.table.MatchType
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.InCondition(
    target = _root_.scala.None,
    candidates = _root_.scala.Seq.empty,
    caseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE,
    matchType = io.deephaven.proto.backplane.grpc.table.MatchType.REGULAR
  )
  implicit class InConditionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.InCondition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.InCondition](_l) {
    def target: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value] = field(_.getTarget)((c_, f_) => c_.copy(target = _root_.scala.Option(f_)))
    def optionalTarget: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]] = field(_.target)((c_, f_) => c_.copy(target = f_))
    def candidates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value]] = field(_.candidates)((c_, f_) => c_.copy(candidates = f_))
    def caseSensitivity: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CaseSensitivity] = field(_.caseSensitivity)((c_, f_) => c_.copy(caseSensitivity = f_))
    def matchType: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MatchType] = field(_.matchType)((c_, f_) => c_.copy(matchType = f_))
  }
  final val TARGET_FIELD_NUMBER = 1
  final val CANDIDATES_FIELD_NUMBER = 2
  final val CASE_SENSITIVITY_FIELD_NUMBER = 3
  final val MATCH_TYPE_FIELD_NUMBER = 4
  def of(
    target: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value],
    candidates: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Value],
    caseSensitivity: io.deephaven.proto.backplane.grpc.table.CaseSensitivity,
    matchType: io.deephaven.proto.backplane.grpc.table.MatchType
  ): _root_.io.deephaven.proto.backplane.grpc.table.InCondition = _root_.io.deephaven.proto.backplane.grpc.table.InCondition(
    target,
    candidates,
    caseSensitivity,
    matchType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.InCondition])
}
