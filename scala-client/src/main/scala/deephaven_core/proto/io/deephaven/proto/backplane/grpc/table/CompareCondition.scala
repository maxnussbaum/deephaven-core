// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class CompareCondition(
    operation: io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.LESS_THAN,
    caseSensitivity: io.deephaven.proto.backplane.grpc.table.CaseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE,
    lhs: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None,
    rhs: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CompareCondition] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = operation.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        }
      };
      
      {
        val __value = caseSensitivity.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      if (lhs.isDefined) {
        val __value = lhs.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (rhs.isDefined) {
        val __value = rhs.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = operation.value
        if (__v != 0) {
          _output__.writeEnum(1, __v)
        }
      };
      {
        val __v = caseSensitivity.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      lhs.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      rhs.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withOperation(__v: io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation): CompareCondition = copy(operation = __v)
    def withCaseSensitivity(__v: io.deephaven.proto.backplane.grpc.table.CaseSensitivity): CompareCondition = copy(caseSensitivity = __v)
    def getLhs: io.deephaven.proto.backplane.grpc.table.Value = lhs.getOrElse(io.deephaven.proto.backplane.grpc.table.Value.defaultInstance)
    def clearLhs: CompareCondition = copy(lhs = _root_.scala.None)
    def withLhs(__v: io.deephaven.proto.backplane.grpc.table.Value): CompareCondition = copy(lhs = Option(__v))
    def getRhs: io.deephaven.proto.backplane.grpc.table.Value = rhs.getOrElse(io.deephaven.proto.backplane.grpc.table.Value.defaultInstance)
    def clearRhs: CompareCondition = copy(rhs = _root_.scala.None)
    def withRhs(__v: io.deephaven.proto.backplane.grpc.table.Value): CompareCondition = copy(rhs = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = operation.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 2 => {
          val __t = caseSensitivity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => lhs.orNull
        case 4 => rhs.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PEnum(operation.scalaValueDescriptor)
        case 2 => _root_.scalapb.descriptors.PEnum(caseSensitivity.scalaValueDescriptor)
        case 3 => lhs.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => rhs.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.CompareCondition.type = io.deephaven.proto.backplane.grpc.table.CompareCondition
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CompareCondition])
}

object CompareCondition extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CompareCondition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CompareCondition] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CompareCondition = {
    var __operation: io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.LESS_THAN
    var __caseSensitivity: io.deephaven.proto.backplane.grpc.table.CaseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE
    var __lhs: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None
    var __rhs: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __operation = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.fromValue(_input__.readEnum())
        case 16 =>
          __caseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.fromValue(_input__.readEnum())
        case 26 =>
          __lhs = _root_.scala.Option(__lhs.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Value](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __rhs = _root_.scala.Option(__rhs.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Value](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.CompareCondition(
        operation = __operation,
        caseSensitivity = __caseSensitivity,
        lhs = __lhs,
        rhs = __rhs,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CompareCondition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.CompareCondition(
        operation = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.LESS_THAN.scalaValueDescriptor).number),
        caseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE.scalaValueDescriptor).number),
        lhs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]]),
        rhs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(50)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(50)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.Value
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.Value
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 1 => io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation
      case 2 => io.deephaven.proto.backplane.grpc.table.CaseSensitivity
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CompareCondition(
    operation = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.LESS_THAN,
    caseSensitivity = io.deephaven.proto.backplane.grpc.table.CaseSensitivity.MATCH_CASE,
    lhs = _root_.scala.None,
    rhs = _root_.scala.None
  )
  sealed abstract class CompareOperation(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation
    type RecognizedType = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.Recognized
    def isLessThan: _root_.scala.Boolean = false
    def isLessThanOrEqual: _root_.scala.Boolean = false
    def isGreaterThan: _root_.scala.Boolean = false
    def isGreaterThanOrEqual: _root_.scala.Boolean = false
    def isEquals: _root_.scala.Boolean = false
    def isNotEquals: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[CompareOperation] = io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation.Recognized])
  }
  
  object CompareOperation extends _root_.scalapb.GeneratedEnumCompanion[CompareOperation] {
    sealed trait Recognized extends CompareOperation
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[CompareOperation] = this
    
    @SerialVersionUID(0L)
    case object LESS_THAN extends CompareOperation(0) with CompareOperation.Recognized {
      val index = 0
      val name = "LESS_THAN"
      override def isLessThan: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LESS_THAN_OR_EQUAL extends CompareOperation(1) with CompareOperation.Recognized {
      val index = 1
      val name = "LESS_THAN_OR_EQUAL"
      override def isLessThanOrEqual: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GREATER_THAN extends CompareOperation(2) with CompareOperation.Recognized {
      val index = 2
      val name = "GREATER_THAN"
      override def isGreaterThan: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GREATER_THAN_OR_EQUAL extends CompareOperation(3) with CompareOperation.Recognized {
      val index = 3
      val name = "GREATER_THAN_OR_EQUAL"
      override def isGreaterThanOrEqual: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object EQUALS extends CompareOperation(4) with CompareOperation.Recognized {
      val index = 4
      val name = "EQUALS"
      override def isEquals: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object NOT_EQUALS extends CompareOperation(5) with CompareOperation.Recognized {
      val index = 5
      val name = "NOT_EQUALS"
      override def isNotEquals: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends CompareOperation(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(LESS_THAN, LESS_THAN_OR_EQUAL, GREATER_THAN, GREATER_THAN_OR_EQUAL, EQUALS, NOT_EQUALS)
    def fromValue(__value: _root_.scala.Int): CompareOperation = __value match {
      case 0 => LESS_THAN
      case 1 => LESS_THAN_OR_EQUAL
      case 2 => GREATER_THAN
      case 3 => GREATER_THAN_OR_EQUAL
      case 4 => EQUALS
      case 5 => NOT_EQUALS
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.CompareCondition.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.CompareCondition.scalaDescriptor.enums(0)
  }
  implicit class CompareConditionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CompareCondition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CompareCondition](_l) {
    def operation: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation] = field(_.operation)((c_, f_) => c_.copy(operation = f_))
    def caseSensitivity: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CaseSensitivity] = field(_.caseSensitivity)((c_, f_) => c_.copy(caseSensitivity = f_))
    def lhs: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value] = field(_.getLhs)((c_, f_) => c_.copy(lhs = _root_.scala.Option(f_)))
    def optionalLhs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]] = field(_.lhs)((c_, f_) => c_.copy(lhs = f_))
    def rhs: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Value] = field(_.getRhs)((c_, f_) => c_.copy(rhs = _root_.scala.Option(f_)))
    def optionalRhs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]] = field(_.rhs)((c_, f_) => c_.copy(rhs = f_))
  }
  final val OPERATION_FIELD_NUMBER = 1
  final val CASE_SENSITIVITY_FIELD_NUMBER = 2
  final val LHS_FIELD_NUMBER = 3
  final val RHS_FIELD_NUMBER = 4
  def of(
    operation: io.deephaven.proto.backplane.grpc.table.CompareCondition.CompareOperation,
    caseSensitivity: io.deephaven.proto.backplane.grpc.table.CaseSensitivity,
    lhs: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value],
    rhs: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Value]
  ): _root_.io.deephaven.proto.backplane.grpc.table.CompareCondition = _root_.io.deephaven.proto.backplane.grpc.table.CompareCondition(
    operation,
    caseSensitivity,
    lhs,
    rhs
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CompareCondition])
}
