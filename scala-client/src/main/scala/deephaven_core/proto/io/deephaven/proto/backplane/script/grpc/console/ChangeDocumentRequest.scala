// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class ChangeDocumentRequest(
    @scala.deprecated(message="Marked as deprecated in proto file", "") consoleId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    textDocument: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier] = _root_.scala.None,
    contentChanges: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ChangeDocumentRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (consoleId.isDefined) {
        val __value = consoleId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (textDocument.isDefined) {
        val __value = textDocument.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      contentChanges.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      consoleId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      textDocument.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      contentChanges.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getConsoleId: io.deephaven.proto.backplane.grpc.ticket.Ticket = consoleId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearConsoleId: ChangeDocumentRequest = copy(consoleId = _root_.scala.None)
    def withConsoleId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): ChangeDocumentRequest = copy(consoleId = Option(__v))
    def getTextDocument: io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier = textDocument.getOrElse(io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier.defaultInstance)
    def clearTextDocument: ChangeDocumentRequest = copy(textDocument = _root_.scala.None)
    def withTextDocument(__v: io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier): ChangeDocumentRequest = copy(textDocument = Option(__v))
    def clearContentChanges = copy(contentChanges = _root_.scala.Seq.empty)
    def addContentChanges(__vs: io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent *): ChangeDocumentRequest = addAllContentChanges(__vs)
    def addAllContentChanges(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]): ChangeDocumentRequest = copy(contentChanges = contentChanges ++ __vs)
    def withContentChanges(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]): ChangeDocumentRequest = copy(contentChanges = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => consoleId.orNull
        case 2 => textDocument.orNull
        case 3 => contentChanges
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => consoleId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => textDocument.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(contentChanges.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.type = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest])
}

object ChangeDocumentRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest = {
    var __consoleId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __textDocument: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier] = _root_.scala.None
    val __contentChanges: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __consoleId = _root_.scala.Option(__consoleId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __textDocument = _root_.scala.Option(__textDocument.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __contentChanges += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest(
        consoleId = __consoleId,
        textDocument = __textDocument,
        contentChanges = __contentChanges.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest(
        consoleId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        textDocument = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier]]),
        contentChanges = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getMessageTypes().get(22)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.scalaDescriptor.messages(22)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier
      case 3 => __out = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest(
    consoleId = _root_.scala.None,
    textDocument = _root_.scala.None,
    contentChanges = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class TextDocumentContentChangeEvent(
      range: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange] = _root_.scala.None,
      rangeLength: _root_.scala.Int = 0,
      text: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TextDocumentContentChangeEvent] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (range.isDefined) {
          val __value = range.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        
        {
          val __value = rangeLength
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        
        {
          val __value = text
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        range.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = rangeLength
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        {
          val __v = text
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def getRange: io.deephaven.proto.backplane.script.grpc.console.DocumentRange = range.getOrElse(io.deephaven.proto.backplane.script.grpc.console.DocumentRange.defaultInstance)
      def clearRange: TextDocumentContentChangeEvent = copy(range = _root_.scala.None)
      def withRange(__v: io.deephaven.proto.backplane.script.grpc.console.DocumentRange): TextDocumentContentChangeEvent = copy(range = Option(__v))
      def withRangeLength(__v: _root_.scala.Int): TextDocumentContentChangeEvent = copy(rangeLength = __v)
      def withText(__v: _root_.scala.Predef.String): TextDocumentContentChangeEvent = copy(text = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => range.orNull
          case 2 => {
            val __t = rangeLength
            if (__t != 0) __t else null
          }
          case 3 => {
            val __t = text
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => range.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PInt(rangeLength)
          case 3 => _root_.scalapb.descriptors.PString(text)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent.type = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent])
  }
  
  object TextDocumentContentChangeEvent extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent = {
      var __range: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange] = _root_.scala.None
      var __rangeLength: _root_.scala.Int = 0
      var __text: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __range = _root_.scala.Option(__range.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.DocumentRange](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 16 =>
            __rangeLength = _input__.readInt32()
          case 26 =>
            __text = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent(
          range = __range,
          rangeLength = __rangeLength,
          text = __text,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent(
          range = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange]]),
          rangeLength = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          text = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.script.grpc.console.DocumentRange
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent(
      range = _root_.scala.None,
      rangeLength = 0,
      text = ""
    )
    implicit class TextDocumentContentChangeEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent](_l) {
      def range: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.DocumentRange] = field(_.getRange)((c_, f_) => c_.copy(range = _root_.scala.Option(f_)))
      def optionalRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange]] = field(_.range)((c_, f_) => c_.copy(range = f_))
      def rangeLength: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.rangeLength)((c_, f_) => c_.copy(rangeLength = f_))
      def text: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.text)((c_, f_) => c_.copy(text = f_))
    }
    final val RANGE_FIELD_NUMBER = 1
    final val RANGE_LENGTH_FIELD_NUMBER = 2
    final val TEXT_FIELD_NUMBER = 3
    def of(
      range: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.DocumentRange],
      rangeLength: _root_.scala.Int,
      text: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent = _root_.io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent(
      range,
      rangeLength,
      text
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest.TextDocumentContentChangeEvent])
  }
  
  implicit class ChangeDocumentRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest](_l) {
    def consoleId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getConsoleId)((c_, f_) => c_.copy(consoleId = _root_.scala.Option(f_)))
    def optionalConsoleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.consoleId)((c_, f_) => c_.copy(consoleId = f_))
    def textDocument: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier] = field(_.getTextDocument)((c_, f_) => c_.copy(textDocument = _root_.scala.Option(f_)))
    def optionalTextDocument: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier]] = field(_.textDocument)((c_, f_) => c_.copy(textDocument = f_))
    def contentChanges: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]] = field(_.contentChanges)((c_, f_) => c_.copy(contentChanges = f_))
  }
  final val CONSOLE_ID_FIELD_NUMBER = 1
  final val TEXT_DOCUMENT_FIELD_NUMBER = 2
  final val CONTENT_CHANGES_FIELD_NUMBER = 3
  def of(
    consoleId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    textDocument: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier],
    contentChanges: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest.TextDocumentContentChangeEvent]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest = _root_.io.deephaven.proto.backplane.script.grpc.console.ChangeDocumentRequest(
    consoleId,
    textDocument,
    contentChanges
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.ChangeDocumentRequest])
}
