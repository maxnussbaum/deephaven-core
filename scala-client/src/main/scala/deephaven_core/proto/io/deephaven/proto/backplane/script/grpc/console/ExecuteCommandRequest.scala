// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.script.grpc.console

/** @param systemic
  *   If set to `EXECUTE_SYSTEMIC` the command will be executed systemically.  Failures in systemic code
  *   are treated as important failures and cause errors to be reported to the io.deephaven.engine.table.impl.util.AsyncClientErrorNotifier.
  *   If this is unset it is treated as `EXECUTE_NOT_SYSTEMIC`
  */
@SerialVersionUID(0L)
final case class ExecuteCommandRequest(
    consoleId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    code: _root_.scala.Predef.String = "",
    systemic: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExecuteCommandRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (consoleId.isDefined) {
        val __value = consoleId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = code
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (systemic.isDefined) {
        val __value = systemic.get.value
        __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      consoleId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = code
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      systemic.foreach { __v =>
        val __m = __v.value
        _output__.writeEnum(4, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getConsoleId: io.deephaven.proto.backplane.grpc.ticket.Ticket = consoleId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearConsoleId: ExecuteCommandRequest = copy(consoleId = _root_.scala.None)
    def withConsoleId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): ExecuteCommandRequest = copy(consoleId = Option(__v))
    def withCode(__v: _root_.scala.Predef.String): ExecuteCommandRequest = copy(code = __v)
    def getSystemic: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType = systemic.getOrElse(io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType.NOT_SET_SYSTEMIC)
    def clearSystemic: ExecuteCommandRequest = copy(systemic = _root_.scala.None)
    def withSystemic(__v: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType): ExecuteCommandRequest = copy(systemic = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => consoleId.orNull
        case 3 => {
          val __t = code
          if (__t != "") __t else null
        }
        case 4 => systemic.map(_.javaValueDescriptor).orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => consoleId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(code)
        case 4 => systemic.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.type = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest])
}

object ExecuteCommandRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest = {
    var __consoleId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __code: _root_.scala.Predef.String = ""
    var __systemic: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __consoleId = _root_.scala.Option(__consoleId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __code = _input__.readStringRequireUtf8()
        case 32 =>
          __systemic = _root_.scala.Option(io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType.fromValue(_input__.readEnum()))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest(
        consoleId = __consoleId,
        code = __code,
        systemic = __systemic,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest(
        consoleId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        code = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        systemic = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType.fromValue(__e.number))
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getMessageTypes().get(8)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.scalaDescriptor.messages(8)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 4 => io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest(
    consoleId = _root_.scala.None,
    code = "",
    systemic = _root_.scala.None
  )
  sealed abstract class SystemicType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType
    type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType.Recognized
    def isNotSetSystemic: _root_.scala.Boolean = false
    def isExecuteNotSystemic: _root_.scala.Boolean = false
    def isExecuteSystemic: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[SystemicType] = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType.Recognized])
  }
  
  object SystemicType extends _root_.scalapb.GeneratedEnumCompanion[SystemicType] {
    sealed trait Recognized extends SystemicType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SystemicType] = this
    
    @SerialVersionUID(0L)
    case object NOT_SET_SYSTEMIC extends SystemicType(0) with SystemicType.Recognized {
      val index = 0
      val name = "NOT_SET_SYSTEMIC"
      override def isNotSetSystemic: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object EXECUTE_NOT_SYSTEMIC extends SystemicType(1) with SystemicType.Recognized {
      val index = 1
      val name = "EXECUTE_NOT_SYSTEMIC"
      override def isExecuteNotSystemic: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object EXECUTE_SYSTEMIC extends SystemicType(2) with SystemicType.Recognized {
      val index = 2
      val name = "EXECUTE_SYSTEMIC"
      override def isExecuteSystemic: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SystemicType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(NOT_SET_SYSTEMIC, EXECUTE_NOT_SYSTEMIC, EXECUTE_SYSTEMIC)
    def fromValue(__value: _root_.scala.Int): SystemicType = __value match {
      case 0 => NOT_SET_SYSTEMIC
      case 1 => EXECUTE_NOT_SYSTEMIC
      case 2 => EXECUTE_SYSTEMIC
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.scalaDescriptor.enums(0)
  }
  implicit class ExecuteCommandRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest](_l) {
    def consoleId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getConsoleId)((c_, f_) => c_.copy(consoleId = _root_.scala.Option(f_)))
    def optionalConsoleId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.consoleId)((c_, f_) => c_.copy(consoleId = f_))
    def code: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.code)((c_, f_) => c_.copy(code = f_))
    def systemic: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType] = field(_.getSystemic)((c_, f_) => c_.copy(systemic = _root_.scala.Option(f_)))
    def optionalSystemic: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType]] = field(_.systemic)((c_, f_) => c_.copy(systemic = f_))
  }
  final val CONSOLE_ID_FIELD_NUMBER = 1
  final val CODE_FIELD_NUMBER = 3
  final val SYSTEMIC_FIELD_NUMBER = 4
  def of(
    consoleId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    code: _root_.scala.Predef.String,
    systemic: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest.SystemicType]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest = _root_.io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest(
    consoleId,
    code,
    systemic
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.ExecuteCommandRequest])
}
