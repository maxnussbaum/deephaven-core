// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.application

/**
  * A lightweight object describing the exposed field.
  *
  * @param applicationName
  *   display-friendly identification
  * @param applicationId
  *   computer-friendly identification
  */
@SerialVersionUID(0L)
final case class FieldInfo(
    typedTicket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.TypedTicket] = _root_.scala.None,
    fieldName: _root_.scala.Predef.String = "",
    fieldDescription: _root_.scala.Predef.String = "",
    applicationName: _root_.scala.Predef.String = "",
    applicationId: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FieldInfo] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (typedTicket.isDefined) {
        val __value = typedTicket.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = fieldName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = fieldDescription
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = applicationName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = applicationId
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      typedTicket.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = fieldName
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = fieldDescription
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = applicationName
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = applicationId
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getTypedTicket: io.deephaven.proto.backplane.grpc.ticket.TypedTicket = typedTicket.getOrElse(io.deephaven.proto.backplane.grpc.ticket.TypedTicket.defaultInstance)
    def clearTypedTicket: FieldInfo = copy(typedTicket = _root_.scala.None)
    def withTypedTicket(__v: io.deephaven.proto.backplane.grpc.ticket.TypedTicket): FieldInfo = copy(typedTicket = Option(__v))
    def withFieldName(__v: _root_.scala.Predef.String): FieldInfo = copy(fieldName = __v)
    def withFieldDescription(__v: _root_.scala.Predef.String): FieldInfo = copy(fieldDescription = __v)
    def withApplicationName(__v: _root_.scala.Predef.String): FieldInfo = copy(applicationName = __v)
    def withApplicationId(__v: _root_.scala.Predef.String): FieldInfo = copy(applicationId = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => typedTicket.orNull
        case 2 => {
          val __t = fieldName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = fieldDescription
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = applicationName
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = applicationId
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => typedTicket.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(fieldName)
        case 3 => _root_.scalapb.descriptors.PString(fieldDescription)
        case 4 => _root_.scalapb.descriptors.PString(applicationName)
        case 5 => _root_.scalapb.descriptors.PString(applicationId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.application.FieldInfo.type = io.deephaven.proto.backplane.grpc.application.FieldInfo
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.FieldInfo])
}

object FieldInfo extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.application.FieldInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.application.FieldInfo] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.application.FieldInfo = {
    var __typedTicket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.TypedTicket] = _root_.scala.None
    var __fieldName: _root_.scala.Predef.String = ""
    var __fieldDescription: _root_.scala.Predef.String = ""
    var __applicationName: _root_.scala.Predef.String = ""
    var __applicationId: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __typedTicket = _root_.scala.Option(__typedTicket.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.TypedTicket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __fieldName = _input__.readStringRequireUtf8()
        case 26 =>
          __fieldDescription = _input__.readStringRequireUtf8()
        case 34 =>
          __applicationName = _input__.readStringRequireUtf8()
        case 42 =>
          __applicationId = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.application.FieldInfo(
        typedTicket = __typedTicket,
        fieldName = __fieldName,
        fieldDescription = __fieldDescription,
        applicationName = __applicationName,
        applicationId = __applicationId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.application.FieldInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.application.FieldInfo(
        typedTicket = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]]),
        fieldName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        fieldDescription = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        applicationName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        applicationId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApplicationProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApplicationProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.TypedTicket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.application.FieldInfo(
    typedTicket = _root_.scala.None,
    fieldName = "",
    fieldDescription = "",
    applicationName = "",
    applicationId = ""
  )
  implicit class FieldInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.application.FieldInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.application.FieldInfo](_l) {
    def typedTicket: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.TypedTicket] = field(_.getTypedTicket)((c_, f_) => c_.copy(typedTicket = _root_.scala.Option(f_)))
    def optionalTypedTicket: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.TypedTicket]] = field(_.typedTicket)((c_, f_) => c_.copy(typedTicket = f_))
    def fieldName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fieldName)((c_, f_) => c_.copy(fieldName = f_))
    def fieldDescription: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.fieldDescription)((c_, f_) => c_.copy(fieldDescription = f_))
    def applicationName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.applicationName)((c_, f_) => c_.copy(applicationName = f_))
    def applicationId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.applicationId)((c_, f_) => c_.copy(applicationId = f_))
  }
  final val TYPED_TICKET_FIELD_NUMBER = 1
  final val FIELD_NAME_FIELD_NUMBER = 2
  final val FIELD_DESCRIPTION_FIELD_NUMBER = 3
  final val APPLICATION_NAME_FIELD_NUMBER = 4
  final val APPLICATION_ID_FIELD_NUMBER = 5
  def of(
    typedTicket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.TypedTicket],
    fieldName: _root_.scala.Predef.String,
    fieldDescription: _root_.scala.Predef.String,
    applicationName: _root_.scala.Predef.String,
    applicationId: _root_.scala.Predef.String
  ): _root_.io.deephaven.proto.backplane.grpc.application.FieldInfo = _root_.io.deephaven.proto.backplane.grpc.application.FieldInfo(
    typedTicket,
    fieldName,
    fieldDescription,
    applicationName,
    applicationId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.FieldInfo])
}
