// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.partitionedtable


object PartitionedTableServiceGrpc {
  val METHOD_PARTITION_BY: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest, io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.PartitionedTableService", "PartitionBy"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_MERGE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest, io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.PartitionedTableService", "Merge"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_GET_TABLE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest, io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.PartitionedTableService", "GetTable"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.PartitionedTableService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.javaDescriptor))
      .addMethod(METHOD_PARTITION_BY)
      .addMethod(METHOD_MERGE)
      .addMethod(METHOD_GET_TABLE)
      .build()
  
  /**
    * This service provides tools to create and query partitioned tables.
    */
  trait PartitionedTableService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PartitionedTableService] = PartitionedTableService
    /**
      * Transforms a table into a partitioned table, consisting of many separate tables, each individually
      * addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
      */
    def partitionBy(request: io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse]
    /**
      * Given a partitioned table, returns a table with the contents of all of the constituent tables.
      */
    def merge(request: io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]
    /**
      * Given a partitioned table and a row described by another table's contents, returns a table
      * that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
      * more than one is present, FAILED_PRECONDITION will be sent in response.
      *
      * If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
      * sent in response.
      *
      * The simplest way to generally use this is to subscribe to the key columns of the underlying
      * table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
      * desired keys, and pass that ticket to this service. After that request is sent (note that it
      * is not required to wait for it to complete), that new table ticket can be used to make this
      * GetTable request.
      */
    def getTable(request: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]
  }
  
  object PartitionedTableService extends _root_.scalapb.grpc.ServiceCompanion[PartitionedTableService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PartitionedTableService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: PartitionedTableService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_PARTITION_BY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse]) => {
          serviceImpl.partitionBy(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_MERGE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]) => {
          serviceImpl.merge(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_TABLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]) => {
          serviceImpl.getTable(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /**
    * This service provides tools to create and query partitioned tables.
    */
  trait PartitionedTableServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[PartitionedTableService] = PartitionedTableService
    /**
      * Transforms a table into a partitioned table, consisting of many separate tables, each individually
      * addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
      */
    def partitionBy(request: io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest): io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse
    /**
      * Given a partitioned table, returns a table with the contents of all of the constituent tables.
      */
    def merge(request: io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse
    /**
      * Given a partitioned table and a row described by another table's contents, returns a table
      * that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
      * more than one is present, FAILED_PRECONDITION will be sent in response.
      *
      * If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
      * sent in response.
      *
      * The simplest way to generally use this is to subscribe to the key columns of the underlying
      * table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
      * desired keys, and pass that ticket to this service. After that request is sent (note that it
      * is not required to wait for it to complete), that new table ticket can be used to make this
      * GetTable request.
      */
    def getTable(request: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse
  }
  
  class PartitionedTableServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PartitionedTableServiceBlockingStub](channel, options) with PartitionedTableServiceBlockingClient {
    /**
      * Transforms a table into a partitioned table, consisting of many separate tables, each individually
      * addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
      */
    override def partitionBy(request: io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest): io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_PARTITION_BY, options, request)
    }
    
    /**
      * Given a partitioned table, returns a table with the contents of all of the constituent tables.
      */
    override def merge(request: io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_MERGE, options, request)
    }
    
    /**
      * Given a partitioned table and a row described by another table's contents, returns a table
      * that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
      * more than one is present, FAILED_PRECONDITION will be sent in response.
      *
      * If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
      * sent in response.
      *
      * The simplest way to generally use this is to subscribe to the key columns of the underlying
      * table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
      * desired keys, and pass that ticket to this service. After that request is sent (note that it
      * is not required to wait for it to complete), that new table ticket can be used to make this
      * GetTable request.
      */
    override def getTable(request: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_TABLE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PartitionedTableServiceBlockingStub = new PartitionedTableServiceBlockingStub(channel, options)
  }
  
  class PartitionedTableServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[PartitionedTableServiceStub](channel, options) with PartitionedTableService {
    /**
      * Transforms a table into a partitioned table, consisting of many separate tables, each individually
      * addressable. The result will be a FetchObjectResponse populated with a PartitionedTable.
      */
    override def partitionBy(request: io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.partitionedtable.PartitionByResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_PARTITION_BY, options, request)
    }
    
    /**
      * Given a partitioned table, returns a table with the contents of all of the constituent tables.
      */
    override def merge(request: io.deephaven.proto.backplane.grpc.partitionedtable.MergeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_MERGE, options, request)
    }
    
    /**
      * Given a partitioned table and a row described by another table's contents, returns a table
      * that matched that row, if any. If none is present, NOT_FOUND will be sent in response. If
      * more than one is present, FAILED_PRECONDITION will be sent in response.
      *
      * If the provided key table has any number of rows other than one, INVALID_ARGUMENT will be
      * sent in response.
      *
      * The simplest way to generally use this is to subscribe to the key columns of the underlying
      * table of a given PartitionedTable, then use /FlightService/DoPut to create a table with the
      * desired keys, and pass that ticket to this service. After that request is sent (note that it
      * is not required to wait for it to complete), that new table ticket can be used to make this
      * GetTable request.
      */
    override def getTable(request: io.deephaven.proto.backplane.grpc.partitionedtable.GetTableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_TABLE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PartitionedTableServiceStub = new PartitionedTableServiceStub(channel, options)
  }
  
  object PartitionedTableServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[PartitionedTableServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): PartitionedTableServiceStub = new PartitionedTableServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[PartitionedTableServiceStub] = this
  }
  
  def bindService(serviceImpl: PartitionedTableService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = PartitionedTableService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): PartitionedTableServiceBlockingStub = new PartitionedTableServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): PartitionedTableServiceStub = new PartitionedTableServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.partitionedtable.PartitionedtableProto.javaDescriptor.getServices().get(0)
  
}