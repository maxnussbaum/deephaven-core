// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

/** Reusable window scale message for the UpdateBy rolling operations.
  */
@SerialVersionUID(0L)
final case class UpdateByWindowScale(
    `type`: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByWindowScale] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (`type`.ticks.isDefined) {
        val __value = `type`.ticks.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.time.isDefined) {
        val __value = `type`.time.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.ticks.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.time.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getTicks: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks = `type`.ticks.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks.defaultInstance)
    def withTicks(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks): UpdateByWindowScale = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Ticks(__v))
    def getTime: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime = `type`.time.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.defaultInstance)
    def withTime(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime): UpdateByWindowScale = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Time(__v))
    def clearType: UpdateByWindowScale = copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Empty)
    def withType(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type): UpdateByWindowScale = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.ticks.orNull
        case 2 => `type`.time.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.ticks.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => `type`.time.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByWindowScale])
}

object UpdateByWindowScale extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = {
    var __type: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Ticks(__type.ticks.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Time(__type.time.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale(
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale(
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Ticks(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Time(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(11)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(11)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks,
      _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale(
    `type` = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Empty
  )
  sealed trait Type extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTicks: _root_.scala.Boolean = false
    def isTime: _root_.scala.Boolean = false
    def ticks: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks] = _root_.scala.None
    def time: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime] = _root_.scala.None
  }
  object Type {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Ticks(value: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks) extends io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks
      override def isTicks: _root_.scala.Boolean = true
      override def ticks: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Time(value: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime) extends io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime
      override def isTime: _root_.scala.Boolean = true
      override def time: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  @SerialVersionUID(0L)
  final case class UpdateByWindowTicks(
      ticks: _root_.scala.Double = 0.0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByWindowTicks] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = ticks
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = ticks
          if (__v != 0.0) {
            _output__.writeDouble(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withTicks(__v: _root_.scala.Double): UpdateByWindowTicks = copy(ticks = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = ticks
            if (__t != 0.0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PDouble(ticks)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks.type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks])
  }
  
  object UpdateByWindowTicks extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks = {
      var __ticks: _root_.scala.Double = 0.0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __ticks = _input__.readDouble()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks(
          ticks = __ticks,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks(
          ticks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks(
      ticks = 0.0
    )
    implicit class UpdateByWindowTicksLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks](_l) {
      def ticks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.ticks)((c_, f_) => c_.copy(ticks = f_))
    }
    final val TICKS_FIELD_NUMBER = 1
    def of(
      ticks: _root_.scala.Double
    ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks(
      ticks
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTicks])
  }
  
  @SerialVersionUID(0L)
  final case class UpdateByWindowTime(
      column: _root_.scala.Predef.String = "",
      window: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateByWindowTime] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = column
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (window.nanos.isDefined) {
          val __value = window.nanos.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(2, __value)
        };
        if (window.durationString.isDefined) {
          val __value = window.durationString.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = column
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        window.nanos.foreach { __v =>
          val __m = __v
          _output__.writeSInt64(2, __m)
        };
        window.durationString.foreach { __v =>
          val __m = __v
          _output__.writeString(3, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withColumn(__v: _root_.scala.Predef.String): UpdateByWindowTime = copy(column = __v)
      def getNanos: _root_.scala.Long = window.nanos.getOrElse(0L)
      def withNanos(__v: _root_.scala.Long): UpdateByWindowTime = copy(window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Nanos(__v))
      def getDurationString: _root_.scala.Predef.String = window.durationString.getOrElse("")
      def withDurationString(__v: _root_.scala.Predef.String): UpdateByWindowTime = copy(window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.DurationString(__v))
      def clearWindow: UpdateByWindowTime = copy(window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Empty)
      def withWindow(__v: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window): UpdateByWindowTime = copy(window = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = column
            if (__t != "") __t else null
          }
          case 2 => window.nanos.orNull
          case 3 => window.durationString.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(column)
          case 2 => window.nanos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => window.durationString.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.type = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime])
  }
  
  object UpdateByWindowTime extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime = {
      var __column: _root_.scala.Predef.String = ""
      var __window: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __column = _input__.readStringRequireUtf8()
          case 16 =>
            __window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Nanos(_input__.readSInt64())
          case 26 =>
            __window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.DurationString(_input__.readStringRequireUtf8())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime(
          column = __column,
          window = __window,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime(
          column = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          window = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Nanos(_))
              .orElse[io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.DurationString(_)))
              .getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime(
      column = "",
      window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Empty
    )
    sealed trait Window extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isNanos: _root_.scala.Boolean = false
      def isDurationString: _root_.scala.Boolean = false
      def nanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      def durationString: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    }
    object Window {
      @SerialVersionUID(0L)
      case object Empty extends io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class Nanos(value: _root_.scala.Long) extends io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window {
        type ValueType = _root_.scala.Long
        override def isNanos: _root_.scala.Boolean = true
        override def nanos: _root_.scala.Option[_root_.scala.Long] = Some(value)
        override def number: _root_.scala.Int = 2
      }
      @SerialVersionUID(0L)
      final case class DurationString(value: _root_.scala.Predef.String) extends io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window {
        type ValueType = _root_.scala.Predef.String
        override def isDurationString: _root_.scala.Boolean = true
        override def durationString: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
        override def number: _root_.scala.Int = 3
      }
    }
    implicit class UpdateByWindowTimeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime](_l) {
      def column: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.column)((c_, f_) => c_.copy(column = f_))
      def nanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getNanos)((c_, f_) => c_.copy(window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.Nanos(f_)))
      def durationString: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDurationString)((c_, f_) => c_.copy(window = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window.DurationString(f_)))
      def window: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window] = field(_.window)((c_, f_) => c_.copy(window = f_))
    }
    final val COLUMN_FIELD_NUMBER = 1
    final val NANOS_FIELD_NUMBER = 2
    final val DURATION_STRING_FIELD_NUMBER = 3
    def of(
      column: _root_.scala.Predef.String,
      window: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime.Window
    ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime(
      column,
      window
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByWindowScale.UpdateByWindowTime])
  }
  
  implicit class UpdateByWindowScaleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale](_l) {
    def ticks: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTicks] = field(_.getTicks)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Ticks(f_)))
    def time: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.UpdateByWindowTime] = field(_.getTime)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type.Time(f_)))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val TICKS_FIELD_NUMBER = 1
  final val TIME_FIELD_NUMBER = 2
  def of(
    `type`: io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale.Type
  ): _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale = _root_.io.deephaven.proto.backplane.grpc.table.UpdateByWindowScale(
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateByWindowScale])
}
