// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class BatchTableRequest(
    ops: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BatchTableRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      ops.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ops.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def clearOps = copy(ops = _root_.scala.Seq.empty)
    def addOps(__vs: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation *): BatchTableRequest = addAllOps(__vs)
    def addAllOps(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]): BatchTableRequest = copy(ops = ops ++ __vs)
    def withOps(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]): BatchTableRequest = copy(ops = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ops
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(ops.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.type = io.deephaven.proto.backplane.grpc.table.BatchTableRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.BatchTableRequest])
}

object BatchTableRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.BatchTableRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.BatchTableRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.BatchTableRequest = {
    val __ops: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __ops += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.BatchTableRequest(
        ops = __ops.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.BatchTableRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.BatchTableRequest(
        ops = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(64)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(64)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.BatchTableRequest(
    ops = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class Operation(
      op: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Operation] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (op.emptyTable.isDefined) {
          val __value = op.emptyTable.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.timeTable.isDefined) {
          val __value = op.timeTable.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.dropColumns.isDefined) {
          val __value = op.dropColumns.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.update.isDefined) {
          val __value = op.update.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.lazyUpdate.isDefined) {
          val __value = op.lazyUpdate.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.view.isDefined) {
          val __value = op.view.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.updateView.isDefined) {
          val __value = op.updateView.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.select.isDefined) {
          val __value = op.select.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.selectDistinct.isDefined) {
          val __value = op.selectDistinct.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.filter.isDefined) {
          val __value = op.filter.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.unstructuredFilter.isDefined) {
          val __value = op.unstructuredFilter.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.sort.isDefined) {
          val __value = op.sort.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.head.isDefined) {
          val __value = op.head.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.tail.isDefined) {
          val __value = op.tail.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.headBy.isDefined) {
          val __value = op.headBy.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.tailBy.isDefined) {
          val __value = op.tailBy.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.ungroup.isDefined) {
          val __value = op.ungroup.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.merge.isDefined) {
          val __value = op.merge.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.comboAggregate.isDefined) {
          val __value = op.comboAggregate.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.flatten.isDefined) {
          val __value = op.flatten.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.runChartDownsample.isDefined) {
          val __value = op.runChartDownsample.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.crossJoin.isDefined) {
          val __value = op.crossJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.naturalJoin.isDefined) {
          val __value = op.naturalJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.exactJoin.isDefined) {
          val __value = op.exactJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.leftJoin.isDefined) {
          val __value = op.leftJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.asOfJoin.isDefined) {
          val __value = op.asOfJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.fetchTable.isDefined) {
          val __value = op.fetchTable.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.applyPreviewColumns.isDefined) {
          val __value = op.applyPreviewColumns.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.createInputTable.isDefined) {
          val __value = op.createInputTable.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.updateBy.isDefined) {
          val __value = op.updateBy.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.whereIn.isDefined) {
          val __value = op.whereIn.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.aggregateAll.isDefined) {
          val __value = op.aggregateAll.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.aggregate.isDefined) {
          val __value = op.aggregate.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.snapshot.isDefined) {
          val __value = op.snapshot.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.snapshotWhen.isDefined) {
          val __value = op.snapshotWhen.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.metaTable.isDefined) {
          val __value = op.metaTable.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.rangeJoin.isDefined) {
          val __value = op.rangeJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.aj.isDefined) {
          val __value = op.aj.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.raj.isDefined) {
          val __value = op.raj.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.columnStatistics.isDefined) {
          val __value = op.columnStatistics.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.multiJoin.isDefined) {
          val __value = op.multiJoin.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (op.slice.isDefined) {
          val __value = op.slice.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        op.emptyTable.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.timeTable.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.dropColumns.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.update.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.lazyUpdate.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.view.foreach { __v =>
          val __m = __v
          _output__.writeTag(6, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.updateView.foreach { __v =>
          val __m = __v
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.select.foreach { __v =>
          val __m = __v
          _output__.writeTag(8, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.selectDistinct.foreach { __v =>
          val __m = __v
          _output__.writeTag(9, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.filter.foreach { __v =>
          val __m = __v
          _output__.writeTag(10, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.unstructuredFilter.foreach { __v =>
          val __m = __v
          _output__.writeTag(11, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.sort.foreach { __v =>
          val __m = __v
          _output__.writeTag(12, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.head.foreach { __v =>
          val __m = __v
          _output__.writeTag(13, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.tail.foreach { __v =>
          val __m = __v
          _output__.writeTag(14, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.headBy.foreach { __v =>
          val __m = __v
          _output__.writeTag(15, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.tailBy.foreach { __v =>
          val __m = __v
          _output__.writeTag(16, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.ungroup.foreach { __v =>
          val __m = __v
          _output__.writeTag(17, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.merge.foreach { __v =>
          val __m = __v
          _output__.writeTag(18, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.comboAggregate.foreach { __v =>
          val __m = __v
          _output__.writeTag(19, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.flatten.foreach { __v =>
          val __m = __v
          _output__.writeTag(21, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.runChartDownsample.foreach { __v =>
          val __m = __v
          _output__.writeTag(22, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.crossJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(23, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.naturalJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(24, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.exactJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(25, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.leftJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(26, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.asOfJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(27, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.fetchTable.foreach { __v =>
          val __m = __v
          _output__.writeTag(28, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.applyPreviewColumns.foreach { __v =>
          val __m = __v
          _output__.writeTag(30, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.createInputTable.foreach { __v =>
          val __m = __v
          _output__.writeTag(31, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.updateBy.foreach { __v =>
          val __m = __v
          _output__.writeTag(32, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.whereIn.foreach { __v =>
          val __m = __v
          _output__.writeTag(33, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.aggregateAll.foreach { __v =>
          val __m = __v
          _output__.writeTag(34, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.aggregate.foreach { __v =>
          val __m = __v
          _output__.writeTag(35, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.snapshot.foreach { __v =>
          val __m = __v
          _output__.writeTag(36, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.snapshotWhen.foreach { __v =>
          val __m = __v
          _output__.writeTag(37, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.metaTable.foreach { __v =>
          val __m = __v
          _output__.writeTag(38, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.rangeJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(39, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.aj.foreach { __v =>
          val __m = __v
          _output__.writeTag(40, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.raj.foreach { __v =>
          val __m = __v
          _output__.writeTag(41, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.columnStatistics.foreach { __v =>
          val __m = __v
          _output__.writeTag(42, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.multiJoin.foreach { __v =>
          val __m = __v
          _output__.writeTag(43, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        op.slice.foreach { __v =>
          val __m = __v
          _output__.writeTag(44, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getEmptyTable: io.deephaven.proto.backplane.grpc.table.EmptyTableRequest = op.emptyTable.getOrElse(io.deephaven.proto.backplane.grpc.table.EmptyTableRequest.defaultInstance)
      def withEmptyTable(__v: io.deephaven.proto.backplane.grpc.table.EmptyTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.EmptyTable(__v))
      def getTimeTable: io.deephaven.proto.backplane.grpc.table.TimeTableRequest = op.timeTable.getOrElse(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.defaultInstance)
      def withTimeTable(__v: io.deephaven.proto.backplane.grpc.table.TimeTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TimeTable(__v))
      def getDropColumns: io.deephaven.proto.backplane.grpc.table.DropColumnsRequest = op.dropColumns.getOrElse(io.deephaven.proto.backplane.grpc.table.DropColumnsRequest.defaultInstance)
      def withDropColumns(__v: io.deephaven.proto.backplane.grpc.table.DropColumnsRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.DropColumns(__v))
      def getUpdate: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest = op.update.getOrElse(io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest.defaultInstance)
      def withUpdate(__v: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Update(__v))
      def getLazyUpdate: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest = op.lazyUpdate.getOrElse(io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest.defaultInstance)
      def withLazyUpdate(__v: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LazyUpdate(__v))
      def getView: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest = op.view.getOrElse(io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest.defaultInstance)
      def withView(__v: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.View(__v))
      def getUpdateView: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest = op.updateView.getOrElse(io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest.defaultInstance)
      def withUpdateView(__v: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateView(__v))
      def getSelect: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest = op.select.getOrElse(io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest.defaultInstance)
      def withSelect(__v: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Select(__v))
      def getSelectDistinct: io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest = op.selectDistinct.getOrElse(io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest.defaultInstance)
      def withSelectDistinct(__v: io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SelectDistinct(__v))
      def getFilter: io.deephaven.proto.backplane.grpc.table.FilterTableRequest = op.filter.getOrElse(io.deephaven.proto.backplane.grpc.table.FilterTableRequest.defaultInstance)
      def withFilter(__v: io.deephaven.proto.backplane.grpc.table.FilterTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Filter(__v))
      def getUnstructuredFilter: io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest = op.unstructuredFilter.getOrElse(io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest.defaultInstance)
      def withUnstructuredFilter(__v: io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UnstructuredFilter(__v))
      def getSort: io.deephaven.proto.backplane.grpc.table.SortTableRequest = op.sort.getOrElse(io.deephaven.proto.backplane.grpc.table.SortTableRequest.defaultInstance)
      def withSort(__v: io.deephaven.proto.backplane.grpc.table.SortTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Sort(__v))
      def getHead: io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest = op.head.getOrElse(io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest.defaultInstance)
      def withHead(__v: io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Head(__v))
      def getTail: io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest = op.tail.getOrElse(io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest.defaultInstance)
      def withTail(__v: io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Tail(__v))
      def getHeadBy: io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest = op.headBy.getOrElse(io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest.defaultInstance)
      def withHeadBy(__v: io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.HeadBy(__v))
      def getTailBy: io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest = op.tailBy.getOrElse(io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest.defaultInstance)
      def withTailBy(__v: io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TailBy(__v))
      def getUngroup: io.deephaven.proto.backplane.grpc.table.UngroupRequest = op.ungroup.getOrElse(io.deephaven.proto.backplane.grpc.table.UngroupRequest.defaultInstance)
      def withUngroup(__v: io.deephaven.proto.backplane.grpc.table.UngroupRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Ungroup(__v))
      def getMerge: io.deephaven.proto.backplane.grpc.table.MergeTablesRequest = op.merge.getOrElse(io.deephaven.proto.backplane.grpc.table.MergeTablesRequest.defaultInstance)
      def withMerge(__v: io.deephaven.proto.backplane.grpc.table.MergeTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Merge(__v))
      def getComboAggregate: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest = op.comboAggregate.getOrElse(io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.defaultInstance)
      def withComboAggregate(__v: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ComboAggregate(__v))
      def getFlatten: io.deephaven.proto.backplane.grpc.table.FlattenRequest = op.flatten.getOrElse(io.deephaven.proto.backplane.grpc.table.FlattenRequest.defaultInstance)
      def withFlatten(__v: io.deephaven.proto.backplane.grpc.table.FlattenRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Flatten(__v))
      def getRunChartDownsample: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest = op.runChartDownsample.getOrElse(io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.defaultInstance)
      def withRunChartDownsample(__v: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RunChartDownsample(__v))
      def getCrossJoin: io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest = op.crossJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest.defaultInstance)
      def withCrossJoin(__v: io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CrossJoin(__v))
      def getNaturalJoin: io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest = op.naturalJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest.defaultInstance)
      def withNaturalJoin(__v: io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.NaturalJoin(__v))
      def getExactJoin: io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest = op.exactJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest.defaultInstance)
      def withExactJoin(__v: io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ExactJoin(__v))
      def getLeftJoin: io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest = op.leftJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest.defaultInstance)
      def withLeftJoin(__v: io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LeftJoin(__v))
      def getAsOfJoin: io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest = op.asOfJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest.defaultInstance)
      def withAsOfJoin(__v: io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AsOfJoin(__v))
      def getFetchTable: io.deephaven.proto.backplane.grpc.table.FetchTableRequest = op.fetchTable.getOrElse(io.deephaven.proto.backplane.grpc.table.FetchTableRequest.defaultInstance)
      def withFetchTable(__v: io.deephaven.proto.backplane.grpc.table.FetchTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.FetchTable(__v))
      def getApplyPreviewColumns: io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest = op.applyPreviewColumns.getOrElse(io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest.defaultInstance)
      def withApplyPreviewColumns(__v: io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ApplyPreviewColumns(__v))
      def getCreateInputTable: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest = op.createInputTable.getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.defaultInstance)
      def withCreateInputTable(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CreateInputTable(__v))
      def getUpdateBy: io.deephaven.proto.backplane.grpc.table.UpdateByRequest = op.updateBy.getOrElse(io.deephaven.proto.backplane.grpc.table.UpdateByRequest.defaultInstance)
      def withUpdateBy(__v: io.deephaven.proto.backplane.grpc.table.UpdateByRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateBy(__v))
      def getWhereIn: io.deephaven.proto.backplane.grpc.table.WhereInRequest = op.whereIn.getOrElse(io.deephaven.proto.backplane.grpc.table.WhereInRequest.defaultInstance)
      def withWhereIn(__v: io.deephaven.proto.backplane.grpc.table.WhereInRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.WhereIn(__v))
      def getAggregateAll: io.deephaven.proto.backplane.grpc.table.AggregateAllRequest = op.aggregateAll.getOrElse(io.deephaven.proto.backplane.grpc.table.AggregateAllRequest.defaultInstance)
      def withAggregateAll(__v: io.deephaven.proto.backplane.grpc.table.AggregateAllRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AggregateAll(__v))
      def getAggregate: io.deephaven.proto.backplane.grpc.table.AggregateRequest = op.aggregate.getOrElse(io.deephaven.proto.backplane.grpc.table.AggregateRequest.defaultInstance)
      def withAggregate(__v: io.deephaven.proto.backplane.grpc.table.AggregateRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aggregate(__v))
      def getSnapshot: io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest = op.snapshot.getOrElse(io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest.defaultInstance)
      def withSnapshot(__v: io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Snapshot(__v))
      def getSnapshotWhen: io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest = op.snapshotWhen.getOrElse(io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest.defaultInstance)
      def withSnapshotWhen(__v: io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SnapshotWhen(__v))
      def getMetaTable: io.deephaven.proto.backplane.grpc.table.MetaTableRequest = op.metaTable.getOrElse(io.deephaven.proto.backplane.grpc.table.MetaTableRequest.defaultInstance)
      def withMetaTable(__v: io.deephaven.proto.backplane.grpc.table.MetaTableRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MetaTable(__v))
      def getRangeJoin: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest = op.rangeJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.defaultInstance)
      def withRangeJoin(__v: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RangeJoin(__v))
      def getAj: io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest = op.aj.getOrElse(io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest.defaultInstance)
      def withAj(__v: io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aj(__v))
      def getRaj: io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest = op.raj.getOrElse(io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest.defaultInstance)
      def withRaj(__v: io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Raj(__v))
      def getColumnStatistics: io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest = op.columnStatistics.getOrElse(io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest.defaultInstance)
      def withColumnStatistics(__v: io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ColumnStatistics(__v))
      def getMultiJoin: io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest = op.multiJoin.getOrElse(io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest.defaultInstance)
      def withMultiJoin(__v: io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MultiJoin(__v))
      def getSlice: io.deephaven.proto.backplane.grpc.table.SliceRequest = op.slice.getOrElse(io.deephaven.proto.backplane.grpc.table.SliceRequest.defaultInstance)
      def withSlice(__v: io.deephaven.proto.backplane.grpc.table.SliceRequest): Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Slice(__v))
      def clearOp: Operation = copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Empty)
      def withOp(__v: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op): Operation = copy(op = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => op.emptyTable.orNull
          case 2 => op.timeTable.orNull
          case 3 => op.dropColumns.orNull
          case 4 => op.update.orNull
          case 5 => op.lazyUpdate.orNull
          case 6 => op.view.orNull
          case 7 => op.updateView.orNull
          case 8 => op.select.orNull
          case 9 => op.selectDistinct.orNull
          case 10 => op.filter.orNull
          case 11 => op.unstructuredFilter.orNull
          case 12 => op.sort.orNull
          case 13 => op.head.orNull
          case 14 => op.tail.orNull
          case 15 => op.headBy.orNull
          case 16 => op.tailBy.orNull
          case 17 => op.ungroup.orNull
          case 18 => op.merge.orNull
          case 19 => op.comboAggregate.orNull
          case 21 => op.flatten.orNull
          case 22 => op.runChartDownsample.orNull
          case 23 => op.crossJoin.orNull
          case 24 => op.naturalJoin.orNull
          case 25 => op.exactJoin.orNull
          case 26 => op.leftJoin.orNull
          case 27 => op.asOfJoin.orNull
          case 28 => op.fetchTable.orNull
          case 30 => op.applyPreviewColumns.orNull
          case 31 => op.createInputTable.orNull
          case 32 => op.updateBy.orNull
          case 33 => op.whereIn.orNull
          case 34 => op.aggregateAll.orNull
          case 35 => op.aggregate.orNull
          case 36 => op.snapshot.orNull
          case 37 => op.snapshotWhen.orNull
          case 38 => op.metaTable.orNull
          case 39 => op.rangeJoin.orNull
          case 40 => op.aj.orNull
          case 41 => op.raj.orNull
          case 42 => op.columnStatistics.orNull
          case 43 => op.multiJoin.orNull
          case 44 => op.slice.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => op.emptyTable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => op.timeTable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => op.dropColumns.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => op.update.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => op.lazyUpdate.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => op.view.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => op.updateView.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 8 => op.select.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 9 => op.selectDistinct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => op.filter.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => op.unstructuredFilter.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => op.sort.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 13 => op.head.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 14 => op.tail.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 15 => op.headBy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 16 => op.tailBy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 17 => op.ungroup.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 18 => op.merge.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 19 => op.comboAggregate.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 21 => op.flatten.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 22 => op.runChartDownsample.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 23 => op.crossJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 24 => op.naturalJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 25 => op.exactJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 26 => op.leftJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 27 => op.asOfJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 28 => op.fetchTable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 30 => op.applyPreviewColumns.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 31 => op.createInputTable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 32 => op.updateBy.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 33 => op.whereIn.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 34 => op.aggregateAll.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 35 => op.aggregate.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 36 => op.snapshot.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 37 => op.snapshotWhen.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 38 => op.metaTable.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 39 => op.rangeJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 40 => op.aj.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 41 => op.raj.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 42 => op.columnStatistics.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 43 => op.multiJoin.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 44 => op.slice.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.type = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation])
  }
  
  object Operation extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation = {
      var __op: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.EmptyTable(__op.emptyTable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.EmptyTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TimeTable(__op.timeTable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TimeTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.DropColumns(__op.dropColumns.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.DropColumnsRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 34 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Update(__op.update.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LazyUpdate(__op.lazyUpdate.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 50 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.View(__op.view.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 58 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateView(__op.updateView.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 66 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Select(__op.select.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 74 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SelectDistinct(__op.selectDistinct.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 82 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Filter(__op.filter.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.FilterTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 90 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UnstructuredFilter(__op.unstructuredFilter.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 98 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Sort(__op.sort.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SortTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 106 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Head(__op.head.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 114 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Tail(__op.tail.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 122 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.HeadBy(__op.headBy.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 130 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TailBy(__op.tailBy.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 138 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Ungroup(__op.ungroup.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UngroupRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 146 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Merge(__op.merge.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.MergeTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 154 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ComboAggregate(__op.comboAggregate.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 170 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Flatten(__op.flatten.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.FlattenRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 178 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RunChartDownsample(__op.runChartDownsample.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 186 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CrossJoin(__op.crossJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 194 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.NaturalJoin(__op.naturalJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 202 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ExactJoin(__op.exactJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 210 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LeftJoin(__op.leftJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 218 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AsOfJoin(__op.asOfJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 226 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.FetchTable(__op.fetchTable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.FetchTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 242 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ApplyPreviewColumns(__op.applyPreviewColumns.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 250 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CreateInputTable(__op.createInputTable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 258 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateBy(__op.updateBy.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.UpdateByRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 266 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.WhereIn(__op.whereIn.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.WhereInRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 274 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AggregateAll(__op.aggregateAll.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggregateAllRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 282 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aggregate(__op.aggregate.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggregateRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 290 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Snapshot(__op.snapshot.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 298 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SnapshotWhen(__op.snapshotWhen.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 306 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MetaTable(__op.metaTable.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.MetaTableRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 314 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RangeJoin(__op.rangeJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 322 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aj(__op.aj.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 330 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Raj(__op.raj.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 338 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ColumnStatistics(__op.columnStatistics.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 346 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MultiJoin(__op.multiJoin.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 354 =>
            __op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Slice(__op.slice.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SliceRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation(
          op = __op,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation(
          op = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.EmptyTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.EmptyTable(_))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TimeTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TimeTable(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.DropColumnsRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.DropColumns(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Update(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LazyUpdate(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.View(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateView(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Select(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SelectDistinct(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FilterTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Filter(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UnstructuredFilter(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SortTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Sort(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Head(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Tail(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.HeadBy(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TailBy(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UngroupRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Ungroup(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MergeTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Merge(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ComboAggregate(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FlattenRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Flatten(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RunChartDownsample(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CrossJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(24).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.NaturalJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(25).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ExactJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(26).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LeftJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(27).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AsOfJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(28).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FetchTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.FetchTable(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(30).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ApplyPreviewColumns(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(31).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CreateInputTable(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(32).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateBy(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(33).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.WhereInRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.WhereIn(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(34).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggregateAllRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AggregateAll(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(35).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggregateRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aggregate(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(36).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Snapshot(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(37).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SnapshotWhen(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(38).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MetaTableRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MetaTable(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(39).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RangeJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(40).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aj(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(41).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Raj(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(42).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ColumnStatistics(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(43).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MultiJoin(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op](__fieldsMap.get(scalaDescriptor.findFieldByNumber(44).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SliceRequest]]).map(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Slice(_)))
              .getOrElse(io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.grpc.table.EmptyTableRequest
        case 2 => __out = io.deephaven.proto.backplane.grpc.table.TimeTableRequest
        case 3 => __out = io.deephaven.proto.backplane.grpc.table.DropColumnsRequest
        case 4 => __out = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        case 5 => __out = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        case 6 => __out = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        case 7 => __out = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        case 8 => __out = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        case 9 => __out = io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest
        case 10 => __out = io.deephaven.proto.backplane.grpc.table.FilterTableRequest
        case 11 => __out = io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest
        case 12 => __out = io.deephaven.proto.backplane.grpc.table.SortTableRequest
        case 13 => __out = io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest
        case 14 => __out = io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest
        case 15 => __out = io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest
        case 16 => __out = io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest
        case 17 => __out = io.deephaven.proto.backplane.grpc.table.UngroupRequest
        case 18 => __out = io.deephaven.proto.backplane.grpc.table.MergeTablesRequest
        case 19 => __out = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest
        case 21 => __out = io.deephaven.proto.backplane.grpc.table.FlattenRequest
        case 22 => __out = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest
        case 23 => __out = io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest
        case 24 => __out = io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest
        case 25 => __out = io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest
        case 26 => __out = io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest
        case 27 => __out = io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest
        case 28 => __out = io.deephaven.proto.backplane.grpc.table.FetchTableRequest
        case 30 => __out = io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest
        case 31 => __out = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest
        case 32 => __out = io.deephaven.proto.backplane.grpc.table.UpdateByRequest
        case 33 => __out = io.deephaven.proto.backplane.grpc.table.WhereInRequest
        case 34 => __out = io.deephaven.proto.backplane.grpc.table.AggregateAllRequest
        case 35 => __out = io.deephaven.proto.backplane.grpc.table.AggregateRequest
        case 36 => __out = io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest
        case 37 => __out = io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest
        case 38 => __out = io.deephaven.proto.backplane.grpc.table.MetaTableRequest
        case 39 => __out = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest
        case 40 => __out = io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest
        case 41 => __out = io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest
        case 42 => __out = io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest
        case 43 => __out = io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest
        case 44 => __out = io.deephaven.proto.backplane.grpc.table.SliceRequest
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation(
      op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Empty
    )
    sealed trait Op extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isEmptyTable: _root_.scala.Boolean = false
      def isTimeTable: _root_.scala.Boolean = false
      def isDropColumns: _root_.scala.Boolean = false
      def isUpdate: _root_.scala.Boolean = false
      def isLazyUpdate: _root_.scala.Boolean = false
      def isView: _root_.scala.Boolean = false
      def isUpdateView: _root_.scala.Boolean = false
      def isSelect: _root_.scala.Boolean = false
      def isSelectDistinct: _root_.scala.Boolean = false
      def isFilter: _root_.scala.Boolean = false
      def isUnstructuredFilter: _root_.scala.Boolean = false
      def isSort: _root_.scala.Boolean = false
      def isHead: _root_.scala.Boolean = false
      def isTail: _root_.scala.Boolean = false
      def isHeadBy: _root_.scala.Boolean = false
      def isTailBy: _root_.scala.Boolean = false
      def isUngroup: _root_.scala.Boolean = false
      def isMerge: _root_.scala.Boolean = false
      def isComboAggregate: _root_.scala.Boolean = false
      def isFlatten: _root_.scala.Boolean = false
      def isRunChartDownsample: _root_.scala.Boolean = false
      def isCrossJoin: _root_.scala.Boolean = false
      def isNaturalJoin: _root_.scala.Boolean = false
      def isExactJoin: _root_.scala.Boolean = false
      def isLeftJoin: _root_.scala.Boolean = false
      def isAsOfJoin: _root_.scala.Boolean = false
      def isFetchTable: _root_.scala.Boolean = false
      def isApplyPreviewColumns: _root_.scala.Boolean = false
      def isCreateInputTable: _root_.scala.Boolean = false
      def isUpdateBy: _root_.scala.Boolean = false
      def isWhereIn: _root_.scala.Boolean = false
      def isAggregateAll: _root_.scala.Boolean = false
      def isAggregate: _root_.scala.Boolean = false
      def isSnapshot: _root_.scala.Boolean = false
      def isSnapshotWhen: _root_.scala.Boolean = false
      def isMetaTable: _root_.scala.Boolean = false
      def isRangeJoin: _root_.scala.Boolean = false
      def isAj: _root_.scala.Boolean = false
      def isRaj: _root_.scala.Boolean = false
      def isColumnStatistics: _root_.scala.Boolean = false
      def isMultiJoin: _root_.scala.Boolean = false
      def isSlice: _root_.scala.Boolean = false
      def emptyTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.EmptyTableRequest] = _root_.scala.None
      def timeTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TimeTableRequest] = _root_.scala.None
      def dropColumns: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.DropColumnsRequest] = _root_.scala.None
      def update: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = _root_.scala.None
      def lazyUpdate: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = _root_.scala.None
      def view: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = _root_.scala.None
      def updateView: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = _root_.scala.None
      def select: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = _root_.scala.None
      def selectDistinct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest] = _root_.scala.None
      def filter: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FilterTableRequest] = _root_.scala.None
      def unstructuredFilter: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest] = _root_.scala.None
      def sort: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SortTableRequest] = _root_.scala.None
      def head: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest] = _root_.scala.None
      def tail: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest] = _root_.scala.None
      def headBy: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest] = _root_.scala.None
      def tailBy: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest] = _root_.scala.None
      def ungroup: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UngroupRequest] = _root_.scala.None
      def merge: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MergeTablesRequest] = _root_.scala.None
      def comboAggregate: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest] = _root_.scala.None
      def flatten: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FlattenRequest] = _root_.scala.None
      def runChartDownsample: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest] = _root_.scala.None
      def crossJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest] = _root_.scala.None
      def naturalJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest] = _root_.scala.None
      def exactJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest] = _root_.scala.None
      def leftJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest] = _root_.scala.None
      def asOfJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest] = _root_.scala.None
      def fetchTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FetchTableRequest] = _root_.scala.None
      def applyPreviewColumns: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest] = _root_.scala.None
      def createInputTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest] = _root_.scala.None
      def updateBy: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest] = _root_.scala.None
      def whereIn: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.WhereInRequest] = _root_.scala.None
      def aggregateAll: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggregateAllRequest] = _root_.scala.None
      def aggregate: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggregateRequest] = _root_.scala.None
      def snapshot: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest] = _root_.scala.None
      def snapshotWhen: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest] = _root_.scala.None
      def metaTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MetaTableRequest] = _root_.scala.None
      def rangeJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest] = _root_.scala.None
      def aj: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest] = _root_.scala.None
      def raj: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest] = _root_.scala.None
      def columnStatistics: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest] = _root_.scala.None
      def multiJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest] = _root_.scala.None
      def slice: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SliceRequest] = _root_.scala.None
    }
    object Op {
      @SerialVersionUID(0L)
      case object Empty extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class EmptyTable(value: io.deephaven.proto.backplane.grpc.table.EmptyTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.EmptyTableRequest
        override def isEmptyTable: _root_.scala.Boolean = true
        override def emptyTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.EmptyTableRequest] = Some(value)
        override def number: _root_.scala.Int = 1
      }
      @SerialVersionUID(0L)
      final case class TimeTable(value: io.deephaven.proto.backplane.grpc.table.TimeTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.TimeTableRequest
        override def isTimeTable: _root_.scala.Boolean = true
        override def timeTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TimeTableRequest] = Some(value)
        override def number: _root_.scala.Int = 2
      }
      @SerialVersionUID(0L)
      final case class DropColumns(value: io.deephaven.proto.backplane.grpc.table.DropColumnsRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.DropColumnsRequest
        override def isDropColumns: _root_.scala.Boolean = true
        override def dropColumns: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.DropColumnsRequest] = Some(value)
        override def number: _root_.scala.Int = 3
      }
      @SerialVersionUID(0L)
      final case class Update(value: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        override def isUpdate: _root_.scala.Boolean = true
        override def update: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = Some(value)
        override def number: _root_.scala.Int = 4
      }
      @SerialVersionUID(0L)
      final case class LazyUpdate(value: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        override def isLazyUpdate: _root_.scala.Boolean = true
        override def lazyUpdate: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = Some(value)
        override def number: _root_.scala.Int = 5
      }
      @SerialVersionUID(0L)
      final case class View(value: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        override def isView: _root_.scala.Boolean = true
        override def view: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = Some(value)
        override def number: _root_.scala.Int = 6
      }
      @SerialVersionUID(0L)
      final case class UpdateView(value: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        override def isUpdateView: _root_.scala.Boolean = true
        override def updateView: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = Some(value)
        override def number: _root_.scala.Int = 7
      }
      @SerialVersionUID(0L)
      final case class Select(value: io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest
        override def isSelect: _root_.scala.Boolean = true
        override def select: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = Some(value)
        override def number: _root_.scala.Int = 8
      }
      @SerialVersionUID(0L)
      final case class SelectDistinct(value: io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest
        override def isSelectDistinct: _root_.scala.Boolean = true
        override def selectDistinct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest] = Some(value)
        override def number: _root_.scala.Int = 9
      }
      @SerialVersionUID(0L)
      final case class Filter(value: io.deephaven.proto.backplane.grpc.table.FilterTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.FilterTableRequest
        override def isFilter: _root_.scala.Boolean = true
        override def filter: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FilterTableRequest] = Some(value)
        override def number: _root_.scala.Int = 10
      }
      @SerialVersionUID(0L)
      final case class UnstructuredFilter(value: io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest
        override def isUnstructuredFilter: _root_.scala.Boolean = true
        override def unstructuredFilter: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest] = Some(value)
        override def number: _root_.scala.Int = 11
      }
      @SerialVersionUID(0L)
      final case class Sort(value: io.deephaven.proto.backplane.grpc.table.SortTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SortTableRequest
        override def isSort: _root_.scala.Boolean = true
        override def sort: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SortTableRequest] = Some(value)
        override def number: _root_.scala.Int = 12
      }
      @SerialVersionUID(0L)
      final case class Head(value: io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest
        override def isHead: _root_.scala.Boolean = true
        override def head: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest] = Some(value)
        override def number: _root_.scala.Int = 13
      }
      @SerialVersionUID(0L)
      final case class Tail(value: io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest
        override def isTail: _root_.scala.Boolean = true
        override def tail: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest] = Some(value)
        override def number: _root_.scala.Int = 14
      }
      @SerialVersionUID(0L)
      final case class HeadBy(value: io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest
        override def isHeadBy: _root_.scala.Boolean = true
        override def headBy: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest] = Some(value)
        override def number: _root_.scala.Int = 15
      }
      @SerialVersionUID(0L)
      final case class TailBy(value: io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest
        override def isTailBy: _root_.scala.Boolean = true
        override def tailBy: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest] = Some(value)
        override def number: _root_.scala.Int = 16
      }
      @SerialVersionUID(0L)
      final case class Ungroup(value: io.deephaven.proto.backplane.grpc.table.UngroupRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.UngroupRequest
        override def isUngroup: _root_.scala.Boolean = true
        override def ungroup: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UngroupRequest] = Some(value)
        override def number: _root_.scala.Int = 17
      }
      @SerialVersionUID(0L)
      final case class Merge(value: io.deephaven.proto.backplane.grpc.table.MergeTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.MergeTablesRequest
        override def isMerge: _root_.scala.Boolean = true
        override def merge: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MergeTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 18
      }
      @SerialVersionUID(0L)
      final case class ComboAggregate(value: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest
        override def isComboAggregate: _root_.scala.Boolean = true
        override def comboAggregate: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest] = Some(value)
        override def number: _root_.scala.Int = 19
      }
      @SerialVersionUID(0L)
      final case class Flatten(value: io.deephaven.proto.backplane.grpc.table.FlattenRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.FlattenRequest
        override def isFlatten: _root_.scala.Boolean = true
        override def flatten: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FlattenRequest] = Some(value)
        override def number: _root_.scala.Int = 21
      }
      @SerialVersionUID(0L)
      final case class RunChartDownsample(value: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest
        override def isRunChartDownsample: _root_.scala.Boolean = true
        override def runChartDownsample: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest] = Some(value)
        override def number: _root_.scala.Int = 22
      }
      @SerialVersionUID(0L)
      final case class CrossJoin(value: io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest
        override def isCrossJoin: _root_.scala.Boolean = true
        override def crossJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 23
      }
      @SerialVersionUID(0L)
      final case class NaturalJoin(value: io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest
        override def isNaturalJoin: _root_.scala.Boolean = true
        override def naturalJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 24
      }
      @SerialVersionUID(0L)
      final case class ExactJoin(value: io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest
        override def isExactJoin: _root_.scala.Boolean = true
        override def exactJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 25
      }
      @SerialVersionUID(0L)
      final case class LeftJoin(value: io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest
        override def isLeftJoin: _root_.scala.Boolean = true
        override def leftJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 26
      }
      @SerialVersionUID(0L) @scala.deprecated(message="Marked as deprecated in proto file", "")
      final case class AsOfJoin(value: io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest
        override def isAsOfJoin: _root_.scala.Boolean = true
        override def asOfJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 27
      }
      @SerialVersionUID(0L)
      final case class FetchTable(value: io.deephaven.proto.backplane.grpc.table.FetchTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.FetchTableRequest
        override def isFetchTable: _root_.scala.Boolean = true
        override def fetchTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.FetchTableRequest] = Some(value)
        override def number: _root_.scala.Int = 28
      }
      @SerialVersionUID(0L)
      final case class ApplyPreviewColumns(value: io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest
        override def isApplyPreviewColumns: _root_.scala.Boolean = true
        override def applyPreviewColumns: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest] = Some(value)
        override def number: _root_.scala.Int = 30
      }
      @SerialVersionUID(0L)
      final case class CreateInputTable(value: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest
        override def isCreateInputTable: _root_.scala.Boolean = true
        override def createInputTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest] = Some(value)
        override def number: _root_.scala.Int = 31
      }
      @SerialVersionUID(0L)
      final case class UpdateBy(value: io.deephaven.proto.backplane.grpc.table.UpdateByRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.UpdateByRequest
        override def isUpdateBy: _root_.scala.Boolean = true
        override def updateBy: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.UpdateByRequest] = Some(value)
        override def number: _root_.scala.Int = 32
      }
      @SerialVersionUID(0L)
      final case class WhereIn(value: io.deephaven.proto.backplane.grpc.table.WhereInRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.WhereInRequest
        override def isWhereIn: _root_.scala.Boolean = true
        override def whereIn: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.WhereInRequest] = Some(value)
        override def number: _root_.scala.Int = 33
      }
      @SerialVersionUID(0L)
      final case class AggregateAll(value: io.deephaven.proto.backplane.grpc.table.AggregateAllRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.AggregateAllRequest
        override def isAggregateAll: _root_.scala.Boolean = true
        override def aggregateAll: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggregateAllRequest] = Some(value)
        override def number: _root_.scala.Int = 34
      }
      @SerialVersionUID(0L)
      final case class Aggregate(value: io.deephaven.proto.backplane.grpc.table.AggregateRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.AggregateRequest
        override def isAggregate: _root_.scala.Boolean = true
        override def aggregate: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggregateRequest] = Some(value)
        override def number: _root_.scala.Int = 35
      }
      @SerialVersionUID(0L)
      final case class Snapshot(value: io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest
        override def isSnapshot: _root_.scala.Boolean = true
        override def snapshot: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest] = Some(value)
        override def number: _root_.scala.Int = 36
      }
      @SerialVersionUID(0L)
      final case class SnapshotWhen(value: io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest
        override def isSnapshotWhen: _root_.scala.Boolean = true
        override def snapshotWhen: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest] = Some(value)
        override def number: _root_.scala.Int = 37
      }
      @SerialVersionUID(0L)
      final case class MetaTable(value: io.deephaven.proto.backplane.grpc.table.MetaTableRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.MetaTableRequest
        override def isMetaTable: _root_.scala.Boolean = true
        override def metaTable: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MetaTableRequest] = Some(value)
        override def number: _root_.scala.Int = 38
      }
      @SerialVersionUID(0L)
      final case class RangeJoin(value: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest
        override def isRangeJoin: _root_.scala.Boolean = true
        override def rangeJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 39
      }
      @SerialVersionUID(0L)
      final case class Aj(value: io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest
        override def isAj: _root_.scala.Boolean = true
        override def aj: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 40
      }
      @SerialVersionUID(0L)
      final case class Raj(value: io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest
        override def isRaj: _root_.scala.Boolean = true
        override def raj: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 41
      }
      @SerialVersionUID(0L)
      final case class ColumnStatistics(value: io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest
        override def isColumnStatistics: _root_.scala.Boolean = true
        override def columnStatistics: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest] = Some(value)
        override def number: _root_.scala.Int = 42
      }
      @SerialVersionUID(0L)
      final case class MultiJoin(value: io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest
        override def isMultiJoin: _root_.scala.Boolean = true
        override def multiJoin: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest] = Some(value)
        override def number: _root_.scala.Int = 43
      }
      @SerialVersionUID(0L)
      final case class Slice(value: io.deephaven.proto.backplane.grpc.table.SliceRequest) extends io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op {
        type ValueType = io.deephaven.proto.backplane.grpc.table.SliceRequest
        override def isSlice: _root_.scala.Boolean = true
        override def slice: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SliceRequest] = Some(value)
        override def number: _root_.scala.Int = 44
      }
    }
    implicit class OperationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation](_l) {
      def emptyTable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.EmptyTableRequest] = field(_.getEmptyTable)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.EmptyTable(f_)))
      def timeTable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TimeTableRequest] = field(_.getTimeTable)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TimeTable(f_)))
      def dropColumns: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.DropColumnsRequest] = field(_.getDropColumns)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.DropColumns(f_)))
      def update: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = field(_.getUpdate)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Update(f_)))
      def lazyUpdate: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = field(_.getLazyUpdate)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LazyUpdate(f_)))
      def view: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = field(_.getView)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.View(f_)))
      def updateView: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = field(_.getUpdateView)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateView(f_)))
      def select: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SelectOrUpdateRequest] = field(_.getSelect)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Select(f_)))
      def selectDistinct: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SelectDistinctRequest] = field(_.getSelectDistinct)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SelectDistinct(f_)))
      def filter: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.FilterTableRequest] = field(_.getFilter)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Filter(f_)))
      def unstructuredFilter: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UnstructuredFilterTableRequest] = field(_.getUnstructuredFilter)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UnstructuredFilter(f_)))
      def sort: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SortTableRequest] = field(_.getSort)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Sort(f_)))
      def head: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest] = field(_.getHead)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Head(f_)))
      def tail: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.HeadOrTailRequest] = field(_.getTail)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Tail(f_)))
      def headBy: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest] = field(_.getHeadBy)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.HeadBy(f_)))
      def tailBy: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.HeadOrTailByRequest] = field(_.getTailBy)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.TailBy(f_)))
      def ungroup: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UngroupRequest] = field(_.getUngroup)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Ungroup(f_)))
      def merge: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MergeTablesRequest] = field(_.getMerge)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Merge(f_)))
      def comboAggregate: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest] = field(_.getComboAggregate)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ComboAggregate(f_)))
      def flatten: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.FlattenRequest] = field(_.getFlatten)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Flatten(f_)))
      def runChartDownsample: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest] = field(_.getRunChartDownsample)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RunChartDownsample(f_)))
      def crossJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CrossJoinTablesRequest] = field(_.getCrossJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CrossJoin(f_)))
      def naturalJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.NaturalJoinTablesRequest] = field(_.getNaturalJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.NaturalJoin(f_)))
      def exactJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ExactJoinTablesRequest] = field(_.getExactJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ExactJoin(f_)))
      def leftJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.LeftJoinTablesRequest] = field(_.getLeftJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.LeftJoin(f_)))
      def asOfJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AsOfJoinTablesRequest] = field(_.getAsOfJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AsOfJoin(f_)))
      def fetchTable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.FetchTableRequest] = field(_.getFetchTable)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.FetchTable(f_)))
      def applyPreviewColumns: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ApplyPreviewColumnsRequest] = field(_.getApplyPreviewColumns)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ApplyPreviewColumns(f_)))
      def createInputTable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest] = field(_.getCreateInputTable)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.CreateInputTable(f_)))
      def updateBy: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.UpdateByRequest] = field(_.getUpdateBy)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.UpdateBy(f_)))
      def whereIn: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.WhereInRequest] = field(_.getWhereIn)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.WhereIn(f_)))
      def aggregateAll: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggregateAllRequest] = field(_.getAggregateAll)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.AggregateAll(f_)))
      def aggregate: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggregateRequest] = field(_.getAggregate)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aggregate(f_)))
      def snapshot: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SnapshotTableRequest] = field(_.getSnapshot)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Snapshot(f_)))
      def snapshotWhen: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SnapshotWhenTableRequest] = field(_.getSnapshotWhen)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.SnapshotWhen(f_)))
      def metaTable: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MetaTableRequest] = field(_.getMetaTable)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MetaTable(f_)))
      def rangeJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest] = field(_.getRangeJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.RangeJoin(f_)))
      def aj: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest] = field(_.getAj)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Aj(f_)))
      def raj: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AjRajTablesRequest] = field(_.getRaj)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Raj(f_)))
      def columnStatistics: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ColumnStatisticsRequest] = field(_.getColumnStatistics)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.ColumnStatistics(f_)))
      def multiJoin: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MultiJoinTablesRequest] = field(_.getMultiJoin)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.MultiJoin(f_)))
      def slice: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SliceRequest] = field(_.getSlice)((c_, f_) => c_.copy(op = io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op.Slice(f_)))
      def op: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op] = field(_.op)((c_, f_) => c_.copy(op = f_))
    }
    final val EMPTY_TABLE_FIELD_NUMBER = 1
    final val TIME_TABLE_FIELD_NUMBER = 2
    final val DROP_COLUMNS_FIELD_NUMBER = 3
    final val UPDATE_FIELD_NUMBER = 4
    final val LAZY_UPDATE_FIELD_NUMBER = 5
    final val VIEW_FIELD_NUMBER = 6
    final val UPDATE_VIEW_FIELD_NUMBER = 7
    final val SELECT_FIELD_NUMBER = 8
    final val SELECT_DISTINCT_FIELD_NUMBER = 9
    final val FILTER_FIELD_NUMBER = 10
    final val UNSTRUCTURED_FILTER_FIELD_NUMBER = 11
    final val SORT_FIELD_NUMBER = 12
    final val HEAD_FIELD_NUMBER = 13
    final val TAIL_FIELD_NUMBER = 14
    final val HEAD_BY_FIELD_NUMBER = 15
    final val TAIL_BY_FIELD_NUMBER = 16
    final val UNGROUP_FIELD_NUMBER = 17
    final val MERGE_FIELD_NUMBER = 18
    final val COMBO_AGGREGATE_FIELD_NUMBER = 19
    final val FLATTEN_FIELD_NUMBER = 21
    final val RUN_CHART_DOWNSAMPLE_FIELD_NUMBER = 22
    final val CROSS_JOIN_FIELD_NUMBER = 23
    final val NATURAL_JOIN_FIELD_NUMBER = 24
    final val EXACT_JOIN_FIELD_NUMBER = 25
    final val LEFT_JOIN_FIELD_NUMBER = 26
    final val AS_OF_JOIN_FIELD_NUMBER = 27
    final val FETCH_TABLE_FIELD_NUMBER = 28
    final val APPLY_PREVIEW_COLUMNS_FIELD_NUMBER = 30
    final val CREATE_INPUT_TABLE_FIELD_NUMBER = 31
    final val UPDATE_BY_FIELD_NUMBER = 32
    final val WHERE_IN_FIELD_NUMBER = 33
    final val AGGREGATE_ALL_FIELD_NUMBER = 34
    final val AGGREGATE_FIELD_NUMBER = 35
    final val SNAPSHOT_FIELD_NUMBER = 36
    final val SNAPSHOT_WHEN_FIELD_NUMBER = 37
    final val META_TABLE_FIELD_NUMBER = 38
    final val RANGE_JOIN_FIELD_NUMBER = 39
    final val AJ_FIELD_NUMBER = 40
    final val RAJ_FIELD_NUMBER = 41
    final val COLUMN_STATISTICS_FIELD_NUMBER = 42
    final val MULTI_JOIN_FIELD_NUMBER = 43
    final val SLICE_FIELD_NUMBER = 44
    def of(
      op: io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation.Op
    ): _root_.io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation = _root_.io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation(
      op
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.BatchTableRequest.Operation])
  }
  
  implicit class BatchTableRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.BatchTableRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.BatchTableRequest](_l) {
    def ops: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]] = field(_.ops)((c_, f_) => c_.copy(ops = f_))
  }
  final val OPS_FIELD_NUMBER = 1
  def of(
    ops: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.BatchTableRequest.Operation]
  ): _root_.io.deephaven.proto.backplane.grpc.table.BatchTableRequest = _root_.io.deephaven.proto.backplane.grpc.table.BatchTableRequest(
    ops
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.BatchTableRequest])
}
