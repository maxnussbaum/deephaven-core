// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class Condition(
    data: io.deephaven.proto.backplane.grpc.table.Condition.Data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Condition] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (data.and.isDefined) {
        val __value = data.and.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.or.isDefined) {
        val __value = data.or.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.not.isDefined) {
        val __value = data.not.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.compare.isDefined) {
        val __value = data.compare.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.in.isDefined) {
        val __value = data.in.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.invoke.isDefined) {
        val __value = data.invoke.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.isNull.isDefined) {
        val __value = data.isNull.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.matches.isDefined) {
        val __value = data.matches.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.contains.isDefined) {
        val __value = data.contains.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.search.isDefined) {
        val __value = data.search.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      data.and.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.or.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.not.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.compare.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.in.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.invoke.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.isNull.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.matches.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.contains.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.search.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getAnd: io.deephaven.proto.backplane.grpc.table.AndCondition = data.and.getOrElse(io.deephaven.proto.backplane.grpc.table.AndCondition.defaultInstance)
    def withAnd(__v: io.deephaven.proto.backplane.grpc.table.AndCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.And(__v))
    def getOr: io.deephaven.proto.backplane.grpc.table.OrCondition = data.or.getOrElse(io.deephaven.proto.backplane.grpc.table.OrCondition.defaultInstance)
    def withOr(__v: io.deephaven.proto.backplane.grpc.table.OrCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Or(__v))
    def getNot: io.deephaven.proto.backplane.grpc.table.NotCondition = data.not.getOrElse(io.deephaven.proto.backplane.grpc.table.NotCondition.defaultInstance)
    def withNot(__v: io.deephaven.proto.backplane.grpc.table.NotCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Not(__v))
    def getCompare: io.deephaven.proto.backplane.grpc.table.CompareCondition = data.compare.getOrElse(io.deephaven.proto.backplane.grpc.table.CompareCondition.defaultInstance)
    def withCompare(__v: io.deephaven.proto.backplane.grpc.table.CompareCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Compare(__v))
    def getIn: io.deephaven.proto.backplane.grpc.table.InCondition = data.in.getOrElse(io.deephaven.proto.backplane.grpc.table.InCondition.defaultInstance)
    def withIn(__v: io.deephaven.proto.backplane.grpc.table.InCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.In(__v))
    def getInvoke: io.deephaven.proto.backplane.grpc.table.InvokeCondition = data.invoke.getOrElse(io.deephaven.proto.backplane.grpc.table.InvokeCondition.defaultInstance)
    def withInvoke(__v: io.deephaven.proto.backplane.grpc.table.InvokeCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Invoke(__v))
    def getIsNull: io.deephaven.proto.backplane.grpc.table.IsNullCondition = data.isNull.getOrElse(io.deephaven.proto.backplane.grpc.table.IsNullCondition.defaultInstance)
    def withIsNull(__v: io.deephaven.proto.backplane.grpc.table.IsNullCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.IsNull(__v))
    def getMatches: io.deephaven.proto.backplane.grpc.table.MatchesCondition = data.matches.getOrElse(io.deephaven.proto.backplane.grpc.table.MatchesCondition.defaultInstance)
    def withMatches(__v: io.deephaven.proto.backplane.grpc.table.MatchesCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Matches(__v))
    def getContains: io.deephaven.proto.backplane.grpc.table.ContainsCondition = data.contains.getOrElse(io.deephaven.proto.backplane.grpc.table.ContainsCondition.defaultInstance)
    def withContains(__v: io.deephaven.proto.backplane.grpc.table.ContainsCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Contains(__v))
    def getSearch: io.deephaven.proto.backplane.grpc.table.SearchCondition = data.search.getOrElse(io.deephaven.proto.backplane.grpc.table.SearchCondition.defaultInstance)
    def withSearch(__v: io.deephaven.proto.backplane.grpc.table.SearchCondition): Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Search(__v))
    def clearData: Condition = copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Empty)
    def withData(__v: io.deephaven.proto.backplane.grpc.table.Condition.Data): Condition = copy(data = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => data.and.orNull
        case 2 => data.or.orNull
        case 3 => data.not.orNull
        case 4 => data.compare.orNull
        case 5 => data.in.orNull
        case 6 => data.invoke.orNull
        case 7 => data.isNull.orNull
        case 8 => data.matches.orNull
        case 9 => data.contains.orNull
        case 10 => data.search.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => data.and.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.or.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => data.not.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => data.compare.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => data.in.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => data.invoke.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => data.isNull.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => data.matches.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => data.contains.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => data.search.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.Condition.type = io.deephaven.proto.backplane.grpc.table.Condition
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Condition])
}

object Condition extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Condition] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Condition] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Condition = {
    var __data: io.deephaven.proto.backplane.grpc.table.Condition.Data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.And(__data.and.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AndCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Or(__data.or.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.OrCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Not(__data.not.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.NotCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Compare(__data.compare.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CompareCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.In(__data.in.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.InCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Invoke(__data.invoke.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.InvokeCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.IsNull(__data.isNull.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.IsNullCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Matches(__data.matches.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.MatchesCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Contains(__data.contains.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.ContainsCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Search(__data.search.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.SearchCondition](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.Condition(
        data = __data,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Condition] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.Condition(
        data = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AndCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.And(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.OrCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Or(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NotCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Not(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CompareCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Compare(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.InCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.In(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.InvokeCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Invoke(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.IsNullCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.IsNull(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MatchesCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Matches(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ContainsCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Contains(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.Condition.Data](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SearchCondition]]).map(io.deephaven.proto.backplane.grpc.table.Condition.Data.Search(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.Condition.Data.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(46)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(46)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.AndCondition
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.OrCondition
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.NotCondition
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.CompareCondition
      case 5 => __out = io.deephaven.proto.backplane.grpc.table.InCondition
      case 6 => __out = io.deephaven.proto.backplane.grpc.table.InvokeCondition
      case 7 => __out = io.deephaven.proto.backplane.grpc.table.IsNullCondition
      case 8 => __out = io.deephaven.proto.backplane.grpc.table.MatchesCondition
      case 9 => __out = io.deephaven.proto.backplane.grpc.table.ContainsCondition
      case 10 => __out = io.deephaven.proto.backplane.grpc.table.SearchCondition
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Condition(
    data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Empty
  )
  sealed trait Data extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isAnd: _root_.scala.Boolean = false
    def isOr: _root_.scala.Boolean = false
    def isNot: _root_.scala.Boolean = false
    def isCompare: _root_.scala.Boolean = false
    def isIn: _root_.scala.Boolean = false
    def isInvoke: _root_.scala.Boolean = false
    def isIsNull: _root_.scala.Boolean = false
    def isMatches: _root_.scala.Boolean = false
    def isContains: _root_.scala.Boolean = false
    def isSearch: _root_.scala.Boolean = false
    def and: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AndCondition] = _root_.scala.None
    def or: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.OrCondition] = _root_.scala.None
    def not: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NotCondition] = _root_.scala.None
    def compare: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CompareCondition] = _root_.scala.None
    def in: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.InCondition] = _root_.scala.None
    def invoke: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.InvokeCondition] = _root_.scala.None
    def isNull: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.IsNullCondition] = _root_.scala.None
    def matches: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MatchesCondition] = _root_.scala.None
    def contains: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ContainsCondition] = _root_.scala.None
    def search: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SearchCondition] = _root_.scala.None
  }
  object Data {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class And(value: io.deephaven.proto.backplane.grpc.table.AndCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AndCondition
      override def isAnd: _root_.scala.Boolean = true
      override def and: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AndCondition] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Or(value: io.deephaven.proto.backplane.grpc.table.OrCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.OrCondition
      override def isOr: _root_.scala.Boolean = true
      override def or: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.OrCondition] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Not(value: io.deephaven.proto.backplane.grpc.table.NotCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.NotCondition
      override def isNot: _root_.scala.Boolean = true
      override def not: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NotCondition] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class Compare(value: io.deephaven.proto.backplane.grpc.table.CompareCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.CompareCondition
      override def isCompare: _root_.scala.Boolean = true
      override def compare: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CompareCondition] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class In(value: io.deephaven.proto.backplane.grpc.table.InCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.InCondition
      override def isIn: _root_.scala.Boolean = true
      override def in: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.InCondition] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class Invoke(value: io.deephaven.proto.backplane.grpc.table.InvokeCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.InvokeCondition
      override def isInvoke: _root_.scala.Boolean = true
      override def invoke: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.InvokeCondition] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class IsNull(value: io.deephaven.proto.backplane.grpc.table.IsNullCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.IsNullCondition
      override def isIsNull: _root_.scala.Boolean = true
      override def isNull: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.IsNullCondition] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Matches(value: io.deephaven.proto.backplane.grpc.table.MatchesCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.MatchesCondition
      override def isMatches: _root_.scala.Boolean = true
      override def matches: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.MatchesCondition] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Contains(value: io.deephaven.proto.backplane.grpc.table.ContainsCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.ContainsCondition
      override def isContains: _root_.scala.Boolean = true
      override def contains: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ContainsCondition] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class Search(value: io.deephaven.proto.backplane.grpc.table.SearchCondition) extends io.deephaven.proto.backplane.grpc.table.Condition.Data {
      type ValueType = io.deephaven.proto.backplane.grpc.table.SearchCondition
      override def isSearch: _root_.scala.Boolean = true
      override def search: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.SearchCondition] = Some(value)
      override def number: _root_.scala.Int = 10
    }
  }
  implicit class ConditionLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Condition]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Condition](_l) {
    def and: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AndCondition] = field(_.getAnd)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.And(f_)))
    def or: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.OrCondition] = field(_.getOr)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Or(f_)))
    def not: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.NotCondition] = field(_.getNot)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Not(f_)))
    def compare: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CompareCondition] = field(_.getCompare)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Compare(f_)))
    def in: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.InCondition] = field(_.getIn)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.In(f_)))
    def invoke: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.InvokeCondition] = field(_.getInvoke)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Invoke(f_)))
    def isNull: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.IsNullCondition] = field(_.getIsNull)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.IsNull(f_)))
    def matches: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.MatchesCondition] = field(_.getMatches)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Matches(f_)))
    def contains: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ContainsCondition] = field(_.getContains)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Contains(f_)))
    def search: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.SearchCondition] = field(_.getSearch)((c_, f_) => c_.copy(data = io.deephaven.proto.backplane.grpc.table.Condition.Data.Search(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Condition.Data] = field(_.data)((c_, f_) => c_.copy(data = f_))
  }
  final val AND_FIELD_NUMBER = 1
  final val OR_FIELD_NUMBER = 2
  final val NOT_FIELD_NUMBER = 3
  final val COMPARE_FIELD_NUMBER = 4
  final val IN_FIELD_NUMBER = 5
  final val INVOKE_FIELD_NUMBER = 6
  final val IS_NULL_FIELD_NUMBER = 7
  final val MATCHES_FIELD_NUMBER = 8
  final val CONTAINS_FIELD_NUMBER = 9
  final val SEARCH_FIELD_NUMBER = 10
  def of(
    data: io.deephaven.proto.backplane.grpc.table.Condition.Data
  ): _root_.io.deephaven.proto.backplane.grpc.table.Condition = _root_.io.deephaven.proto.backplane.grpc.table.Condition(
    data
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Condition])
}
