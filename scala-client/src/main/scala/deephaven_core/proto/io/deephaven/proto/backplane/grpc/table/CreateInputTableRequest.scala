// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

/** @param kind
  *   Specifies what type of input table to create.
  */
@SerialVersionUID(0L)
final case class CreateInputTableRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    definition: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Empty,
    kind: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[CreateInputTableRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (definition.sourceTableId.isDefined) {
        val __value = definition.sourceTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (definition.schema.isDefined) {
        val __value = definition.schema.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(3, __value)
      };
      if (kind.isDefined) {
        val __value = kind.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      definition.sourceTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      definition.schema.foreach { __v =>
        val __m = __v
        _output__.writeBytes(3, __m)
      };
      kind.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: CreateInputTableRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): CreateInputTableRequest = copy(resultId = Option(__v))
    def getSourceTableId: io.deephaven.proto.backplane.grpc.table.TableReference = definition.sourceTableId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def withSourceTableId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): CreateInputTableRequest = copy(definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.SourceTableId(__v))
    def getSchema: _root_.com.google.protobuf.ByteString = definition.schema.getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
    def withSchema(__v: _root_.com.google.protobuf.ByteString): CreateInputTableRequest = copy(definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Schema(__v))
    def getKind: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind = kind.getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.defaultInstance)
    def clearKind: CreateInputTableRequest = copy(kind = _root_.scala.None)
    def withKind(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind): CreateInputTableRequest = copy(kind = Option(__v))
    def clearDefinition: CreateInputTableRequest = copy(definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Empty)
    def withDefinition(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition): CreateInputTableRequest = copy(definition = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => definition.sourceTableId.orNull
        case 3 => definition.schema.orNull
        case 4 => kind.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => definition.sourceTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => definition.schema.map(_root_.scalapb.descriptors.PByteString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => kind.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.type = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CreateInputTableRequest])
}

object CreateInputTableRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __kind: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind] = _root_.scala.None
    var __definition: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.SourceTableId(__definition.sourceTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Schema(_input__.readBytes())
        case 34 =>
          __kind = _root_.scala.Option(__kind.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest(
        resultId = __resultId,
        kind = __kind,
        definition = __definition,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        kind = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind]]),
        definition = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]).map(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.SourceTableId(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.com.google.protobuf.ByteString]]).map(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Schema(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getMessageTypes().get(60)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.messages(60)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest(
    resultId = _root_.scala.None,
    kind = _root_.scala.None,
    definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Empty
  )
  sealed abstract class Definition extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isSourceTableId: _root_.scala.Boolean = false
    def isSchema: _root_.scala.Boolean = false
    def sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    def schema: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = _root_.scala.None
  }
  object Definition {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class SourceTableId(value: io.deephaven.proto.backplane.grpc.table.TableReference) extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition {
      type ValueType = io.deephaven.proto.backplane.grpc.table.TableReference
      override def isSourceTableId: _root_.scala.Boolean = true
      override def sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Schema(value: _root_.com.google.protobuf.ByteString) extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition {
      type ValueType = _root_.com.google.protobuf.ByteString
      override def isSchema: _root_.scala.Boolean = true
      override def schema: _root_.scala.Option[_root_.com.google.protobuf.ByteString] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  @SerialVersionUID(0L)
  final case class InputTableKind(
      kind: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InputTableKind] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (kind.inMemoryAppendOnly.isDefined) {
          val __value = kind.inMemoryAppendOnly.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (kind.inMemoryKeyBacked.isDefined) {
          val __value = kind.inMemoryKeyBacked.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (kind.blink.isDefined) {
          val __value = kind.blink.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        kind.inMemoryAppendOnly.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        kind.inMemoryKeyBacked.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        kind.blink.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def getInMemoryAppendOnly: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly = kind.inMemoryAppendOnly.getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly.defaultInstance)
      def withInMemoryAppendOnly(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly): InputTableKind = copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryAppendOnly(__v))
      def getInMemoryKeyBacked: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked = kind.inMemoryKeyBacked.getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.defaultInstance)
      def withInMemoryKeyBacked(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked): InputTableKind = copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryKeyBacked(__v))
      def getBlink: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink = kind.blink.getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink.defaultInstance)
      def withBlink(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink): InputTableKind = copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Blink(__v))
      def clearKind: InputTableKind = copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Empty)
      def withKind(__v: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind): InputTableKind = copy(kind = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => kind.inMemoryAppendOnly.orNull
          case 2 => kind.inMemoryKeyBacked.orNull
          case 3 => kind.blink.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => kind.inMemoryAppendOnly.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => kind.inMemoryKeyBacked.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => kind.blink.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.type = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind])
  }
  
  object InputTableKind extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind = {
      var __kind: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryAppendOnly(__kind.inMemoryAppendOnly.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 18 =>
            __kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryKeyBacked(__kind.inMemoryKeyBacked.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 26 =>
            __kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Blink(__kind.blink.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind(
          kind = __kind,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind(
          kind = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly]]).map(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryAppendOnly(_))
              .orElse[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked]]).map(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryKeyBacked(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink]]).map(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Blink(_)))
              .getOrElse(io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly
        case 2 => __out = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked
        case 3 => __out = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly,
        _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked,
        _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind(
      kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Empty
    )
    sealed abstract class Kind extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isInMemoryAppendOnly: _root_.scala.Boolean = false
      def isInMemoryKeyBacked: _root_.scala.Boolean = false
      def isBlink: _root_.scala.Boolean = false
      def inMemoryAppendOnly: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly] = _root_.scala.None
      def inMemoryKeyBacked: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked] = _root_.scala.None
      def blink: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink] = _root_.scala.None
    }
    object Kind {
      @SerialVersionUID(0L)
      case object Empty extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class InMemoryAppendOnly(value: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly) extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind {
        type ValueType = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly
        override def isInMemoryAppendOnly: _root_.scala.Boolean = true
        override def inMemoryAppendOnly: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly] = Some(value)
        override def number: _root_.scala.Int = 1
      }
      @SerialVersionUID(0L)
      final case class InMemoryKeyBacked(value: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked) extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind {
        type ValueType = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked
        override def isInMemoryKeyBacked: _root_.scala.Boolean = true
        override def inMemoryKeyBacked: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked] = Some(value)
        override def number: _root_.scala.Int = 2
      }
      @SerialVersionUID(0L)
      final case class Blink(value: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink) extends io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind {
        type ValueType = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink
        override def isBlink: _root_.scala.Boolean = true
        override def blink: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink] = Some(value)
        override def number: _root_.scala.Int = 3
      }
    }
    /** Creates an in-memory append-only table - rows cannot be modified or deleted.
      */
    @SerialVersionUID(0L)
    final case class InMemoryAppendOnly(
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InMemoryAppendOnly] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          unknownFields.writeTo(_output__)
        }
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly.type = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly])
    }
    
    object InMemoryAppendOnly extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly = {
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly(
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly(
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly(
      )
      implicit class InMemoryAppendOnlyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly](_l) {
      }
      def of(
      ): _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly = _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly(
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly])
    }
    
    /** Creates an in-memory table that supports updates and deletes by keys.
      */
    @SerialVersionUID(0L)
    final case class InMemoryKeyBacked(
        keyColumns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[InMemoryKeyBacked] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          keyColumns.foreach { __item =>
            val __value = __item
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          keyColumns.foreach { __v =>
            val __m = __v
            _output__.writeString(1, __m)
          };
          unknownFields.writeTo(_output__)
        }
        def clearKeyColumns = copy(keyColumns = _root_.scala.Seq.empty)
        def addKeyColumns(__vs: _root_.scala.Predef.String *): InMemoryKeyBacked = addAllKeyColumns(__vs)
        def addAllKeyColumns(__vs: Iterable[_root_.scala.Predef.String]): InMemoryKeyBacked = copy(keyColumns = keyColumns ++ __vs)
        def withKeyColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): InMemoryKeyBacked = copy(keyColumns = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => keyColumns
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PRepeated(keyColumns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked.type = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked])
    }
    
    object InMemoryKeyBacked extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked = {
        val __keyColumns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __keyColumns += _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked(
            keyColumns = __keyColumns.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked(
            keyColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked(
        keyColumns = _root_.scala.Seq.empty
      )
      implicit class InMemoryKeyBackedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked](_l) {
        def keyColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.keyColumns)((c_, f_) => c_.copy(keyColumns = f_))
      }
      final val KEY_COLUMNS_FIELD_NUMBER = 1
      def of(
        keyColumns: _root_.scala.Seq[_root_.scala.Predef.String]
      ): _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked = _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked(
        keyColumns
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked])
    }
    
    @SerialVersionUID(0L)
    final case class Blink(
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Blink] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          unknownFields.writeTo(_output__)
        }
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink.type = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink])
    }
    
    object Blink extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink = {
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink(
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink(
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.javaDescriptor.getNestedTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink(
      )
      implicit class BlinkLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink](_l) {
      }
      def of(
      ): _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink = _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink(
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind.Blink])
    }
    
    implicit class InputTableKindLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind](_l) {
      def inMemoryAppendOnly: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryAppendOnly] = field(_.getInMemoryAppendOnly)((c_, f_) => c_.copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryAppendOnly(f_)))
      def inMemoryKeyBacked: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.InMemoryKeyBacked] = field(_.getInMemoryKeyBacked)((c_, f_) => c_.copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.InMemoryKeyBacked(f_)))
      def blink: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Blink] = field(_.getBlink)((c_, f_) => c_.copy(kind = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind.Blink(f_)))
      def kind: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
    }
    final val IN_MEMORY_APPEND_ONLY_FIELD_NUMBER = 1
    final val IN_MEMORY_KEY_BACKED_FIELD_NUMBER = 2
    final val BLINK_FIELD_NUMBER = 3
    def of(
      kind: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind.Kind
    ): _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind = _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind(
      kind
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CreateInputTableRequest.InputTableKind])
  }
  
  implicit class CreateInputTableRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def sourceTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getSourceTableId)((c_, f_) => c_.copy(definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.SourceTableId(f_)))
    def schema: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.getSchema)((c_, f_) => c_.copy(definition = io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition.Schema(f_)))
    def kind: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind] = field(_.getKind)((c_, f_) => c_.copy(kind = _root_.scala.Option(f_)))
    def optionalKind: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind]] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
    def definition: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition] = field(_.definition)((c_, f_) => c_.copy(definition = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val SOURCE_TABLE_ID_FIELD_NUMBER = 2
  final val SCHEMA_FIELD_NUMBER = 3
  final val KIND_FIELD_NUMBER = 4
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    definition: io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.Definition,
    kind: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest.InputTableKind]
  ): _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest = _root_.io.deephaven.proto.backplane.grpc.table.CreateInputTableRequest(
    resultId,
    definition,
    kind
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.CreateInputTableRequest])
}
