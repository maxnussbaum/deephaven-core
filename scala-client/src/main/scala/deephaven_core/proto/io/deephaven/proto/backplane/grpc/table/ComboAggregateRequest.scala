// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

/** @param forceCombo
  *   don't use direct single-aggregate table operations even if there is only a single aggregate
  */
@SerialVersionUID(0L)
@scala.deprecated(message="Marked as deprecated in proto file", "")
final case class ComboAggregateRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    aggregates: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate] = _root_.scala.Seq.empty,
    groupByColumns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    forceCombo: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ComboAggregateRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sourceId.isDefined) {
        val __value = sourceId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      aggregates.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      groupByColumns.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = forceCombo
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sourceId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      aggregates.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      groupByColumns.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = forceCombo
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: ComboAggregateRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): ComboAggregateRequest = copy(resultId = Option(__v))
    def getSourceId: io.deephaven.proto.backplane.grpc.table.TableReference = sourceId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearSourceId: ComboAggregateRequest = copy(sourceId = _root_.scala.None)
    def withSourceId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): ComboAggregateRequest = copy(sourceId = Option(__v))
    def clearAggregates = copy(aggregates = _root_.scala.Seq.empty)
    def addAggregates(__vs: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate *): ComboAggregateRequest = addAllAggregates(__vs)
    def addAllAggregates(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate]): ComboAggregateRequest = copy(aggregates = aggregates ++ __vs)
    def withAggregates(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate]): ComboAggregateRequest = copy(aggregates = __v)
    def clearGroupByColumns = copy(groupByColumns = _root_.scala.Seq.empty)
    def addGroupByColumns(__vs: _root_.scala.Predef.String *): ComboAggregateRequest = addAllGroupByColumns(__vs)
    def addAllGroupByColumns(__vs: Iterable[_root_.scala.Predef.String]): ComboAggregateRequest = copy(groupByColumns = groupByColumns ++ __vs)
    def withGroupByColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): ComboAggregateRequest = copy(groupByColumns = __v)
    def withForceCombo(__v: _root_.scala.Boolean): ComboAggregateRequest = copy(forceCombo = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => sourceId.orNull
        case 3 => aggregates
        case 4 => groupByColumns
        case 5 => {
          val __t = forceCombo
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sourceId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(aggregates.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(groupByColumns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PBoolean(forceCombo)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.type = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ComboAggregateRequest])
}

@scala.deprecated(message="Marked as deprecated in proto file", "")
object ComboAggregateRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    val __aggregates: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate]
    val __groupByColumns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __forceCombo: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sourceId = _root_.scala.Option(__sourceId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __aggregates += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate](_input__)
        case 34 =>
          __groupByColumns += _input__.readStringRequireUtf8()
        case 40 =>
          __forceCombo = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest(
        resultId = __resultId,
        sourceId = __sourceId,
        aggregates = __aggregates.result(),
        groupByColumns = __groupByColumns.result(),
        forceCombo = __forceCombo,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        sourceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        aggregates = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate]]).getOrElse(_root_.scala.Seq.empty),
        groupByColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        forceCombo = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(33)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(33)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest(
    resultId = _root_.scala.None,
    sourceId = _root_.scala.None,
    aggregates = _root_.scala.Seq.empty,
    groupByColumns = _root_.scala.Seq.empty,
    forceCombo = false
  )
  sealed abstract class AggType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType
    type RecognizedType = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.Recognized
    def isSum: _root_.scala.Boolean = false
    def isAbsSum: _root_.scala.Boolean = false
    def isGroup: _root_.scala.Boolean = false
    def isAvg: _root_.scala.Boolean = false
    def isCount: _root_.scala.Boolean = false
    def isFirst: _root_.scala.Boolean = false
    def isLast: _root_.scala.Boolean = false
    def isMin: _root_.scala.Boolean = false
    def isMax: _root_.scala.Boolean = false
    def isMedian: _root_.scala.Boolean = false
    def isPercentile: _root_.scala.Boolean = false
    def isStd: _root_.scala.Boolean = false
    def isVar: _root_.scala.Boolean = false
    def isWeightedAvg: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[AggType] = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.Recognized])
  }
  
  object AggType extends _root_.scalapb.GeneratedEnumCompanion[AggType] {
    sealed trait Recognized extends AggType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AggType] = this
    
    @SerialVersionUID(0L)
    case object SUM extends AggType(0) with AggType.Recognized {
      val index = 0
      val name = "SUM"
      override def isSum: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ABS_SUM extends AggType(1) with AggType.Recognized {
      val index = 1
      val name = "ABS_SUM"
      override def isAbsSum: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GROUP extends AggType(2) with AggType.Recognized {
      val index = 2
      val name = "GROUP"
      override def isGroup: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object AVG extends AggType(3) with AggType.Recognized {
      val index = 3
      val name = "AVG"
      override def isAvg: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object COUNT extends AggType(4) with AggType.Recognized {
      val index = 4
      val name = "COUNT"
      override def isCount: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object FIRST extends AggType(5) with AggType.Recognized {
      val index = 5
      val name = "FIRST"
      override def isFirst: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LAST extends AggType(6) with AggType.Recognized {
      val index = 6
      val name = "LAST"
      override def isLast: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object MIN extends AggType(7) with AggType.Recognized {
      val index = 7
      val name = "MIN"
      override def isMin: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object MAX extends AggType(8) with AggType.Recognized {
      val index = 8
      val name = "MAX"
      override def isMax: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object MEDIAN extends AggType(9) with AggType.Recognized {
      val index = 9
      val name = "MEDIAN"
      override def isMedian: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PERCENTILE extends AggType(10) with AggType.Recognized {
      val index = 10
      val name = "PERCENTILE"
      override def isPercentile: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STD extends AggType(11) with AggType.Recognized {
      val index = 11
      val name = "STD"
      override def isStd: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object VAR extends AggType(12) with AggType.Recognized {
      val index = 12
      val name = "VAR"
      override def isVar: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WEIGHTED_AVG extends AggType(13) with AggType.Recognized {
      val index = 13
      val name = "WEIGHTED_AVG"
      override def isWeightedAvg: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends AggType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(SUM, ABS_SUM, GROUP, AVG, COUNT, FIRST, LAST, MIN, MAX, MEDIAN, PERCENTILE, STD, VAR, WEIGHTED_AVG)
    def fromValue(__value: _root_.scala.Int): AggType = __value match {
      case 0 => SUM
      case 1 => ABS_SUM
      case 2 => GROUP
      case 3 => AVG
      case 4 => COUNT
      case 5 => FIRST
      case 6 => LAST
      case 7 => MIN
      case 8 => MAX
      case 9 => MEDIAN
      case 10 => PERCENTILE
      case 11 => STD
      case 12 => VAR
      case 13 => WEIGHTED_AVG
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.scalaDescriptor.enums(0)
  }
  /** @param matchPairs
    *   used in all aggregates except countBy
    * @param columnName
    *   countBy result (output) column OR weighted avg weight (input) column, otherwise unused
    * @param percentile
    *   required by percentileBy aggregates, otherwise unused
    * @param avgMedian
    *   used in percentileBy only
    */
  @SerialVersionUID(0L)
  final case class Aggregate(
      `type`: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.SUM,
      matchPairs: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      columnName: _root_.scala.Predef.String = "",
      percentile: _root_.scala.Double = 0.0,
      avgMedian: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Aggregate] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = `type`.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
          }
        };
        matchPairs.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        
        {
          val __value = percentile
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(4, __value)
          }
        };
        
        {
          val __value = avgMedian
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = `type`.value
          if (__v != 0) {
            _output__.writeEnum(1, __v)
          }
        };
        matchPairs.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(3, __v)
          }
        };
        {
          val __v = percentile
          if (__v != 0.0) {
            _output__.writeDouble(4, __v)
          }
        };
        {
          val __v = avgMedian
          if (__v != false) {
            _output__.writeBool(5, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withType(__v: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType): Aggregate = copy(`type` = __v)
      def clearMatchPairs = copy(matchPairs = _root_.scala.Seq.empty)
      def addMatchPairs(__vs: _root_.scala.Predef.String *): Aggregate = addAllMatchPairs(__vs)
      def addAllMatchPairs(__vs: Iterable[_root_.scala.Predef.String]): Aggregate = copy(matchPairs = matchPairs ++ __vs)
      def withMatchPairs(__v: _root_.scala.Seq[_root_.scala.Predef.String]): Aggregate = copy(matchPairs = __v)
      def withColumnName(__v: _root_.scala.Predef.String): Aggregate = copy(columnName = __v)
      def withPercentile(__v: _root_.scala.Double): Aggregate = copy(percentile = __v)
      def withAvgMedian(__v: _root_.scala.Boolean): Aggregate = copy(avgMedian = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = `type`.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 2 => matchPairs
          case 3 => {
            val __t = columnName
            if (__t != "") __t else null
          }
          case 4 => {
            val __t = percentile
            if (__t != 0.0) __t else null
          }
          case 5 => {
            val __t = avgMedian
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
          case 2 => _root_.scalapb.descriptors.PRepeated(matchPairs.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PString(columnName)
          case 4 => _root_.scalapb.descriptors.PDouble(percentile)
          case 5 => _root_.scalapb.descriptors.PBoolean(avgMedian)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate.type = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate])
  }
  
  object Aggregate extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate = {
      var __type: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.SUM
      val __matchPairs: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var __columnName: _root_.scala.Predef.String = ""
      var __percentile: _root_.scala.Double = 0.0
      var __avgMedian: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.fromValue(_input__.readEnum())
          case 18 =>
            __matchPairs += _input__.readStringRequireUtf8()
          case 26 =>
            __columnName = _input__.readStringRequireUtf8()
          case 33 =>
            __percentile = _input__.readDouble()
          case 40 =>
            __avgMedian = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate(
          `type` = __type,
          matchPairs = __matchPairs.result(),
          columnName = __columnName,
          percentile = __percentile,
          avgMedian = __avgMedian,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate(
          `type` = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.SUM.scalaValueDescriptor).number),
          matchPairs = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          percentile = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          avgMedian = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate(
      `type` = io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType.SUM,
      matchPairs = _root_.scala.Seq.empty,
      columnName = "",
      percentile = 0.0,
      avgMedian = false
    )
    implicit class AggregateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate](_l) {
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def matchPairs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.matchPairs)((c_, f_) => c_.copy(matchPairs = f_))
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
      def percentile: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.percentile)((c_, f_) => c_.copy(percentile = f_))
      def avgMedian: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.avgMedian)((c_, f_) => c_.copy(avgMedian = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
    final val MATCH_PAIRS_FIELD_NUMBER = 2
    final val COLUMN_NAME_FIELD_NUMBER = 3
    final val PERCENTILE_FIELD_NUMBER = 4
    final val AVG_MEDIAN_FIELD_NUMBER = 5
    def of(
      `type`: io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.AggType,
      matchPairs: _root_.scala.Seq[_root_.scala.Predef.String],
      columnName: _root_.scala.Predef.String,
      percentile: _root_.scala.Double,
      avgMedian: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate = _root_.io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate(
      `type`,
      matchPairs,
      columnName,
      percentile,
      avgMedian
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ComboAggregateRequest.Aggregate])
  }
  
  implicit class ComboAggregateRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def sourceId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getSourceId)((c_, f_) => c_.copy(sourceId = _root_.scala.Option(f_)))
    def optionalSourceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.sourceId)((c_, f_) => c_.copy(sourceId = f_))
    def aggregates: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate]] = field(_.aggregates)((c_, f_) => c_.copy(aggregates = f_))
    def groupByColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.groupByColumns)((c_, f_) => c_.copy(groupByColumns = f_))
    def forceCombo: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.forceCombo)((c_, f_) => c_.copy(forceCombo = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val SOURCE_ID_FIELD_NUMBER = 2
  final val AGGREGATES_FIELD_NUMBER = 3
  final val GROUP_BY_COLUMNS_FIELD_NUMBER = 4
  final val FORCE_COMBO_FIELD_NUMBER = 5
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    aggregates: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest.Aggregate],
    groupByColumns: _root_.scala.Seq[_root_.scala.Predef.String],
    forceCombo: _root_.scala.Boolean
  ): _root_.io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest = _root_.io.deephaven.proto.backplane.grpc.table.ComboAggregateRequest(
    resultId,
    sourceId,
    aggregates,
    groupByColumns,
    forceCombo
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ComboAggregateRequest])
}
