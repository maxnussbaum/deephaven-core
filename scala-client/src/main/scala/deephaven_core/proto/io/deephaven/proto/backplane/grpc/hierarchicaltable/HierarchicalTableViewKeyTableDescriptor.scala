// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.hierarchicaltable

/** @param keyTableId
  *   Ticket that represents a Table of expanded or contracted keys from a HierarchicalTable (RollupTable or TreeTable).
  *   The format for the key Table is dictated by the schema from the corresponding HierarchicalTableDescriptor. It is
  *   expected to have one column for each "expand-by column", including the "row depth column" for RollupTables only,
  *   and (optionally) an "action" column whose name is specified in the key_table_action_column field.
  *   If the Table is empty the result will have only default nodes expanded.
  * @param keyTableActionColumn
  *   The name of a column of bytes found in the key table that specifies the action desired for the node selected by
  *   the other columns for each row. Takes on the value 1 for nodes that should be expanded, 3 for nodes that should be
  *   expanded along with their descendants, and 4 for nodes that should be contracted.
  *   If this column name is not present, all nodes in the key table will be expanded without their descendants.
  */
@SerialVersionUID(0L)
final case class HierarchicalTableViewKeyTableDescriptor(
    keyTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    keyTableActionColumn: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[HierarchicalTableViewKeyTableDescriptor] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (keyTableId.isDefined) {
        val __value = keyTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (keyTableActionColumn.isDefined) {
        val __value = keyTableActionColumn.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      keyTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      keyTableActionColumn.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getKeyTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = keyTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearKeyTableId: HierarchicalTableViewKeyTableDescriptor = copy(keyTableId = _root_.scala.None)
    def withKeyTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): HierarchicalTableViewKeyTableDescriptor = copy(keyTableId = Option(__v))
    def getKeyTableActionColumn: _root_.scala.Predef.String = keyTableActionColumn.getOrElse("")
    def clearKeyTableActionColumn: HierarchicalTableViewKeyTableDescriptor = copy(keyTableActionColumn = _root_.scala.None)
    def withKeyTableActionColumn(__v: _root_.scala.Predef.String): HierarchicalTableViewKeyTableDescriptor = copy(keyTableActionColumn = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => keyTableId.orNull
        case 2 => keyTableActionColumn.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => keyTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => keyTableActionColumn.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor.type = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor])
}

object HierarchicalTableViewKeyTableDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor = {
    var __keyTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __keyTableActionColumn: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __keyTableId = _root_.scala.Option(__keyTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __keyTableActionColumn = _root_.scala.Option(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor(
        keyTableId = __keyTableId,
        keyTableActionColumn = __keyTableActionColumn,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor(
        keyTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        keyTableActionColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = HierarchicaltableProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = HierarchicaltableProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor(
    keyTableId = _root_.scala.None,
    keyTableActionColumn = _root_.scala.None
  )
  implicit class HierarchicalTableViewKeyTableDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor](_l) {
    def keyTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getKeyTableId)((c_, f_) => c_.copy(keyTableId = _root_.scala.Option(f_)))
    def optionalKeyTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.keyTableId)((c_, f_) => c_.copy(keyTableId = f_))
    def keyTableActionColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getKeyTableActionColumn)((c_, f_) => c_.copy(keyTableActionColumn = _root_.scala.Option(f_)))
    def optionalKeyTableActionColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.keyTableActionColumn)((c_, f_) => c_.copy(keyTableActionColumn = f_))
  }
  final val KEY_TABLE_ID_FIELD_NUMBER = 1
  final val KEY_TABLE_ACTION_COLUMN_FIELD_NUMBER = 2
  def of(
    keyTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    keyTableActionColumn: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor = _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewKeyTableDescriptor(
    keyTableId,
    keyTableActionColumn
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.HierarchicalTableViewKeyTableDescriptor])
}
