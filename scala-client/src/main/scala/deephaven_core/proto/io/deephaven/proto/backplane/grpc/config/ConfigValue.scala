// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.config

@SerialVersionUID(0L)
final case class ConfigValue(
    kind: io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ConfigValue] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (kind.stringValue.isDefined) {
        val __value = kind.stringValue.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      kind.stringValue.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getStringValue: _root_.scala.Predef.String = kind.stringValue.getOrElse("")
    def withStringValue(__v: _root_.scala.Predef.String): ConfigValue = copy(kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.StringValue(__v))
    def clearKind: ConfigValue = copy(kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.Empty)
    def withKind(__v: io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind): ConfigValue = copy(kind = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => kind.stringValue.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => kind.stringValue.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.config.ConfigValue.type = io.deephaven.proto.backplane.grpc.config.ConfigValue
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ConfigValue])
}

object ConfigValue extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.config.ConfigValue] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.config.ConfigValue] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.config.ConfigValue = {
    var __kind: io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 26 =>
          __kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.StringValue(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.config.ConfigValue(
        kind = __kind,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.config.ConfigValue] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.config.ConfigValue(
        kind = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.StringValue(_))
            .getOrElse(io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConfigProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConfigProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.config.ConfigValue(
    kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.Empty
  )
  sealed trait Kind extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isStringValue: _root_.scala.Boolean = false
    def stringValue: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object Kind {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class StringValue(value: _root_.scala.Predef.String) extends io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind {
      type ValueType = _root_.scala.Predef.String
      override def isStringValue: _root_.scala.Boolean = true
      override def stringValue: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  implicit class ConfigValueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.config.ConfigValue]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.config.ConfigValue](_l) {
    def stringValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStringValue)((c_, f_) => c_.copy(kind = io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind.StringValue(f_)))
    def kind: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
  }
  final val STRING_VALUE_FIELD_NUMBER = 3
  def of(
    kind: io.deephaven.proto.backplane.grpc.config.ConfigValue.Kind
  ): _root_.io.deephaven.proto.backplane.grpc.config.ConfigValue = _root_.io.deephaven.proto.backplane.grpc.config.ConfigValue(
    kind
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ConfigValue])
}
