// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class TableReference(
    ref: io.deephaven.proto.backplane.grpc.table.TableReference.Ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TableReference] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (ref.ticket.isDefined) {
        val __value = ref.ticket.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (ref.batchOffset.isDefined) {
        val __value = ref.batchOffset.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(2, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ref.ticket.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      ref.batchOffset.foreach { __v =>
        val __m = __v
        _output__.writeSInt32(2, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getTicket: io.deephaven.proto.backplane.grpc.ticket.Ticket = ref.ticket.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def withTicket(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): TableReference = copy(ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Ticket(__v))
    def getBatchOffset: _root_.scala.Int = ref.batchOffset.getOrElse(0)
    def withBatchOffset(__v: _root_.scala.Int): TableReference = copy(ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.BatchOffset(__v))
    def clearRef: TableReference = copy(ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Empty)
    def withRef(__v: io.deephaven.proto.backplane.grpc.table.TableReference.Ref): TableReference = copy(ref = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ref.ticket.orNull
        case 2 => ref.batchOffset.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ref.ticket.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => ref.batchOffset.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.TableReference.type = io.deephaven.proto.backplane.grpc.table.TableReference
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.TableReference])
}

object TableReference extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.TableReference] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.TableReference] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.TableReference = {
    var __ref: io.deephaven.proto.backplane.grpc.table.TableReference.Ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Ticket(__ref.ticket.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.BatchOffset(_input__.readSInt32())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.TableReference(
        ref = __ref,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.TableReference(
        ref = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]).map(io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Ticket(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.TableReference.Ref](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]).map(io.deephaven.proto.backplane.grpc.table.TableReference.Ref.BatchOffset(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.TableReference(
    ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Empty
  )
  sealed trait Ref extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTicket: _root_.scala.Boolean = false
    def isBatchOffset: _root_.scala.Boolean = false
    def ticket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    def batchOffset: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
  }
  object Ref {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.TableReference.Ref {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Ticket(value: io.deephaven.proto.backplane.grpc.ticket.Ticket) extends io.deephaven.proto.backplane.grpc.table.TableReference.Ref {
      type ValueType = io.deephaven.proto.backplane.grpc.ticket.Ticket
      override def isTicket: _root_.scala.Boolean = true
      override def ticket: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class BatchOffset(value: _root_.scala.Int) extends io.deephaven.proto.backplane.grpc.table.TableReference.Ref {
      type ValueType = _root_.scala.Int
      override def isBatchOffset: _root_.scala.Boolean = true
      override def batchOffset: _root_.scala.Option[_root_.scala.Int] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class TableReferenceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference](_l) {
    def ticket: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getTicket)((c_, f_) => c_.copy(ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.Ticket(f_)))
    def batchOffset: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getBatchOffset)((c_, f_) => c_.copy(ref = io.deephaven.proto.backplane.grpc.table.TableReference.Ref.BatchOffset(f_)))
    def ref: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference.Ref] = field(_.ref)((c_, f_) => c_.copy(ref = f_))
  }
  final val TICKET_FIELD_NUMBER = 1
  final val BATCH_OFFSET_FIELD_NUMBER = 2
  def of(
    ref: io.deephaven.proto.backplane.grpc.table.TableReference.Ref
  ): _root_.io.deephaven.proto.backplane.grpc.table.TableReference = _root_.io.deephaven.proto.backplane.grpc.table.TableReference(
    ref
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.TableReference])
}
