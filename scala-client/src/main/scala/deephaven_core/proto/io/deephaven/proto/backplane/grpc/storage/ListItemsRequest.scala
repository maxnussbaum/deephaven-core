// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.storage

/** @param path
  *   The path to the directory to list. empty to list top level
  * @param filterGlob
  *   A pattern to filter for, with "?" to match any one character, "*" to match any number of characters, and "{}"s
  *   to hold a comma-separated list of possible matches. The format follows Java's FileSystem.getPathMatcher (see
  *   https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystem.html#getPathMatcher-java.lang.String-),
  *   except without allowing subdirectories with / or **.
  */
@SerialVersionUID(0L)
final case class ListItemsRequest(
    path: _root_.scala.Predef.String = "",
    filterGlob: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ListItemsRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = path
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (filterGlob.isDefined) {
        val __value = filterGlob.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = path
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      filterGlob.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def withPath(__v: _root_.scala.Predef.String): ListItemsRequest = copy(path = __v)
    def getFilterGlob: _root_.scala.Predef.String = filterGlob.getOrElse("")
    def clearFilterGlob: ListItemsRequest = copy(filterGlob = _root_.scala.None)
    def withFilterGlob(__v: _root_.scala.Predef.String): ListItemsRequest = copy(filterGlob = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = path
          if (__t != "") __t else null
        }
        case 4 => filterGlob.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(path)
        case 4 => filterGlob.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.storage.ListItemsRequest.type = io.deephaven.proto.backplane.grpc.storage.ListItemsRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ListItemsRequest])
}

object ListItemsRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.storage.ListItemsRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.storage.ListItemsRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.storage.ListItemsRequest = {
    var __path: _root_.scala.Predef.String = ""
    var __filterGlob: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __path = _input__.readStringRequireUtf8()
        case 34 =>
          __filterGlob = _root_.scala.Option(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.storage.ListItemsRequest(
        path = __path,
        filterGlob = __filterGlob,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.storage.ListItemsRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.storage.ListItemsRequest(
        path = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        filterGlob = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = StorageProto.javaDescriptor.getMessageTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = StorageProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.storage.ListItemsRequest(
    path = "",
    filterGlob = _root_.scala.None
  )
  implicit class ListItemsRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.storage.ListItemsRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.storage.ListItemsRequest](_l) {
    def path: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.path)((c_, f_) => c_.copy(path = f_))
    def filterGlob: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFilterGlob)((c_, f_) => c_.copy(filterGlob = _root_.scala.Option(f_)))
    def optionalFilterGlob: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.filterGlob)((c_, f_) => c_.copy(filterGlob = f_))
  }
  final val PATH_FIELD_NUMBER = 1
  final val FILTER_GLOB_FIELD_NUMBER = 4
  def of(
    path: _root_.scala.Predef.String,
    filterGlob: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.grpc.storage.ListItemsRequest = _root_.io.deephaven.proto.backplane.grpc.storage.ListItemsRequest(
    path,
    filterGlob
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ListItemsRequest])
}
