// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class RunChartDownsampleRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    pixelCount: _root_.scala.Int = 0,
    zoomRange: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange] = _root_.scala.None,
    xColumnName: _root_.scala.Predef.String = "",
    yColumnNames: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RunChartDownsampleRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sourceId.isDefined) {
        val __value = sourceId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = pixelCount
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      if (zoomRange.isDefined) {
        val __value = zoomRange.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = xColumnName
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      yColumnNames.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sourceId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = pixelCount
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      zoomRange.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = xColumnName
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      yColumnNames.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: RunChartDownsampleRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): RunChartDownsampleRequest = copy(resultId = Option(__v))
    def getSourceId: io.deephaven.proto.backplane.grpc.table.TableReference = sourceId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearSourceId: RunChartDownsampleRequest = copy(sourceId = _root_.scala.None)
    def withSourceId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): RunChartDownsampleRequest = copy(sourceId = Option(__v))
    def withPixelCount(__v: _root_.scala.Int): RunChartDownsampleRequest = copy(pixelCount = __v)
    def getZoomRange: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange = zoomRange.getOrElse(io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange.defaultInstance)
    def clearZoomRange: RunChartDownsampleRequest = copy(zoomRange = _root_.scala.None)
    def withZoomRange(__v: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange): RunChartDownsampleRequest = copy(zoomRange = Option(__v))
    def withXColumnName(__v: _root_.scala.Predef.String): RunChartDownsampleRequest = copy(xColumnName = __v)
    def clearYColumnNames = copy(yColumnNames = _root_.scala.Seq.empty)
    def addYColumnNames(__vs: _root_.scala.Predef.String *): RunChartDownsampleRequest = addAllYColumnNames(__vs)
    def addAllYColumnNames(__vs: Iterable[_root_.scala.Predef.String]): RunChartDownsampleRequest = copy(yColumnNames = yColumnNames ++ __vs)
    def withYColumnNames(__v: _root_.scala.Seq[_root_.scala.Predef.String]): RunChartDownsampleRequest = copy(yColumnNames = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => sourceId.orNull
        case 3 => {
          val __t = pixelCount
          if (__t != 0) __t else null
        }
        case 4 => zoomRange.orNull
        case 5 => {
          val __t = xColumnName
          if (__t != "") __t else null
        }
        case 6 => yColumnNames
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sourceId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PInt(pixelCount)
        case 4 => zoomRange.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => _root_.scalapb.descriptors.PString(xColumnName)
        case 6 => _root_.scalapb.descriptors.PRepeated(yColumnNames.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.type = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest])
}

object RunChartDownsampleRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __pixelCount: _root_.scala.Int = 0
    var __zoomRange: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange] = _root_.scala.None
    var __xColumnName: _root_.scala.Predef.String = ""
    val __yColumnNames: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sourceId = _root_.scala.Option(__sourceId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 24 =>
          __pixelCount = _input__.readInt32()
        case 34 =>
          __zoomRange = _root_.scala.Option(__zoomRange.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __xColumnName = _input__.readStringRequireUtf8()
        case 50 =>
          __yColumnNames += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest(
        resultId = __resultId,
        sourceId = __sourceId,
        pixelCount = __pixelCount,
        zoomRange = __zoomRange,
        xColumnName = __xColumnName,
        yColumnNames = __yColumnNames.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        sourceId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        pixelCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        zoomRange = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange]]),
        xColumnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        yColumnNames = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(59)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(59)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest(
    resultId = _root_.scala.None,
    sourceId = _root_.scala.None,
    pixelCount = 0,
    zoomRange = _root_.scala.None,
    xColumnName = "",
    yColumnNames = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class ZoomRange(
      minDateNanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
      maxDateNanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ZoomRange] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (minDateNanos.isDefined) {
          val __value = minDateNanos.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        };
        if (maxDateNanos.isDefined) {
          val __value = maxDateNanos.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        minDateNanos.foreach { __v =>
          val __m = __v
          _output__.writeInt64(1, __m)
        };
        maxDateNanos.foreach { __v =>
          val __m = __v
          _output__.writeInt64(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getMinDateNanos: _root_.scala.Long = minDateNanos.getOrElse(0L)
      def clearMinDateNanos: ZoomRange = copy(minDateNanos = _root_.scala.None)
      def withMinDateNanos(__v: _root_.scala.Long): ZoomRange = copy(minDateNanos = Option(__v))
      def getMaxDateNanos: _root_.scala.Long = maxDateNanos.getOrElse(0L)
      def clearMaxDateNanos: ZoomRange = copy(maxDateNanos = _root_.scala.None)
      def withMaxDateNanos(__v: _root_.scala.Long): ZoomRange = copy(maxDateNanos = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => minDateNanos.orNull
          case 2 => maxDateNanos.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => minDateNanos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => maxDateNanos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange.type = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange])
  }
  
  object ZoomRange extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange = {
      var __minDateNanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      var __maxDateNanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __minDateNanos = _root_.scala.Option(_input__.readInt64())
          case 16 =>
            __maxDateNanos = _root_.scala.Option(_input__.readInt64())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange(
          minDateNanos = __minDateNanos,
          maxDateNanos = __maxDateNanos,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange(
          minDateNanos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]),
          maxDateNanos = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange(
      minDateNanos = _root_.scala.None,
      maxDateNanos = _root_.scala.None
    )
    implicit class ZoomRangeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange](_l) {
      def minDateNanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMinDateNanos)((c_, f_) => c_.copy(minDateNanos = _root_.scala.Option(f_)))
      def optionalMinDateNanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.minDateNanos)((c_, f_) => c_.copy(minDateNanos = f_))
      def maxDateNanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getMaxDateNanos)((c_, f_) => c_.copy(maxDateNanos = _root_.scala.Option(f_)))
      def optionalMaxDateNanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Long]] = field(_.maxDateNanos)((c_, f_) => c_.copy(maxDateNanos = f_))
    }
    final val MIN_DATE_NANOS_FIELD_NUMBER = 1
    final val MAX_DATE_NANOS_FIELD_NUMBER = 2
    def of(
      minDateNanos: _root_.scala.Option[_root_.scala.Long],
      maxDateNanos: _root_.scala.Option[_root_.scala.Long]
    ): _root_.io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange = _root_.io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange(
      minDateNanos,
      maxDateNanos
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest.ZoomRange])
  }
  
  implicit class RunChartDownsampleRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def sourceId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getSourceId)((c_, f_) => c_.copy(sourceId = _root_.scala.Option(f_)))
    def optionalSourceId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.sourceId)((c_, f_) => c_.copy(sourceId = f_))
    def pixelCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.pixelCount)((c_, f_) => c_.copy(pixelCount = f_))
    def zoomRange: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange] = field(_.getZoomRange)((c_, f_) => c_.copy(zoomRange = _root_.scala.Option(f_)))
    def optionalZoomRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange]] = field(_.zoomRange)((c_, f_) => c_.copy(zoomRange = f_))
    def xColumnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.xColumnName)((c_, f_) => c_.copy(xColumnName = f_))
    def yColumnNames: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.yColumnNames)((c_, f_) => c_.copy(yColumnNames = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val SOURCE_ID_FIELD_NUMBER = 2
  final val PIXEL_COUNT_FIELD_NUMBER = 3
  final val ZOOM_RANGE_FIELD_NUMBER = 4
  final val X_COLUMN_NAME_FIELD_NUMBER = 5
  final val Y_COLUMN_NAMES_FIELD_NUMBER = 6
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    sourceId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    pixelCount: _root_.scala.Int,
    zoomRange: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest.ZoomRange],
    xColumnName: _root_.scala.Predef.String,
    yColumnNames: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest = _root_.io.deephaven.proto.backplane.grpc.table.RunChartDownsampleRequest(
    resultId,
    sourceId,
    pixelCount,
    zoomRange,
    xColumnName,
    yColumnNames
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.RunChartDownsampleRequest])
}
