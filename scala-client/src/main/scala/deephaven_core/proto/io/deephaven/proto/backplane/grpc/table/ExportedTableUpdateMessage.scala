// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class ExportedTableUpdateMessage(
    exportId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    size: _root_.scala.Long = 0L,
    updateFailureMessage: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ExportedTableUpdateMessage] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (exportId.isDefined) {
        val __value = exportId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = size
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(2, __value)
        }
      };
      
      {
        val __value = updateFailureMessage
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      exportId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = size
        if (__v != 0L) {
          _output__.writeSInt64(2, __v)
        }
      };
      {
        val __v = updateFailureMessage
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getExportId: io.deephaven.proto.backplane.grpc.ticket.Ticket = exportId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearExportId: ExportedTableUpdateMessage = copy(exportId = _root_.scala.None)
    def withExportId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): ExportedTableUpdateMessage = copy(exportId = Option(__v))
    def withSize(__v: _root_.scala.Long): ExportedTableUpdateMessage = copy(size = __v)
    def withUpdateFailureMessage(__v: _root_.scala.Predef.String): ExportedTableUpdateMessage = copy(updateFailureMessage = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => exportId.orNull
        case 2 => {
          val __t = size
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = updateFailureMessage
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => exportId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PLong(size)
        case 3 => _root_.scalapb.descriptors.PString(updateFailureMessage)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage.type = io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage])
}

object ExportedTableUpdateMessage extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage = {
    var __exportId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __size: _root_.scala.Long = 0L
    var __updateFailureMessage: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __exportId = _root_.scala.Option(__exportId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __size = _input__.readSInt64()
        case 26 =>
          __updateFailureMessage = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage(
        exportId = __exportId,
        size = __size,
        updateFailureMessage = __updateFailureMessage,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage(
        exportId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        size = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        updateFailureMessage = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage(
    exportId = _root_.scala.None,
    size = 0L,
    updateFailureMessage = ""
  )
  implicit class ExportedTableUpdateMessageLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage](_l) {
    def exportId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getExportId)((c_, f_) => c_.copy(exportId = _root_.scala.Option(f_)))
    def optionalExportId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.exportId)((c_, f_) => c_.copy(exportId = f_))
    def size: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.size)((c_, f_) => c_.copy(size = f_))
    def updateFailureMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.updateFailureMessage)((c_, f_) => c_.copy(updateFailureMessage = f_))
  }
  final val EXPORT_ID_FIELD_NUMBER = 1
  final val SIZE_FIELD_NUMBER = 2
  final val UPDATE_FAILURE_MESSAGE_FIELD_NUMBER = 3
  def of(
    exportId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    size: _root_.scala.Long,
    updateFailureMessage: _root_.scala.Predef.String
  ): _root_.io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage = _root_.io.deephaven.proto.backplane.grpc.table.ExportedTableUpdateMessage(
    exportId,
    size,
    updateFailureMessage
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.ExportedTableUpdateMessage])
}
