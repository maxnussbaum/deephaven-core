// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class GetPullDiagnosticResponse(
    kind: _root_.scala.Predef.String = "",
    resultId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    items: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetPullDiagnosticResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = kind
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      items.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = kind
        if (!__v.isEmpty) {
          _output__.writeString(1, __v)
        }
      };
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      items.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withKind(__v: _root_.scala.Predef.String): GetPullDiagnosticResponse = copy(kind = __v)
    def getResultId: _root_.scala.Predef.String = resultId.getOrElse("")
    def clearResultId: GetPullDiagnosticResponse = copy(resultId = _root_.scala.None)
    def withResultId(__v: _root_.scala.Predef.String): GetPullDiagnosticResponse = copy(resultId = Option(__v))
    def clearItems = copy(items = _root_.scala.Seq.empty)
    def addItems(__vs: io.deephaven.proto.backplane.script.grpc.console.Diagnostic *): GetPullDiagnosticResponse = addAllItems(__vs)
    def addAllItems(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.Diagnostic]): GetPullDiagnosticResponse = copy(items = items ++ __vs)
    def withItems(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic]): GetPullDiagnosticResponse = copy(items = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = kind
          if (__t != "") __t else null
        }
        case 2 => resultId.orNull
        case 3 => items
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(kind)
        case 2 => resultId.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(items.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse.type = io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse])
}

object GetPullDiagnosticResponse extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse = {
    var __kind: _root_.scala.Predef.String = ""
    var __resultId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    val __items: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.Diagnostic] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.Diagnostic]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __kind = _input__.readStringRequireUtf8()
        case 18 =>
          __resultId = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 26 =>
          __items += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.Diagnostic](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse(
        kind = __kind,
        resultId = __resultId,
        items = __items.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse(
        kind = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        items = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsoleProto.javaDescriptor.getMessageTypes().get(40)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsoleProto.scalaDescriptor.messages(40)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = io.deephaven.proto.backplane.script.grpc.console.Diagnostic
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse(
    kind = "",
    resultId = _root_.scala.None,
    items = _root_.scala.Seq.empty
  )
  implicit class GetPullDiagnosticResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse](_l) {
    def kind: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.kind)((c_, f_) => c_.copy(kind = f_))
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def items: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic]] = field(_.items)((c_, f_) => c_.copy(items = f_))
  }
  final val KIND_FIELD_NUMBER = 1
  final val RESULT_ID_FIELD_NUMBER = 2
  final val ITEMS_FIELD_NUMBER = 3
  def of(
    kind: _root_.scala.Predef.String,
    resultId: _root_.scala.Option[_root_.scala.Predef.String],
    items: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.Diagnostic]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse = _root_.io.deephaven.proto.backplane.script.grpc.console.GetPullDiagnosticResponse(
    kind,
    resultId,
    items
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.GetPullDiagnosticResponse])
}
