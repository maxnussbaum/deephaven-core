// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.`object`

/**
  * Client payload for the MessageStream.
  */
@SerialVersionUID(0L)
final case class StreamRequest(
    message: io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StreamRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (message.connect.isDefined) {
        val __value = message.connect.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (message.data.isDefined) {
        val __value = message.data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      message.connect.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      message.data.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getConnect: io.deephaven.proto.backplane.grpc.`object`.ConnectRequest = message.connect.getOrElse(io.deephaven.proto.backplane.grpc.`object`.ConnectRequest.defaultInstance)
    def withConnect(__v: io.deephaven.proto.backplane.grpc.`object`.ConnectRequest): StreamRequest = copy(message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Connect(__v))
    def getData: io.deephaven.proto.backplane.grpc.`object`.ClientData = message.data.getOrElse(io.deephaven.proto.backplane.grpc.`object`.ClientData.defaultInstance)
    def withData(__v: io.deephaven.proto.backplane.grpc.`object`.ClientData): StreamRequest = copy(message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Data(__v))
    def clearMessage: StreamRequest = copy(message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Empty)
    def withMessage(__v: io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message): StreamRequest = copy(message = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => message.connect.orNull
        case 2 => message.data.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => message.connect.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => message.data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.`object`.StreamRequest.type = io.deephaven.proto.backplane.grpc.`object`.StreamRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.StreamRequest])
}

object StreamRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.`object`.StreamRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.`object`.StreamRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.`object`.StreamRequest = {
    var __message: io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Connect(__message.connect.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.`object`.ConnectRequest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Data(__message.data.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.`object`.ClientData](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.`object`.StreamRequest(
        message = __message,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.`object`.StreamRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.`object`.StreamRequest(
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.`object`.ConnectRequest]]).map(io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Connect(_))
            .orElse[io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.`object`.ClientData]]).map(io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Data(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ObjectProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ObjectProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.`object`.ConnectRequest
      case 2 => __out = io.deephaven.proto.backplane.grpc.`object`.ClientData
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.`object`.StreamRequest(
    message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Empty
  )
  sealed trait Message extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isConnect: _root_.scala.Boolean = false
    def isData: _root_.scala.Boolean = false
    def connect: _root_.scala.Option[io.deephaven.proto.backplane.grpc.`object`.ConnectRequest] = _root_.scala.None
    def data: _root_.scala.Option[io.deephaven.proto.backplane.grpc.`object`.ClientData] = _root_.scala.None
  }
  object Message {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Connect(value: io.deephaven.proto.backplane.grpc.`object`.ConnectRequest) extends io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message {
      type ValueType = io.deephaven.proto.backplane.grpc.`object`.ConnectRequest
      override def isConnect: _root_.scala.Boolean = true
      override def connect: _root_.scala.Option[io.deephaven.proto.backplane.grpc.`object`.ConnectRequest] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class Data(value: io.deephaven.proto.backplane.grpc.`object`.ClientData) extends io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message {
      type ValueType = io.deephaven.proto.backplane.grpc.`object`.ClientData
      override def isData: _root_.scala.Boolean = true
      override def data: _root_.scala.Option[io.deephaven.proto.backplane.grpc.`object`.ClientData] = Some(value)
      override def number: _root_.scala.Int = 2
    }
  }
  implicit class StreamRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.StreamRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.StreamRequest](_l) {
    def connect: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.ConnectRequest] = field(_.getConnect)((c_, f_) => c_.copy(message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Connect(f_)))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.ClientData] = field(_.getData)((c_, f_) => c_.copy(message = io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message.Data(f_)))
    def message: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val CONNECT_FIELD_NUMBER = 1
  final val DATA_FIELD_NUMBER = 2
  def of(
    message: io.deephaven.proto.backplane.grpc.`object`.StreamRequest.Message
  ): _root_.io.deephaven.proto.backplane.grpc.`object`.StreamRequest = _root_.io.deephaven.proto.backplane.grpc.`object`.StreamRequest(
    message
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.StreamRequest])
}
