// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.hierarchicaltable


object HierarchicalTableServiceGrpc {
  val METHOD_ROLLUP: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest, io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.HierarchicalTableService", "Rollup"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_TREE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest, io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.HierarchicalTableService", "Tree"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_APPLY: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.HierarchicalTableService", "Apply"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_VIEW: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest, io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.HierarchicalTableService", "View"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_EXPORT_SOURCE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest, io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.HierarchicalTableService", "ExportSource"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.HierarchicalTableService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor))
      .addMethod(METHOD_ROLLUP)
      .addMethod(METHOD_TREE)
      .addMethod(METHOD_APPLY)
      .addMethod(METHOD_VIEW)
      .addMethod(METHOD_EXPORT_SOURCE)
      .build()
  
  /** This service provides tools to create and view hierarchical tables (rollups and trees).
    */
  trait HierarchicalTableService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[HierarchicalTableService] = HierarchicalTableService
    /** Applies a rollup operation to a Table and exports the resulting RollupTable
      */
    def rollup(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse]
    /** Applies a tree operation to a Table and exports the resulting TreeTable
      */
    def tree(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse]
    /** Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
      * HierarchicalTable
      */
    def apply(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse]
    /** Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
      * the resulting HierarchicalTableView for subsequent snapshot or subscription requests
      */
    def view(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse]
    /** Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
      */
    def exportSource(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]
  }
  
  object HierarchicalTableService extends _root_.scalapb.grpc.ServiceCompanion[HierarchicalTableService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[HierarchicalTableService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: HierarchicalTableService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_ROLLUP,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse]) => {
          serviceImpl.rollup(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_TREE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse]) => {
          serviceImpl.tree(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_APPLY,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse]) => {
          serviceImpl.apply(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_VIEW,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse]) => {
          serviceImpl.view(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_EXPORT_SOURCE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse]) => {
          serviceImpl.exportSource(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /** This service provides tools to create and view hierarchical tables (rollups and trees).
    */
  trait HierarchicalTableServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[HierarchicalTableService] = HierarchicalTableService
    /** Applies a rollup operation to a Table and exports the resulting RollupTable
      */
    def rollup(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse
    /** Applies a tree operation to a Table and exports the resulting TreeTable
      */
    def tree(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse
    /** Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
      * HierarchicalTable
      */
    def apply(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse
    /** Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
      * the resulting HierarchicalTableView for subsequent snapshot or subscription requests
      */
    def view(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse
    /** Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
      */
    def exportSource(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse
  }
  
  class HierarchicalTableServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[HierarchicalTableServiceBlockingStub](channel, options) with HierarchicalTableServiceBlockingClient {
    /** Applies a rollup operation to a Table and exports the resulting RollupTable
      */
    override def rollup(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ROLLUP, options, request)
    }
    
    /** Applies a tree operation to a Table and exports the resulting TreeTable
      */
    override def tree(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_TREE, options, request)
    }
    
    /** Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
      * HierarchicalTable
      */
    override def apply(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_APPLY, options, request)
    }
    
    /** Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
      * the resulting HierarchicalTableView for subsequent snapshot or subscription requests
      */
    override def view(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest): io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_VIEW, options, request)
    }
    
    /** Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
      */
    override def exportSource(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest): io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_EXPORT_SOURCE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): HierarchicalTableServiceBlockingStub = new HierarchicalTableServiceBlockingStub(channel, options)
  }
  
  class HierarchicalTableServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[HierarchicalTableServiceStub](channel, options) with HierarchicalTableService {
    /** Applies a rollup operation to a Table and exports the resulting RollupTable
      */
    override def rollup(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ROLLUP, options, request)
    }
    
    /** Applies a tree operation to a Table and exports the resulting TreeTable
      */
    override def tree(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_TREE, options, request)
    }
    
    /** Applies operations to an existing HierarchicalTable (RollupTable or TreeTable) and exports the resulting
      * HierarchicalTable
      */
    override def apply(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableApplyResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_APPLY, options, request)
    }
    
    /** Creates a view associating a Table of expansion keys and actions with an existing HierarchicalTable and exports
      * the resulting HierarchicalTableView for subsequent snapshot or subscription requests
      */
    override def view(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableViewResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_VIEW, options, request)
    }
    
    /** Exports the source Table for a HierarchicalTable (Rollup or TreeTable)
      */
    override def exportSource(request: io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicalTableSourceExportRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.table.ExportedTableCreationResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_EXPORT_SOURCE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): HierarchicalTableServiceStub = new HierarchicalTableServiceStub(channel, options)
  }
  
  object HierarchicalTableServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[HierarchicalTableServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): HierarchicalTableServiceStub = new HierarchicalTableServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[HierarchicalTableServiceStub] = this
  }
  
  def bindService(serviceImpl: HierarchicalTableService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = HierarchicalTableService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): HierarchicalTableServiceBlockingStub = new HierarchicalTableServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): HierarchicalTableServiceStub = new HierarchicalTableServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getServices().get(0)
  
}