// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console

/** @param maxMemory
  *   Returns the maximum amount of memory that the Java virtual machine will attempt to use.
  *   If there is no inherent limit then the value Long.MAX_VALUE will be returned.
  *   the maximum amount of memory that the virtual machine will attempt to use, measured in bytes
  * @param totalMemory
  *   Returns the total amount of memory in the Java virtual machine. The value returned by this method may vary over time, depending on the host environment.
  *   Note that the amount of memory required to hold an object of any given type may be implementation-dependent.
  *   the total amount of memory currently available for current and future objects, measured in bytes.
  * @param freeMemory
  *   Returns the amount of free memory in the Java Virtual Machine. Calling the gc method may result in increasing the value returned by freeMemory.
  *   an approximation to the total amount of memory currently available for future allocated objects, measured in bytes.
  */
@SerialVersionUID(0L)
final case class GetHeapInfoResponse(
    maxMemory: _root_.scala.Long = 0L,
    totalMemory: _root_.scala.Long = 0L,
    freeMemory: _root_.scala.Long = 0L,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetHeapInfoResponse] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = maxMemory
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = totalMemory
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = freeMemory
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = maxMemory
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = totalMemory
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = freeMemory
        if (__v != 0L) {
          _output__.writeInt64(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withMaxMemory(__v: _root_.scala.Long): GetHeapInfoResponse = copy(maxMemory = __v)
    def withTotalMemory(__v: _root_.scala.Long): GetHeapInfoResponse = copy(totalMemory = __v)
    def withFreeMemory(__v: _root_.scala.Long): GetHeapInfoResponse = copy(freeMemory = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = maxMemory
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = totalMemory
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = freeMemory
          if (__t != 0L) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(maxMemory)
        case 2 => _root_.scalapb.descriptors.PLong(totalMemory)
        case 3 => _root_.scalapb.descriptors.PLong(freeMemory)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse.type = io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse])
}

object GetHeapInfoResponse extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse = {
    var __maxMemory: _root_.scala.Long = 0L
    var __totalMemory: _root_.scala.Long = 0L
    var __freeMemory: _root_.scala.Long = 0L
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __maxMemory = _input__.readInt64()
        case 16 =>
          __totalMemory = _input__.readInt64()
        case 24 =>
          __freeMemory = _input__.readInt64()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse(
        maxMemory = __maxMemory,
        totalMemory = __totalMemory,
        freeMemory = __freeMemory,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse(
        maxMemory = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        totalMemory = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        freeMemory = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Long]).getOrElse(0L)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsoleProto.javaDescriptor.getMessageTypes().get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsoleProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse(
    maxMemory = 0L,
    totalMemory = 0L,
    freeMemory = 0L
  )
  implicit class GetHeapInfoResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse](_l) {
    def maxMemory: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.maxMemory)((c_, f_) => c_.copy(maxMemory = f_))
    def totalMemory: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.totalMemory)((c_, f_) => c_.copy(totalMemory = f_))
    def freeMemory: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.freeMemory)((c_, f_) => c_.copy(freeMemory = f_))
  }
  final val MAX_MEMORY_FIELD_NUMBER = 1
  final val TOTAL_MEMORY_FIELD_NUMBER = 2
  final val FREE_MEMORY_FIELD_NUMBER = 3
  def of(
    maxMemory: _root_.scala.Long,
    totalMemory: _root_.scala.Long,
    freeMemory: _root_.scala.Long
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse = _root_.io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse(
    maxMemory,
    totalMemory,
    freeMemory
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.GetHeapInfoResponse])
}
