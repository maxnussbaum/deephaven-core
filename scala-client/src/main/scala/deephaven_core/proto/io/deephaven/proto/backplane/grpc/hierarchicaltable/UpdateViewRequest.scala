// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.hierarchicaltable

/** @param nodeType
  *   The node types that will have this update_view applied. Ignored for TreeTable.
  */
@SerialVersionUID(0L)
final case class UpdateViewRequest(
    columnSpec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable] = _root_.scala.None,
    nodeType: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType.TYPE_NOT_SPECIFIED,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[UpdateViewRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (columnSpec.isDefined) {
        val __value = columnSpec.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = nodeType.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      columnSpec.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = nodeType.value
        if (__v != 0) {
          _output__.writeEnum(2, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getColumnSpec: io.deephaven.proto.backplane.grpc.table.Selectable = columnSpec.getOrElse(io.deephaven.proto.backplane.grpc.table.Selectable.defaultInstance)
    def clearColumnSpec: UpdateViewRequest = copy(columnSpec = _root_.scala.None)
    def withColumnSpec(__v: io.deephaven.proto.backplane.grpc.table.Selectable): UpdateViewRequest = copy(columnSpec = Option(__v))
    def withNodeType(__v: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType): UpdateViewRequest = copy(nodeType = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => columnSpec.orNull
        case 2 => {
          val __t = nodeType.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => columnSpec.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PEnum(nodeType.scalaValueDescriptor)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest.type = io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.UpdateViewRequest])
}

object UpdateViewRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest = {
    var __columnSpec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable] = _root_.scala.None
    var __nodeType: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType.TYPE_NOT_SPECIFIED
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __columnSpec = _root_.scala.Option(__columnSpec.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Selectable](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __nodeType = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType.fromValue(_input__.readEnum())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest(
        columnSpec = __columnSpec,
        nodeType = __nodeType,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest(
        columnSpec = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable]]),
        nodeType = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType.TYPE_NOT_SPECIFIED.scalaValueDescriptor).number)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getMessageTypes().get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.Selectable
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest(
    columnSpec = _root_.scala.None,
    nodeType = io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType.TYPE_NOT_SPECIFIED
  )
  implicit class UpdateViewRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest](_l) {
    def columnSpec: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Selectable] = field(_.getColumnSpec)((c_, f_) => c_.copy(columnSpec = _root_.scala.Option(f_)))
    def optionalColumnSpec: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable]] = field(_.columnSpec)((c_, f_) => c_.copy(columnSpec = f_))
    def nodeType: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType] = field(_.nodeType)((c_, f_) => c_.copy(nodeType = f_))
  }
  final val COLUMN_SPEC_FIELD_NUMBER = 1
  final val NODE_TYPE_FIELD_NUMBER = 2
  def of(
    columnSpec: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.Selectable],
    nodeType: io.deephaven.proto.backplane.grpc.hierarchicaltable.RollupNodeType
  ): _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest = _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.UpdateViewRequest(
    columnSpec,
    nodeType
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.UpdateViewRequest])
}
