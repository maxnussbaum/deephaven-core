// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console


object ConsoleServiceGrpc {
  val METHOD_GET_CONSOLE_TYPES: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest, io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "GetConsoleTypes"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_START_CONSOLE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest, io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "StartConsole"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val METHOD_GET_HEAP_INFO: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest, io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "GetHeapInfo"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(2)))
      .build()
  
  val METHOD_SUBSCRIBE_TO_LOGS: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest, io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "SubscribeToLogs"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(3)))
      .build()
  
  val METHOD_EXECUTE_COMMAND: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest, io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "ExecuteCommand"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(4)))
      .build()
  
  val METHOD_CANCEL_COMMAND: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest, io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "CancelCommand"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(5)))
      .build()
  
  val METHOD_BIND_TABLE_TO_VARIABLE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest, io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "BindTableToVariable"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(6)))
      .build()
  
  val METHOD_AUTO_COMPLETE_STREAM: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "AutoCompleteStream"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(7)))
      .build()
  
  val METHOD_CANCEL_AUTO_COMPLETE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest, io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "CancelAutoComplete"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(8)))
      .build()
  
  val METHOD_OPEN_AUTO_COMPLETE_STREAM: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.SERVER_STREAMING)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "OpenAutoCompleteStream"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(9)))
      .build()
  
  val METHOD_NEXT_AUTO_COMPLETE_STREAM: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.script.grpc.ConsoleService", "NextAutoCompleteStream"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0).getMethods().get(10)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.script.grpc.ConsoleService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor))
      .addMethod(METHOD_GET_CONSOLE_TYPES)
      .addMethod(METHOD_START_CONSOLE)
      .addMethod(METHOD_GET_HEAP_INFO)
      .addMethod(METHOD_SUBSCRIBE_TO_LOGS)
      .addMethod(METHOD_EXECUTE_COMMAND)
      .addMethod(METHOD_CANCEL_COMMAND)
      .addMethod(METHOD_BIND_TABLE_TO_VARIABLE)
      .addMethod(METHOD_AUTO_COMPLETE_STREAM)
      .addMethod(METHOD_CANCEL_AUTO_COMPLETE)
      .addMethod(METHOD_OPEN_AUTO_COMPLETE_STREAM)
      .addMethod(METHOD_NEXT_AUTO_COMPLETE_STREAM)
      .build()
  
  /**
    * Console interaction service
    */
  trait ConsoleService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConsoleService] = ConsoleService
    def getConsoleTypes(request: io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse]
    def startConsole(request: io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse]
    def getHeapInfo(request: io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse]
    def subscribeToLogs(request: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData]): _root_.scala.Unit
    def executeCommand(request: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse]
    def cancelCommand(request: io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse]
    def bindTableToVariable(request: io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse]
    /**
      * Starts a stream for autocomplete on the current session. More than one console,
      * more than one document can be edited at a time using this, and they can separately
      * be closed as well. A given document should only be edited within one stream at a
      * time.
      */
    def autoCompleteStream(responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]): _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest]
    def cancelAutoComplete(request: io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse]
    /**
      * Half of the browser-based (browser's can't do bidirectional streams without websockets)
      * implementation for AutoCompleteStream.
      */
    def openAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]): _root_.scala.Unit
    /**
      * Other half of the browser-based implementation for AutoCompleteStream.
      */
    def nextAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse]
  }
  
  object ConsoleService extends _root_.scalapb.grpc.ServiceCompanion[ConsoleService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConsoleService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ConsoleService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_GET_CONSOLE_TYPES,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse]) => {
          serviceImpl.getConsoleTypes(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_START_CONSOLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse]) => {
          serviceImpl.startConsole(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_HEAP_INFO,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse]) => {
          serviceImpl.getHeapInfo(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_SUBSCRIBE_TO_LOGS,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData]) => {
          serviceImpl.subscribeToLogs(request, observer)
        }))
      .addMethod(
        METHOD_EXECUTE_COMMAND,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse]) => {
          serviceImpl.executeCommand(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_CANCEL_COMMAND,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse]) => {
          serviceImpl.cancelCommand(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_BIND_TABLE_TO_VARIABLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse]) => {
          serviceImpl.bindTableToVariable(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_AUTO_COMPLETE_STREAM,
        _root_.io.grpc.stub.ServerCalls.asyncBidiStreamingCall((observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]) => {
          serviceImpl.autoCompleteStream(observer)
        }))
      .addMethod(
        METHOD_CANCEL_AUTO_COMPLETE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse]) => {
          serviceImpl.cancelAutoComplete(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_OPEN_AUTO_COMPLETE_STREAM,
        _root_.io.grpc.stub.ServerCalls.asyncServerStreamingCall((request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]) => {
          serviceImpl.openAutoCompleteStream(request, observer)
        }))
      .addMethod(
        METHOD_NEXT_AUTO_COMPLETE_STREAM,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse]) => {
          serviceImpl.nextAutoCompleteStream(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /**
    * Console interaction service
    */
  trait ConsoleServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConsoleService] = ConsoleService
    def getConsoleTypes(request: io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest): io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse
    def startConsole(request: io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest): io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse
    def getHeapInfo(request: io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest): io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse
    def subscribeToLogs(request: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest): scala.collection.Iterator[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData]
    def executeCommand(request: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest): io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse
    def cancelCommand(request: io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest): io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse
    def bindTableToVariable(request: io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest): io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse
    def cancelAutoComplete(request: io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest): io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse
    /**
      * Half of the browser-based (browser's can't do bidirectional streams without websockets)
      * implementation for AutoCompleteStream.
      */
    def openAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest): scala.collection.Iterator[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]
    /**
      * Other half of the browser-based implementation for AutoCompleteStream.
      */
    def nextAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest): io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse
  }
  
  class ConsoleServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ConsoleServiceBlockingStub](channel, options) with ConsoleServiceBlockingClient {
    override def getConsoleTypes(request: io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest): io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_CONSOLE_TYPES, options, request)
    }
    
    override def startConsole(request: io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest): io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_START_CONSOLE, options, request)
    }
    
    override def getHeapInfo(request: io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest): io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_HEAP_INFO, options, request)
    }
    
    override def subscribeToLogs(request: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest): scala.collection.Iterator[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_SUBSCRIBE_TO_LOGS, options, request)
    }
    
    override def executeCommand(request: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest): io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_EXECUTE_COMMAND, options, request)
    }
    
    override def cancelCommand(request: io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest): io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CANCEL_COMMAND, options, request)
    }
    
    override def bindTableToVariable(request: io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest): io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_BIND_TABLE_TO_VARIABLE, options, request)
    }
    
    override def cancelAutoComplete(request: io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest): io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_CANCEL_AUTO_COMPLETE, options, request)
    }
    
    /**
      * Half of the browser-based (browser's can't do bidirectional streams without websockets)
      * implementation for AutoCompleteStream.
      */
    override def openAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest): scala.collection.Iterator[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse] = {
      _root_.scalapb.grpc.ClientCalls.blockingServerStreamingCall(channel, METHOD_OPEN_AUTO_COMPLETE_STREAM, options, request)
    }
    
    /**
      * Other half of the browser-based implementation for AutoCompleteStream.
      */
    override def nextAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest): io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_NEXT_AUTO_COMPLETE_STREAM, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConsoleServiceBlockingStub = new ConsoleServiceBlockingStub(channel, options)
  }
  
  class ConsoleServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ConsoleServiceStub](channel, options) with ConsoleService {
    override def getConsoleTypes(request: io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.GetConsoleTypesResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_CONSOLE_TYPES, options, request)
    }
    
    override def startConsole(request: io.deephaven.proto.backplane.script.grpc.console.StartConsoleRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.StartConsoleResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_START_CONSOLE, options, request)
    }
    
    override def getHeapInfo(request: io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.GetHeapInfoResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_HEAP_INFO, options, request)
    }
    
    override def subscribeToLogs(request: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_SUBSCRIBE_TO_LOGS, options, request, responseObserver)
    }
    
    override def executeCommand(request: io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.ExecuteCommandResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_EXECUTE_COMMAND, options, request)
    }
    
    override def cancelCommand(request: io.deephaven.proto.backplane.script.grpc.console.CancelCommandRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.CancelCommandResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CANCEL_COMMAND, options, request)
    }
    
    override def bindTableToVariable(request: io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.BindTableToVariableResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_BIND_TABLE_TO_VARIABLE, options, request)
    }
    
    /**
      * Starts a stream for autocomplete on the current session. More than one console,
      * more than one document can be edited at a time using this, and they can separately
      * be closed as well. A given document should only be edited within one stream at a
      * time.
      */
    override def autoCompleteStream(responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]): _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest] = {
      _root_.scalapb.grpc.ClientCalls.asyncBidiStreamingCall(channel, METHOD_AUTO_COMPLETE_STREAM, options, responseObserver)
    }
    
    override def cancelAutoComplete(request: io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.CancelAutoCompleteResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CANCEL_AUTO_COMPLETE, options, request)
    }
    
    /**
      * Half of the browser-based (browser's can't do bidirectional streams without websockets)
      * implementation for AutoCompleteStream.
      */
    override def openAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest, responseObserver: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.script.grpc.console.AutoCompleteResponse]): _root_.scala.Unit = {
      _root_.scalapb.grpc.ClientCalls.asyncServerStreamingCall(channel, METHOD_OPEN_AUTO_COMPLETE_STREAM, options, request, responseObserver)
    }
    
    /**
      * Other half of the browser-based implementation for AutoCompleteStream.
      */
    override def nextAutoCompleteStream(request: io.deephaven.proto.backplane.script.grpc.console.AutoCompleteRequest): scala.concurrent.Future[io.deephaven.proto.backplane.script.grpc.console.BrowserNextResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_NEXT_AUTO_COMPLETE_STREAM, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConsoleServiceStub = new ConsoleServiceStub(channel, options)
  }
  
  object ConsoleServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ConsoleServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConsoleServiceStub = new ConsoleServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ConsoleServiceStub] = this
  }
  
  def bindService(serviceImpl: ConsoleService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ConsoleService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ConsoleServiceBlockingStub = new ConsoleServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ConsoleServiceStub = new ConsoleServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getServices().get(0)
  
}