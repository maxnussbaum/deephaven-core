// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

/** @param leftStartColumn
  *   Provide detailed range match parameters for the range join (alternative to providing `range_match`)
  * @param rangeMatch
  *   Specifies the range match parameters as a parseable string. Providing `range_match` in the GRPC call is the
  *   alternative to detailed range match parameters provided in the `left_start_column`, `range_start_rule`,
  *   `right_range_column`, `range_end_rule`, and `left_end_column` fields.
  */
@SerialVersionUID(0L)
final case class RangeJoinTablesRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    leftId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    rightId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None,
    exactMatchColumns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    leftStartColumn: _root_.scala.Predef.String = "",
    rangeStartRule: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.START_UNSPECIFIED,
    rightRangeColumn: _root_.scala.Predef.String = "",
    rangeEndRule: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.END_UNSPECIFIED,
    leftEndColumn: _root_.scala.Predef.String = "",
    aggregations: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation] = _root_.scala.Seq.empty,
    rangeMatch: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[RangeJoinTablesRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (leftId.isDefined) {
        val __value = leftId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (rightId.isDefined) {
        val __value = rightId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      exactMatchColumns.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      }
      
      {
        val __value = leftStartColumn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      
      {
        val __value = rangeStartRule.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, __value)
        }
      };
      
      {
        val __value = rightRangeColumn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        }
      };
      
      {
        val __value = rangeEndRule.value
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(8, __value)
        }
      };
      
      {
        val __value = leftEndColumn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        }
      };
      aggregations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = rangeMatch
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      leftId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      rightId.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      exactMatchColumns.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      {
        val __v = leftStartColumn
        if (!__v.isEmpty) {
          _output__.writeString(5, __v)
        }
      };
      {
        val __v = rangeStartRule.value
        if (__v != 0) {
          _output__.writeEnum(6, __v)
        }
      };
      {
        val __v = rightRangeColumn
        if (!__v.isEmpty) {
          _output__.writeString(7, __v)
        }
      };
      {
        val __v = rangeEndRule.value
        if (__v != 0) {
          _output__.writeEnum(8, __v)
        }
      };
      {
        val __v = leftEndColumn
        if (!__v.isEmpty) {
          _output__.writeString(9, __v)
        }
      };
      aggregations.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = rangeMatch
        if (!__v.isEmpty) {
          _output__.writeString(11, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: RangeJoinTablesRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): RangeJoinTablesRequest = copy(resultId = Option(__v))
    def getLeftId: io.deephaven.proto.backplane.grpc.table.TableReference = leftId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearLeftId: RangeJoinTablesRequest = copy(leftId = _root_.scala.None)
    def withLeftId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): RangeJoinTablesRequest = copy(leftId = Option(__v))
    def getRightId: io.deephaven.proto.backplane.grpc.table.TableReference = rightId.getOrElse(io.deephaven.proto.backplane.grpc.table.TableReference.defaultInstance)
    def clearRightId: RangeJoinTablesRequest = copy(rightId = _root_.scala.None)
    def withRightId(__v: io.deephaven.proto.backplane.grpc.table.TableReference): RangeJoinTablesRequest = copy(rightId = Option(__v))
    def clearExactMatchColumns = copy(exactMatchColumns = _root_.scala.Seq.empty)
    def addExactMatchColumns(__vs: _root_.scala.Predef.String *): RangeJoinTablesRequest = addAllExactMatchColumns(__vs)
    def addAllExactMatchColumns(__vs: Iterable[_root_.scala.Predef.String]): RangeJoinTablesRequest = copy(exactMatchColumns = exactMatchColumns ++ __vs)
    def withExactMatchColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): RangeJoinTablesRequest = copy(exactMatchColumns = __v)
    def withLeftStartColumn(__v: _root_.scala.Predef.String): RangeJoinTablesRequest = copy(leftStartColumn = __v)
    def withRangeStartRule(__v: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule): RangeJoinTablesRequest = copy(rangeStartRule = __v)
    def withRightRangeColumn(__v: _root_.scala.Predef.String): RangeJoinTablesRequest = copy(rightRangeColumn = __v)
    def withRangeEndRule(__v: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule): RangeJoinTablesRequest = copy(rangeEndRule = __v)
    def withLeftEndColumn(__v: _root_.scala.Predef.String): RangeJoinTablesRequest = copy(leftEndColumn = __v)
    def clearAggregations = copy(aggregations = _root_.scala.Seq.empty)
    def addAggregations(__vs: io.deephaven.proto.backplane.grpc.table.Aggregation *): RangeJoinTablesRequest = addAllAggregations(__vs)
    def addAllAggregations(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.Aggregation]): RangeJoinTablesRequest = copy(aggregations = aggregations ++ __vs)
    def withAggregations(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation]): RangeJoinTablesRequest = copy(aggregations = __v)
    def withRangeMatch(__v: _root_.scala.Predef.String): RangeJoinTablesRequest = copy(rangeMatch = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => leftId.orNull
        case 3 => rightId.orNull
        case 4 => exactMatchColumns
        case 5 => {
          val __t = leftStartColumn
          if (__t != "") __t else null
        }
        case 6 => {
          val __t = rangeStartRule.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 7 => {
          val __t = rightRangeColumn
          if (__t != "") __t else null
        }
        case 8 => {
          val __t = rangeEndRule.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 9 => {
          val __t = leftEndColumn
          if (__t != "") __t else null
        }
        case 10 => aggregations
        case 11 => {
          val __t = rangeMatch
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => leftId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => rightId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PRepeated(exactMatchColumns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        case 5 => _root_.scalapb.descriptors.PString(leftStartColumn)
        case 6 => _root_.scalapb.descriptors.PEnum(rangeStartRule.scalaValueDescriptor)
        case 7 => _root_.scalapb.descriptors.PString(rightRangeColumn)
        case 8 => _root_.scalapb.descriptors.PEnum(rangeEndRule.scalaValueDescriptor)
        case 9 => _root_.scalapb.descriptors.PString(leftEndColumn)
        case 10 => _root_.scalapb.descriptors.PRepeated(aggregations.iterator.map(_.toPMessage).toVector)
        case 11 => _root_.scalapb.descriptors.PString(rangeMatch)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.type = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest])
}

object RangeJoinTablesRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __leftId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    var __rightId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference] = _root_.scala.None
    val __exactMatchColumns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var __leftStartColumn: _root_.scala.Predef.String = ""
    var __rangeStartRule: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.START_UNSPECIFIED
    var __rightRangeColumn: _root_.scala.Predef.String = ""
    var __rangeEndRule: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.END_UNSPECIFIED
    var __leftEndColumn: _root_.scala.Predef.String = ""
    val __aggregations: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Aggregation] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.Aggregation]
    var __rangeMatch: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __leftId = _root_.scala.Option(__leftId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __rightId = _root_.scala.Option(__rightId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.TableReference](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __exactMatchColumns += _input__.readStringRequireUtf8()
        case 42 =>
          __leftStartColumn = _input__.readStringRequireUtf8()
        case 48 =>
          __rangeStartRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.fromValue(_input__.readEnum())
        case 58 =>
          __rightRangeColumn = _input__.readStringRequireUtf8()
        case 64 =>
          __rangeEndRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.fromValue(_input__.readEnum())
        case 74 =>
          __leftEndColumn = _input__.readStringRequireUtf8()
        case 82 =>
          __aggregations += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.Aggregation](_input__)
        case 90 =>
          __rangeMatch = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest(
        resultId = __resultId,
        leftId = __leftId,
        rightId = __rightId,
        exactMatchColumns = __exactMatchColumns.result(),
        leftStartColumn = __leftStartColumn,
        rangeStartRule = __rangeStartRule,
        rightRangeColumn = __rightRangeColumn,
        rangeEndRule = __rangeEndRule,
        leftEndColumn = __leftEndColumn,
        aggregations = __aggregations.result(),
        rangeMatch = __rangeMatch,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        leftId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        rightId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]]),
        exactMatchColumns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        leftStartColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        rangeStartRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.START_UNSPECIFIED.scalaValueDescriptor).number),
        rightRangeColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        rangeEndRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.END_UNSPECIFIED.scalaValueDescriptor).number),
        leftEndColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        aggregations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation]]).getOrElse(_root_.scala.Seq.empty),
        rangeMatch = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getMessageTypes().get(32)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.messages(32)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.TableReference
      case 10 => __out = io.deephaven.proto.backplane.grpc.table.Aggregation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 6 => io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule
      case 8 => io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule
    }
  }
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest(
    resultId = _root_.scala.None,
    leftId = _root_.scala.None,
    rightId = _root_.scala.None,
    exactMatchColumns = _root_.scala.Seq.empty,
    leftStartColumn = "",
    rangeStartRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.START_UNSPECIFIED,
    rightRangeColumn = "",
    rangeEndRule = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.END_UNSPECIFIED,
    leftEndColumn = "",
    aggregations = _root_.scala.Seq.empty,
    rangeMatch = ""
  )
  sealed abstract class RangeStartRule(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule
    type RecognizedType = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.Recognized
    def isStartUnspecified: _root_.scala.Boolean = false
    def isLessThan: _root_.scala.Boolean = false
    def isLessThanOrEqual: _root_.scala.Boolean = false
    def isLessThanOrEqualAllowPreceding: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[RangeStartRule] = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule.Recognized])
  }
  
  object RangeStartRule extends _root_.scalapb.GeneratedEnumCompanion[RangeStartRule] {
    sealed trait Recognized extends RangeStartRule
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[RangeStartRule] = this
    
    @SerialVersionUID(0L)
    case object START_UNSPECIFIED extends RangeStartRule(0) with RangeStartRule.Recognized {
      val index = 0
      val name = "START_UNSPECIFIED"
      override def isStartUnspecified: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LESS_THAN extends RangeStartRule(1) with RangeStartRule.Recognized {
      val index = 1
      val name = "LESS_THAN"
      override def isLessThan: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LESS_THAN_OR_EQUAL extends RangeStartRule(2) with RangeStartRule.Recognized {
      val index = 2
      val name = "LESS_THAN_OR_EQUAL"
      override def isLessThanOrEqual: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LESS_THAN_OR_EQUAL_ALLOW_PRECEDING extends RangeStartRule(3) with RangeStartRule.Recognized {
      val index = 3
      val name = "LESS_THAN_OR_EQUAL_ALLOW_PRECEDING"
      override def isLessThanOrEqualAllowPreceding: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends RangeStartRule(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(START_UNSPECIFIED, LESS_THAN, LESS_THAN_OR_EQUAL, LESS_THAN_OR_EQUAL_ALLOW_PRECEDING)
    def fromValue(__value: _root_.scala.Int): RangeStartRule = __value match {
      case 0 => START_UNSPECIFIED
      case 1 => LESS_THAN
      case 2 => LESS_THAN_OR_EQUAL
      case 3 => LESS_THAN_OR_EQUAL_ALLOW_PRECEDING
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.scalaDescriptor.enums(0)
  }
  sealed abstract class RangeEndRule(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule
    type RecognizedType = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.Recognized
    def isEndUnspecified: _root_.scala.Boolean = false
    def isGreaterThan: _root_.scala.Boolean = false
    def isGreaterThanOrEqual: _root_.scala.Boolean = false
    def isGreaterThanOrEqualAllowFollowing: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[RangeEndRule] = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule.Recognized])
  }
  
  object RangeEndRule extends _root_.scalapb.GeneratedEnumCompanion[RangeEndRule] {
    sealed trait Recognized extends RangeEndRule
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[RangeEndRule] = this
    
    @SerialVersionUID(0L)
    case object END_UNSPECIFIED extends RangeEndRule(0) with RangeEndRule.Recognized {
      val index = 0
      val name = "END_UNSPECIFIED"
      override def isEndUnspecified: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GREATER_THAN extends RangeEndRule(1) with RangeEndRule.Recognized {
      val index = 1
      val name = "GREATER_THAN"
      override def isGreaterThan: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GREATER_THAN_OR_EQUAL extends RangeEndRule(2) with RangeEndRule.Recognized {
      val index = 2
      val name = "GREATER_THAN_OR_EQUAL"
      override def isGreaterThanOrEqual: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING extends RangeEndRule(3) with RangeEndRule.Recognized {
      val index = 3
      val name = "GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING"
      override def isGreaterThanOrEqualAllowFollowing: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends RangeEndRule(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(END_UNSPECIFIED, GREATER_THAN, GREATER_THAN_OR_EQUAL, GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING)
    def fromValue(__value: _root_.scala.Int): RangeEndRule = __value match {
      case 0 => END_UNSPECIFIED
      case 1 => GREATER_THAN
      case 2 => GREATER_THAN_OR_EQUAL
      case 3 => GREATER_THAN_OR_EQUAL_ALLOW_FOLLOWING
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.javaDescriptor.getEnumTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.scalaDescriptor.enums(1)
  }
  implicit class RangeJoinTablesRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def leftId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getLeftId)((c_, f_) => c_.copy(leftId = _root_.scala.Option(f_)))
    def optionalLeftId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.leftId)((c_, f_) => c_.copy(leftId = f_))
    def rightId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TableReference] = field(_.getRightId)((c_, f_) => c_.copy(rightId = _root_.scala.Option(f_)))
    def optionalRightId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference]] = field(_.rightId)((c_, f_) => c_.copy(rightId = f_))
    def exactMatchColumns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.exactMatchColumns)((c_, f_) => c_.copy(exactMatchColumns = f_))
    def leftStartColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.leftStartColumn)((c_, f_) => c_.copy(leftStartColumn = f_))
    def rangeStartRule: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule] = field(_.rangeStartRule)((c_, f_) => c_.copy(rangeStartRule = f_))
    def rightRangeColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.rightRangeColumn)((c_, f_) => c_.copy(rightRangeColumn = f_))
    def rangeEndRule: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule] = field(_.rangeEndRule)((c_, f_) => c_.copy(rangeEndRule = f_))
    def leftEndColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.leftEndColumn)((c_, f_) => c_.copy(leftEndColumn = f_))
    def aggregations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation]] = field(_.aggregations)((c_, f_) => c_.copy(aggregations = f_))
    def rangeMatch: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.rangeMatch)((c_, f_) => c_.copy(rangeMatch = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val LEFT_ID_FIELD_NUMBER = 2
  final val RIGHT_ID_FIELD_NUMBER = 3
  final val EXACT_MATCH_COLUMNS_FIELD_NUMBER = 4
  final val LEFT_START_COLUMN_FIELD_NUMBER = 5
  final val RANGE_START_RULE_FIELD_NUMBER = 6
  final val RIGHT_RANGE_COLUMN_FIELD_NUMBER = 7
  final val RANGE_END_RULE_FIELD_NUMBER = 8
  final val LEFT_END_COLUMN_FIELD_NUMBER = 9
  final val AGGREGATIONS_FIELD_NUMBER = 10
  final val RANGE_MATCH_FIELD_NUMBER = 11
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    leftId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    rightId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.TableReference],
    exactMatchColumns: _root_.scala.Seq[_root_.scala.Predef.String],
    leftStartColumn: _root_.scala.Predef.String,
    rangeStartRule: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeStartRule,
    rightRangeColumn: _root_.scala.Predef.String,
    rangeEndRule: io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest.RangeEndRule,
    leftEndColumn: _root_.scala.Predef.String,
    aggregations: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.Aggregation],
    rangeMatch: _root_.scala.Predef.String
  ): _root_.io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest = _root_.io.deephaven.proto.backplane.grpc.table.RangeJoinTablesRequest(
    resultId,
    leftId,
    rightId,
    exactMatchColumns,
    leftStartColumn,
    rangeStartRule,
    rightRangeColumn,
    rangeEndRule,
    leftEndColumn,
    aggregations,
    rangeMatch
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.RangeJoinTablesRequest])
}
