// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class AggSpec(
    `type`: io.deephaven.proto.backplane.grpc.table.AggSpec.Type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpec] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (`type`.absSum.isDefined) {
        val __value = `type`.absSum.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.approximatePercentile.isDefined) {
        val __value = `type`.approximatePercentile.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.avg.isDefined) {
        val __value = `type`.avg.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.countDistinct.isDefined) {
        val __value = `type`.countDistinct.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.distinct.isDefined) {
        val __value = `type`.distinct.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.first.isDefined) {
        val __value = `type`.first.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.formula.isDefined) {
        val __value = `type`.formula.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.freeze.isDefined) {
        val __value = `type`.freeze.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.group.isDefined) {
        val __value = `type`.group.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.last.isDefined) {
        val __value = `type`.last.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.max.isDefined) {
        val __value = `type`.max.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.median.isDefined) {
        val __value = `type`.median.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.min.isDefined) {
        val __value = `type`.min.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.percentile.isDefined) {
        val __value = `type`.percentile.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sortedFirst.isDefined) {
        val __value = `type`.sortedFirst.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sortedLast.isDefined) {
        val __value = `type`.sortedLast.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.std.isDefined) {
        val __value = `type`.std.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.sum.isDefined) {
        val __value = `type`.sum.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.tDigest.isDefined) {
        val __value = `type`.tDigest.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.unique.isDefined) {
        val __value = `type`.unique.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.weightedAvg.isDefined) {
        val __value = `type`.weightedAvg.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.weightedSum.isDefined) {
        val __value = `type`.weightedSum.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (`type`.`var`.isDefined) {
        val __value = `type`.`var`.get
        __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.absSum.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.approximatePercentile.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.avg.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.countDistinct.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.distinct.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.first.foreach { __v =>
        val __m = __v
        _output__.writeTag(6, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.formula.foreach { __v =>
        val __m = __v
        _output__.writeTag(7, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.freeze.foreach { __v =>
        val __m = __v
        _output__.writeTag(8, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.group.foreach { __v =>
        val __m = __v
        _output__.writeTag(9, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.last.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.max.foreach { __v =>
        val __m = __v
        _output__.writeTag(11, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.median.foreach { __v =>
        val __m = __v
        _output__.writeTag(12, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.min.foreach { __v =>
        val __m = __v
        _output__.writeTag(13, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.percentile.foreach { __v =>
        val __m = __v
        _output__.writeTag(14, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sortedFirst.foreach { __v =>
        val __m = __v
        _output__.writeTag(15, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sortedLast.foreach { __v =>
        val __m = __v
        _output__.writeTag(16, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.std.foreach { __v =>
        val __m = __v
        _output__.writeTag(17, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.sum.foreach { __v =>
        val __m = __v
        _output__.writeTag(18, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.tDigest.foreach { __v =>
        val __m = __v
        _output__.writeTag(19, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.unique.foreach { __v =>
        val __m = __v
        _output__.writeTag(20, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.weightedAvg.foreach { __v =>
        val __m = __v
        _output__.writeTag(21, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.weightedSum.foreach { __v =>
        val __m = __v
        _output__.writeTag(22, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      `type`.`var`.foreach { __v =>
        val __m = __v
        _output__.writeTag(23, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def getAbsSum: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum = `type`.absSum.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum.defaultInstance)
    def withAbsSum(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.AbsSum(__v))
    def getApproximatePercentile: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile = `type`.approximatePercentile.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile.defaultInstance)
    def withApproximatePercentile(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.ApproximatePercentile(__v))
    def getAvg: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg = `type`.avg.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg.defaultInstance)
    def withAvg(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Avg(__v))
    def getCountDistinct: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct = `type`.countDistinct.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct.defaultInstance)
    def withCountDistinct(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.CountDistinct(__v))
    def getDistinct: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct = `type`.distinct.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct.defaultInstance)
    def withDistinct(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Distinct(__v))
    def getFirst: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst = `type`.first.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst.defaultInstance)
    def withFirst(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.First(__v))
    def getFormula: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula = `type`.formula.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula.defaultInstance)
    def withFormula(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Formula(__v))
    def getFreeze: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze = `type`.freeze.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze.defaultInstance)
    def withFreeze(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Freeze(__v))
    def getGroup: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup = `type`.group.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup.defaultInstance)
    def withGroup(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Group(__v))
    def getLast: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast = `type`.last.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast.defaultInstance)
    def withLast(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Last(__v))
    def getMax: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax = `type`.max.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax.defaultInstance)
    def withMax(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Max(__v))
    def getMedian: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian = `type`.median.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian.defaultInstance)
    def withMedian(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Median(__v))
    def getMin: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin = `type`.min.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin.defaultInstance)
    def withMin(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Min(__v))
    def getPercentile: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile = `type`.percentile.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile.defaultInstance)
    def withPercentile(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Percentile(__v))
    def getSortedFirst: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted = `type`.sortedFirst.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted.defaultInstance)
    def withSortedFirst(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedFirst(__v))
    def getSortedLast: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted = `type`.sortedLast.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted.defaultInstance)
    def withSortedLast(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedLast(__v))
    def getStd: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd = `type`.std.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd.defaultInstance)
    def withStd(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Std(__v))
    def getSum: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum = `type`.sum.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum.defaultInstance)
    def withSum(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Sum(__v))
    def getTDigest: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest = `type`.tDigest.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest.defaultInstance)
    def withTDigest(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.TDigest(__v))
    def getUnique: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique = `type`.unique.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique.defaultInstance)
    def withUnique(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Unique(__v))
    def getWeightedAvg: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted = `type`.weightedAvg.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted.defaultInstance)
    def withWeightedAvg(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedAvg(__v))
    def getWeightedSum: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted = `type`.weightedSum.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted.defaultInstance)
    def withWeightedSum(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedSum(__v))
    def getVar: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar = `type`.`var`.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar.defaultInstance)
    def withVar(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar): AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Var(__v))
    def clearType: AggSpec = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Empty)
    def withType(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.Type): AggSpec = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.absSum.orNull
        case 2 => `type`.approximatePercentile.orNull
        case 3 => `type`.avg.orNull
        case 4 => `type`.countDistinct.orNull
        case 5 => `type`.distinct.orNull
        case 6 => `type`.first.orNull
        case 7 => `type`.formula.orNull
        case 8 => `type`.freeze.orNull
        case 9 => `type`.group.orNull
        case 10 => `type`.last.orNull
        case 11 => `type`.max.orNull
        case 12 => `type`.median.orNull
        case 13 => `type`.min.orNull
        case 14 => `type`.percentile.orNull
        case 15 => `type`.sortedFirst.orNull
        case 16 => `type`.sortedLast.orNull
        case 17 => `type`.std.orNull
        case 18 => `type`.sum.orNull
        case 19 => `type`.tDigest.orNull
        case 20 => `type`.unique.orNull
        case 21 => `type`.weightedAvg.orNull
        case 22 => `type`.weightedSum.orNull
        case 23 => `type`.`var`.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.absSum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => `type`.approximatePercentile.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => `type`.avg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => `type`.countDistinct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => `type`.distinct.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => `type`.first.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => `type`.formula.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 8 => `type`.freeze.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 9 => `type`.group.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 10 => `type`.last.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 11 => `type`.max.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 12 => `type`.median.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 13 => `type`.min.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 14 => `type`.percentile.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 15 => `type`.sortedFirst.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 16 => `type`.sortedLast.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 17 => `type`.std.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 18 => `type`.sum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 19 => `type`.tDigest.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 20 => `type`.unique.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 21 => `type`.weightedAvg.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 22 => `type`.weightedSum.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 23 => `type`.`var`.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.type = io.deephaven.proto.backplane.grpc.table.AggSpec
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec])
}

object AggSpec extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec = {
    var __type: io.deephaven.proto.backplane.grpc.table.AggSpec.Type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.AbsSum(__type.absSum.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.ApproximatePercentile(__type.approximatePercentile.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Avg(__type.avg.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 34 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.CountDistinct(__type.countDistinct.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 42 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Distinct(__type.distinct.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 50 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.First(__type.first.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 58 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Formula(__type.formula.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 66 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Freeze(__type.freeze.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 74 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Group(__type.group.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 82 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Last(__type.last.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 90 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Max(__type.max.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 98 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Median(__type.median.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 106 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Min(__type.min.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 114 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Percentile(__type.percentile.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 122 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedFirst(__type.sortedFirst.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 130 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedLast(__type.sortedLast.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 138 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Std(__type.std.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 146 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Sum(__type.sum.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 154 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.TDigest(__type.tDigest.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 162 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Unique(__type.unique.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 170 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedAvg(__type.weightedAvg.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 178 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedSum(__type.weightedSum.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 186 =>
          __type = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Var(__type.`var`.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.AggSpec(
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.AggSpec(
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.AbsSum(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.ApproximatePercentile(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Avg(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.CountDistinct(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Distinct(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.First(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Formula(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Freeze(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Group(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Last(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Max(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Median(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Min(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Percentile(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedFirst(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedLast(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Std(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Sum(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.TDigest(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Unique(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedAvg(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(22).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedSum(_)))
            .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(23).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Var(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(35)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(35)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum
      case 2 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile
      case 3 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg
      case 4 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct
      case 5 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct
      case 6 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst
      case 7 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula
      case 8 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze
      case 9 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup
      case 10 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast
      case 11 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax
      case 12 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian
      case 13 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin
      case 14 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile
      case 15 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted
      case 16 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted
      case 17 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd
      case 18 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum
      case 19 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest
      case 20 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique
      case 21 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted
      case 22 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted
      case 23 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum,
      _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec(
    `type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Empty
  )
  sealed trait Type extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isAbsSum: _root_.scala.Boolean = false
    def isApproximatePercentile: _root_.scala.Boolean = false
    def isAvg: _root_.scala.Boolean = false
    def isCountDistinct: _root_.scala.Boolean = false
    def isDistinct: _root_.scala.Boolean = false
    def isFirst: _root_.scala.Boolean = false
    def isFormula: _root_.scala.Boolean = false
    def isFreeze: _root_.scala.Boolean = false
    def isGroup: _root_.scala.Boolean = false
    def isLast: _root_.scala.Boolean = false
    def isMax: _root_.scala.Boolean = false
    def isMedian: _root_.scala.Boolean = false
    def isMin: _root_.scala.Boolean = false
    def isPercentile: _root_.scala.Boolean = false
    def isSortedFirst: _root_.scala.Boolean = false
    def isSortedLast: _root_.scala.Boolean = false
    def isStd: _root_.scala.Boolean = false
    def isSum: _root_.scala.Boolean = false
    def isTDigest: _root_.scala.Boolean = false
    def isUnique: _root_.scala.Boolean = false
    def isWeightedAvg: _root_.scala.Boolean = false
    def isWeightedSum: _root_.scala.Boolean = false
    def isVar: _root_.scala.Boolean = false
    def absSum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum] = _root_.scala.None
    def approximatePercentile: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile] = _root_.scala.None
    def avg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg] = _root_.scala.None
    def countDistinct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct] = _root_.scala.None
    def distinct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct] = _root_.scala.None
    def first: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst] = _root_.scala.None
    def formula: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula] = _root_.scala.None
    def freeze: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze] = _root_.scala.None
    def group: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup] = _root_.scala.None
    def last: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast] = _root_.scala.None
    def max: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax] = _root_.scala.None
    def median: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian] = _root_.scala.None
    def min: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin] = _root_.scala.None
    def percentile: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile] = _root_.scala.None
    def sortedFirst: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = _root_.scala.None
    def sortedLast: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = _root_.scala.None
    def std: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd] = _root_.scala.None
    def sum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum] = _root_.scala.None
    def tDigest: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest] = _root_.scala.None
    def unique: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique] = _root_.scala.None
    def weightedAvg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = _root_.scala.None
    def weightedSum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = _root_.scala.None
    def `var`: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar] = _root_.scala.None
  }
  object Type {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class AbsSum(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum
      override def isAbsSum: _root_.scala.Boolean = true
      override def absSum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class ApproximatePercentile(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile
      override def isApproximatePercentile: _root_.scala.Boolean = true
      override def approximatePercentile: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class Avg(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg
      override def isAvg: _root_.scala.Boolean = true
      override def avg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class CountDistinct(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct
      override def isCountDistinct: _root_.scala.Boolean = true
      override def countDistinct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class Distinct(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct
      override def isDistinct: _root_.scala.Boolean = true
      override def distinct: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class First(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst
      override def isFirst: _root_.scala.Boolean = true
      override def first: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class Formula(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula
      override def isFormula: _root_.scala.Boolean = true
      override def formula: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula] = Some(value)
      override def number: _root_.scala.Int = 7
    }
    @SerialVersionUID(0L)
    final case class Freeze(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze
      override def isFreeze: _root_.scala.Boolean = true
      override def freeze: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze] = Some(value)
      override def number: _root_.scala.Int = 8
    }
    @SerialVersionUID(0L)
    final case class Group(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup
      override def isGroup: _root_.scala.Boolean = true
      override def group: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup] = Some(value)
      override def number: _root_.scala.Int = 9
    }
    @SerialVersionUID(0L)
    final case class Last(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast
      override def isLast: _root_.scala.Boolean = true
      override def last: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast] = Some(value)
      override def number: _root_.scala.Int = 10
    }
    @SerialVersionUID(0L)
    final case class Max(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax
      override def isMax: _root_.scala.Boolean = true
      override def max: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax] = Some(value)
      override def number: _root_.scala.Int = 11
    }
    @SerialVersionUID(0L)
    final case class Median(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian
      override def isMedian: _root_.scala.Boolean = true
      override def median: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian] = Some(value)
      override def number: _root_.scala.Int = 12
    }
    @SerialVersionUID(0L)
    final case class Min(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin
      override def isMin: _root_.scala.Boolean = true
      override def min: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin] = Some(value)
      override def number: _root_.scala.Int = 13
    }
    @SerialVersionUID(0L)
    final case class Percentile(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile
      override def isPercentile: _root_.scala.Boolean = true
      override def percentile: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile] = Some(value)
      override def number: _root_.scala.Int = 14
    }
    @SerialVersionUID(0L)
    final case class SortedFirst(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted
      override def isSortedFirst: _root_.scala.Boolean = true
      override def sortedFirst: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = Some(value)
      override def number: _root_.scala.Int = 15
    }
    @SerialVersionUID(0L)
    final case class SortedLast(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted
      override def isSortedLast: _root_.scala.Boolean = true
      override def sortedLast: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = Some(value)
      override def number: _root_.scala.Int = 16
    }
    @SerialVersionUID(0L)
    final case class Std(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd
      override def isStd: _root_.scala.Boolean = true
      override def std: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd] = Some(value)
      override def number: _root_.scala.Int = 17
    }
    @SerialVersionUID(0L)
    final case class Sum(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum
      override def isSum: _root_.scala.Boolean = true
      override def sum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum] = Some(value)
      override def number: _root_.scala.Int = 18
    }
    @SerialVersionUID(0L)
    final case class TDigest(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest
      override def isTDigest: _root_.scala.Boolean = true
      override def tDigest: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest] = Some(value)
      override def number: _root_.scala.Int = 19
    }
    @SerialVersionUID(0L)
    final case class Unique(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique
      override def isUnique: _root_.scala.Boolean = true
      override def unique: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique] = Some(value)
      override def number: _root_.scala.Int = 20
    }
    @SerialVersionUID(0L)
    final case class WeightedAvg(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted
      override def isWeightedAvg: _root_.scala.Boolean = true
      override def weightedAvg: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = Some(value)
      override def number: _root_.scala.Int = 21
    }
    @SerialVersionUID(0L)
    final case class WeightedSum(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted
      override def isWeightedSum: _root_.scala.Boolean = true
      override def weightedSum: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = Some(value)
      override def number: _root_.scala.Int = 22
    }
    @SerialVersionUID(0L)
    final case class Var(value: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar) extends io.deephaven.proto.backplane.grpc.table.AggSpec.Type {
      type ValueType = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar
      override def isVar: _root_.scala.Boolean = true
      override def `var`: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar] = Some(value)
      override def number: _root_.scala.Int = 23
    }
  }
  /** @param percentile
    *   Percentile. Must be in range [0.0, 1.0].
    * @param compression
    *   T-Digest compression factor. Must be greater than or equal to 1. 1000 is extremely large.
    *   When not specified, the server will choose a compression value.
    */
  @SerialVersionUID(0L)
  final case class AggSpecApproximatePercentile(
      percentile: _root_.scala.Double = 0.0,
      compression: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecApproximatePercentile] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = percentile
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
          }
        };
        if (compression.isDefined) {
          val __value = compression.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = percentile
          if (__v != 0.0) {
            _output__.writeDouble(1, __v)
          }
        };
        compression.foreach { __v =>
          val __m = __v
          _output__.writeDouble(2, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withPercentile(__v: _root_.scala.Double): AggSpecApproximatePercentile = copy(percentile = __v)
      def getCompression: _root_.scala.Double = compression.getOrElse(0.0)
      def clearCompression: AggSpecApproximatePercentile = copy(compression = _root_.scala.None)
      def withCompression(__v: _root_.scala.Double): AggSpecApproximatePercentile = copy(compression = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = percentile
            if (__t != 0.0) __t else null
          }
          case 2 => compression.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PDouble(percentile)
          case 2 => compression.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile])
  }
  
  object AggSpecApproximatePercentile extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile = {
      var __percentile: _root_.scala.Double = 0.0
      var __compression: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __percentile = _input__.readDouble()
          case 17 =>
            __compression = _root_.scala.Option(_input__.readDouble())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile(
          percentile = __percentile,
          compression = __compression,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile(
          percentile = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          compression = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile(
      percentile = 0.0,
      compression = _root_.scala.None
    )
    implicit class AggSpecApproximatePercentileLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile](_l) {
      def percentile: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.percentile)((c_, f_) => c_.copy(percentile = f_))
      def compression: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getCompression)((c_, f_) => c_.copy(compression = _root_.scala.Option(f_)))
      def optionalCompression: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.compression)((c_, f_) => c_.copy(compression = f_))
    }
    final val PERCENTILE_FIELD_NUMBER = 1
    final val COMPRESSION_FIELD_NUMBER = 2
    def of(
      percentile: _root_.scala.Double,
      compression: _root_.scala.Option[_root_.scala.Double]
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile(
      percentile,
      compression
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecApproximatePercentile])
  }
  
  /** @param countNulls
    *   Whether null input values should be included when counting the distinct input values.
    */
  @SerialVersionUID(0L)
  final case class AggSpecCountDistinct(
      countNulls: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecCountDistinct] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = countNulls
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = countNulls
          if (__v != false) {
            _output__.writeBool(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withCountNulls(__v: _root_.scala.Boolean): AggSpecCountDistinct = copy(countNulls = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = countNulls
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(countNulls)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct])
  }
  
  object AggSpecCountDistinct extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct = {
      var __countNulls: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __countNulls = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct(
          countNulls = __countNulls,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct(
          countNulls = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct(
      countNulls = false
    )
    implicit class AggSpecCountDistinctLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct](_l) {
      def countNulls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.countNulls)((c_, f_) => c_.copy(countNulls = f_))
    }
    final val COUNT_NULLS_FIELD_NUMBER = 1
    def of(
      countNulls: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct(
      countNulls
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecCountDistinct])
  }
  
  /** @param includeNulls
    *   Whether null input values should be included in the distinct output values.
    */
  @SerialVersionUID(0L)
  final case class AggSpecDistinct(
      includeNulls: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecDistinct] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = includeNulls
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = includeNulls
          if (__v != false) {
            _output__.writeBool(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withIncludeNulls(__v: _root_.scala.Boolean): AggSpecDistinct = copy(includeNulls = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = includeNulls
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(includeNulls)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct])
  }
  
  object AggSpecDistinct extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct = {
      var __includeNulls: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __includeNulls = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct(
          includeNulls = __includeNulls,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct(
          includeNulls = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct(
      includeNulls = false
    )
    implicit class AggSpecDistinctLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct](_l) {
      def includeNulls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.includeNulls)((c_, f_) => c_.copy(includeNulls = f_))
    }
    final val INCLUDE_NULLS_FIELD_NUMBER = 1
    def of(
      includeNulls: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct(
      includeNulls
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecDistinct])
  }
  
  /** @param formula
    *   The formula to use to calculate output values from grouped input values.
    * @param paramToken
    *   The formula parameter token to be replaced with the input column name for evaluation.
    */
  @SerialVersionUID(0L)
  final case class AggSpecFormula(
      formula: _root_.scala.Predef.String = "",
      paramToken: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecFormula] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = formula
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = paramToken
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = formula
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = paramToken
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withFormula(__v: _root_.scala.Predef.String): AggSpecFormula = copy(formula = __v)
      def withParamToken(__v: _root_.scala.Predef.String): AggSpecFormula = copy(paramToken = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = formula
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = paramToken
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(formula)
          case 2 => _root_.scalapb.descriptors.PString(paramToken)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula])
  }
  
  object AggSpecFormula extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula = {
      var __formula: _root_.scala.Predef.String = ""
      var __paramToken: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __formula = _input__.readStringRequireUtf8()
          case 18 =>
            __paramToken = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula(
          formula = __formula,
          paramToken = __paramToken,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula(
          formula = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          paramToken = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula(
      formula = "",
      paramToken = ""
    )
    implicit class AggSpecFormulaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula](_l) {
      def formula: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.formula)((c_, f_) => c_.copy(formula = f_))
      def paramToken: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.paramToken)((c_, f_) => c_.copy(paramToken = f_))
    }
    final val FORMULA_FIELD_NUMBER = 1
    final val PARAM_TOKEN_FIELD_NUMBER = 2
    def of(
      formula: _root_.scala.Predef.String,
      paramToken: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula(
      formula,
      paramToken
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFormula])
  }
  
  /** @param averageEvenlyDivided
    *   Whether to average the highest low-bucket value and lowest high-bucket value, when the low-bucket and high-bucket
    *   are of equal size. Only applies to numeric types.
    */
  @SerialVersionUID(0L)
  final case class AggSpecMedian(
      averageEvenlyDivided: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecMedian] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = averageEvenlyDivided
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = averageEvenlyDivided
          if (__v != false) {
            _output__.writeBool(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withAverageEvenlyDivided(__v: _root_.scala.Boolean): AggSpecMedian = copy(averageEvenlyDivided = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = averageEvenlyDivided
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(averageEvenlyDivided)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian])
  }
  
  object AggSpecMedian extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian = {
      var __averageEvenlyDivided: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __averageEvenlyDivided = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian(
          averageEvenlyDivided = __averageEvenlyDivided,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian(
          averageEvenlyDivided = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian(
      averageEvenlyDivided = false
    )
    implicit class AggSpecMedianLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian](_l) {
      def averageEvenlyDivided: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.averageEvenlyDivided)((c_, f_) => c_.copy(averageEvenlyDivided = f_))
    }
    final val AVERAGE_EVENLY_DIVIDED_FIELD_NUMBER = 1
    def of(
      averageEvenlyDivided: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian(
      averageEvenlyDivided
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMedian])
  }
  
  /** @param percentile
    *   The percentile to calculate. Must be in the range [0.0, 1.0].
    * @param averageEvenlyDivided
    *   Whether to average the highest low-bucket value and lowest high-bucket value, when the low-bucket and high-bucket
    *   are of equal size. Only applies to numeric types.
    */
  @SerialVersionUID(0L)
  final case class AggSpecPercentile(
      percentile: _root_.scala.Double = 0.0,
      averageEvenlyDivided: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecPercentile] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = percentile
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
          }
        };
        
        {
          val __value = averageEvenlyDivided
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = percentile
          if (__v != 0.0) {
            _output__.writeDouble(1, __v)
          }
        };
        {
          val __v = averageEvenlyDivided
          if (__v != false) {
            _output__.writeBool(2, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withPercentile(__v: _root_.scala.Double): AggSpecPercentile = copy(percentile = __v)
      def withAverageEvenlyDivided(__v: _root_.scala.Boolean): AggSpecPercentile = copy(averageEvenlyDivided = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = percentile
            if (__t != 0.0) __t else null
          }
          case 2 => {
            val __t = averageEvenlyDivided
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PDouble(percentile)
          case 2 => _root_.scalapb.descriptors.PBoolean(averageEvenlyDivided)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile])
  }
  
  object AggSpecPercentile extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile = {
      var __percentile: _root_.scala.Double = 0.0
      var __averageEvenlyDivided: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __percentile = _input__.readDouble()
          case 16 =>
            __averageEvenlyDivided = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile(
          percentile = __percentile,
          averageEvenlyDivided = __averageEvenlyDivided,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile(
          percentile = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          averageEvenlyDivided = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile(
      percentile = 0.0,
      averageEvenlyDivided = false
    )
    implicit class AggSpecPercentileLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile](_l) {
      def percentile: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.percentile)((c_, f_) => c_.copy(percentile = f_))
      def averageEvenlyDivided: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.averageEvenlyDivided)((c_, f_) => c_.copy(averageEvenlyDivided = f_))
    }
    final val PERCENTILE_FIELD_NUMBER = 1
    final val AVERAGE_EVENLY_DIVIDED_FIELD_NUMBER = 2
    def of(
      percentile: _root_.scala.Double,
      averageEvenlyDivided: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile(
      percentile,
      averageEvenlyDivided
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecPercentile])
  }
  
  /** @param columns
    *   Using a message instead of string to support backwards-compatibility in the future
    */
  @SerialVersionUID(0L)
  final case class AggSpecSorted(
      columns: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecSorted] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        columns.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        columns.foreach { __v =>
          val __m = __v
          _output__.writeTag(1, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def clearColumns = copy(columns = _root_.scala.Seq.empty)
      def addColumns(__vs: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn *): AggSpecSorted = addAllColumns(__vs)
      def addAllColumns(__vs: Iterable[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]): AggSpecSorted = copy(columns = columns ++ __vs)
      def withColumns(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]): AggSpecSorted = copy(columns = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => columns
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(columns.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted])
  }
  
  object AggSpecSorted extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted = {
      val __columns: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columns += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted(
          columns = __columns.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted(
          columns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 1 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted(
      columns = _root_.scala.Seq.empty
    )
    implicit class AggSpecSortedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted](_l) {
      def columns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]] = field(_.columns)((c_, f_) => c_.copy(columns = f_))
    }
    final val COLUMNS_FIELD_NUMBER = 1
    def of(
      columns: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted(
      columns
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSorted])
  }
  
  /** @param columnName
    *   TODO(deephaven-core#821): SortedFirst / SortedLast aggregations with sort direction
    */
  @SerialVersionUID(0L)
  final case class AggSpecSortedColumn(
      columnName: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecSortedColumn] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withColumnName(__v: _root_.scala.Predef.String): AggSpecSortedColumn = copy(columnName = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = columnName
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(columnName)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn])
  }
  
  object AggSpecSortedColumn extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn = {
      var __columnName: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columnName = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn(
          columnName = __columnName,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn(
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn(
      columnName = ""
    )
    implicit class AggSpecSortedColumnLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn](_l) {
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
    }
    final val COLUMN_NAME_FIELD_NUMBER = 1
    def of(
      columnName: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSortedColumn(
      columnName
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSortedColumn])
  }
  
  /** @param compression
    *   T-Digest compression factor. Must be greater than or equal to 1. 1000 is extremely large.
    *   When not specified, the server will choose a compression value.
    */
  @SerialVersionUID(0L)
  final case class AggSpecTDigest(
      compression: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecTDigest] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (compression.isDefined) {
          val __value = compression.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        compression.foreach { __v =>
          val __m = __v
          _output__.writeDouble(1, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getCompression: _root_.scala.Double = compression.getOrElse(0.0)
      def clearCompression: AggSpecTDigest = copy(compression = _root_.scala.None)
      def withCompression(__v: _root_.scala.Double): AggSpecTDigest = copy(compression = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => compression.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => compression.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest])
  }
  
  object AggSpecTDigest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest = {
      var __compression: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __compression = _root_.scala.Option(_input__.readDouble())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest(
          compression = __compression,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest(
          compression = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(8)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(8)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest(
      compression = _root_.scala.None
    )
    implicit class AggSpecTDigestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest](_l) {
      def compression: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getCompression)((c_, f_) => c_.copy(compression = _root_.scala.Option(f_)))
      def optionalCompression: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.compression)((c_, f_) => c_.copy(compression = f_))
    }
    final val COMPRESSION_FIELD_NUMBER = 1
    def of(
      compression: _root_.scala.Option[_root_.scala.Double]
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest(
      compression
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecTDigest])
  }
  
  /** @param includeNulls
    *   Whether to include null values as a distinct value for determining if there is only one unique value to output
    * @param nonUniqueSentinel
    *   The output value to use for groups that don't have a single unique input value
    */
  @SerialVersionUID(0L)
  final case class AggSpecUnique(
      includeNulls: _root_.scala.Boolean = false,
      nonUniqueSentinel: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecUnique] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = includeNulls
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
          }
        };
        if (nonUniqueSentinel.isDefined) {
          val __value = nonUniqueSentinel.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = includeNulls
          if (__v != false) {
            _output__.writeBool(1, __v)
          }
        };
        nonUniqueSentinel.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withIncludeNulls(__v: _root_.scala.Boolean): AggSpecUnique = copy(includeNulls = __v)
      def getNonUniqueSentinel: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel = nonUniqueSentinel.getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.defaultInstance)
      def clearNonUniqueSentinel: AggSpecUnique = copy(nonUniqueSentinel = _root_.scala.None)
      def withNonUniqueSentinel(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel): AggSpecUnique = copy(nonUniqueSentinel = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = includeNulls
            if (__t != false) __t else null
          }
          case 2 => nonUniqueSentinel.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PBoolean(includeNulls)
          case 2 => nonUniqueSentinel.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique])
  }
  
  object AggSpecUnique extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique = {
      var __includeNulls: _root_.scala.Boolean = false
      var __nonUniqueSentinel: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __includeNulls = _input__.readBool()
          case 18 =>
            __nonUniqueSentinel = _root_.scala.Option(__nonUniqueSentinel.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique(
          includeNulls = __includeNulls,
          nonUniqueSentinel = __nonUniqueSentinel,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique(
          includeNulls = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          nonUniqueSentinel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(9)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(9)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique(
      includeNulls = false,
      nonUniqueSentinel = _root_.scala.None
    )
    implicit class AggSpecUniqueLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique](_l) {
      def includeNulls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.includeNulls)((c_, f_) => c_.copy(includeNulls = f_))
      def nonUniqueSentinel: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel] = field(_.getNonUniqueSentinel)((c_, f_) => c_.copy(nonUniqueSentinel = _root_.scala.Option(f_)))
      def optionalNonUniqueSentinel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel]] = field(_.nonUniqueSentinel)((c_, f_) => c_.copy(nonUniqueSentinel = f_))
    }
    final val INCLUDE_NULLS_FIELD_NUMBER = 1
    final val NON_UNIQUE_SENTINEL_FIELD_NUMBER = 2
    def of(
      includeNulls: _root_.scala.Boolean,
      nonUniqueSentinel: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel]
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique(
      includeNulls,
      nonUniqueSentinel
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecUnique])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecNonUniqueSentinel(
      `type`: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.Empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecNonUniqueSentinel] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (`type`.nullValue.isDefined) {
          val __value = `type`.nullValue.get.value
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
        };
        if (`type`.stringValue.isDefined) {
          val __value = `type`.stringValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        };
        if (`type`.intValue.isDefined) {
          val __value = `type`.intValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(3, __value)
        };
        if (`type`.longValue.isDefined) {
          val __value = `type`.longValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(4, __value)
        };
        if (`type`.floatValue.isDefined) {
          val __value = `type`.floatValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeFloatSize(5, __value)
        };
        if (`type`.doubleValue.isDefined) {
          val __value = `type`.doubleValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(6, __value)
        };
        if (`type`.boolValue.isDefined) {
          val __value = `type`.boolValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(7, __value)
        };
        if (`type`.byteValue.isDefined) {
          val __value = `type`.byteValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(8, __value)
        };
        if (`type`.shortValue.isDefined) {
          val __value = `type`.shortValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(9, __value)
        };
        if (`type`.charValue.isDefined) {
          val __value = `type`.charValue.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt32Size(10, __value)
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        `type`.nullValue.foreach { __v =>
          val __m = __v.value
          _output__.writeEnum(1, __m)
        };
        `type`.stringValue.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        `type`.intValue.foreach { __v =>
          val __m = __v
          _output__.writeSInt32(3, __m)
        };
        `type`.longValue.foreach { __v =>
          val __m = __v
          _output__.writeSInt64(4, __m)
        };
        `type`.floatValue.foreach { __v =>
          val __m = __v
          _output__.writeFloat(5, __m)
        };
        `type`.doubleValue.foreach { __v =>
          val __m = __v
          _output__.writeDouble(6, __m)
        };
        `type`.boolValue.foreach { __v =>
          val __m = __v
          _output__.writeBool(7, __m)
        };
        `type`.byteValue.foreach { __v =>
          val __m = __v
          _output__.writeSInt32(8, __m)
        };
        `type`.shortValue.foreach { __v =>
          val __m = __v
          _output__.writeSInt32(9, __m)
        };
        `type`.charValue.foreach { __v =>
          val __m = __v
          _output__.writeSInt32(10, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getNullValue: io.deephaven.proto.backplane.grpc.table.NullValue = `type`.nullValue.getOrElse(io.deephaven.proto.backplane.grpc.table.NullValue.NULL_VALUE)
      def withNullValue(__v: io.deephaven.proto.backplane.grpc.table.NullValue): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.NullValue(__v))
      def getStringValue: _root_.scala.Predef.String = `type`.stringValue.getOrElse("")
      def withStringValue(__v: _root_.scala.Predef.String): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.StringValue(__v))
      def getIntValue: _root_.scala.Int = `type`.intValue.getOrElse(0)
      def withIntValue(__v: _root_.scala.Int): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.IntValue(__v))
      def getLongValue: _root_.scala.Long = `type`.longValue.getOrElse(0L)
      def withLongValue(__v: _root_.scala.Long): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.LongValue(__v))
      def getFloatValue: _root_.scala.Float = `type`.floatValue.getOrElse(0.0f)
      def withFloatValue(__v: _root_.scala.Float): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.FloatValue(__v))
      def getDoubleValue: _root_.scala.Double = `type`.doubleValue.getOrElse(0.0)
      def withDoubleValue(__v: _root_.scala.Double): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.DoubleValue(__v))
      def getBoolValue: _root_.scala.Boolean = `type`.boolValue.getOrElse(false)
      def withBoolValue(__v: _root_.scala.Boolean): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.BoolValue(__v))
      def getByteValue: _root_.scala.Int = `type`.byteValue.getOrElse(0)
      def withByteValue(__v: _root_.scala.Int): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ByteValue(__v))
      def getShortValue: _root_.scala.Int = `type`.shortValue.getOrElse(0)
      def withShortValue(__v: _root_.scala.Int): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ShortValue(__v))
      def getCharValue: _root_.scala.Int = `type`.charValue.getOrElse(0)
      def withCharValue(__v: _root_.scala.Int): AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.CharValue(__v))
      def clearType: AggSpecNonUniqueSentinel = copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.Empty)
      def withType(__v: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type): AggSpecNonUniqueSentinel = copy(`type` = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => `type`.nullValue.map(_.javaValueDescriptor).orNull
          case 2 => `type`.stringValue.orNull
          case 3 => `type`.intValue.orNull
          case 4 => `type`.longValue.orNull
          case 5 => `type`.floatValue.orNull
          case 6 => `type`.doubleValue.orNull
          case 7 => `type`.boolValue.orNull
          case 8 => `type`.byteValue.orNull
          case 9 => `type`.shortValue.orNull
          case 10 => `type`.charValue.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => `type`.nullValue.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => `type`.stringValue.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 3 => `type`.intValue.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => `type`.longValue.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => `type`.floatValue.map(_root_.scalapb.descriptors.PFloat(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => `type`.doubleValue.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => `type`.boolValue.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 8 => `type`.byteValue.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 9 => `type`.shortValue.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => `type`.charValue.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel])
  }
  
  object AggSpecNonUniqueSentinel extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel = {
      var __type: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.Empty
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.NullValue(io.deephaven.proto.backplane.grpc.table.NullValue.fromValue(_input__.readEnum()))
          case 18 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.StringValue(_input__.readStringRequireUtf8())
          case 24 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.IntValue(_input__.readSInt32())
          case 32 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.LongValue(_input__.readSInt64())
          case 45 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.FloatValue(_input__.readFloat())
          case 49 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.DoubleValue(_input__.readDouble())
          case 56 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.BoolValue(_input__.readBool())
          case 64 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ByteValue(_input__.readSInt32())
          case 72 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ShortValue(_input__.readSInt32())
          case 80 =>
            __type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.CharValue(_input__.readSInt32())
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel(
          `type` = __type,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel(
          `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scalapb.descriptors.EnumValueDescriptor]]).map(__e => io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.NullValue(io.deephaven.proto.backplane.grpc.table.NullValue.fromValue(__e.number)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.StringValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.IntValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.LongValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Float]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.FloatValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.DoubleValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.BoolValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ByteValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ShortValue(_)))
              .orElse[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type](__fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]).map(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.CharValue(_)))
              .getOrElse(io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.Empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(10)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(10)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => io.deephaven.proto.backplane.grpc.table.NullValue
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel(
      `type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.Empty
    )
    sealed trait Type extends _root_.scalapb.GeneratedOneof {
      def isEmpty: _root_.scala.Boolean = false
      def isDefined: _root_.scala.Boolean = true
      def isNullValue: _root_.scala.Boolean = false
      def isStringValue: _root_.scala.Boolean = false
      def isIntValue: _root_.scala.Boolean = false
      def isLongValue: _root_.scala.Boolean = false
      def isFloatValue: _root_.scala.Boolean = false
      def isDoubleValue: _root_.scala.Boolean = false
      def isBoolValue: _root_.scala.Boolean = false
      def isByteValue: _root_.scala.Boolean = false
      def isShortValue: _root_.scala.Boolean = false
      def isCharValue: _root_.scala.Boolean = false
      def nullValue: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NullValue] = _root_.scala.None
      def stringValue: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      def intValue: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      def longValue: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
      def floatValue: _root_.scala.Option[_root_.scala.Float] = _root_.scala.None
      def doubleValue: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      def boolValue: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
      def byteValue: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      def shortValue: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
      def charValue: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    }
    object Type {
      @SerialVersionUID(0L)
      case object Empty extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Nothing
        override def isEmpty: _root_.scala.Boolean = true
        override def isDefined: _root_.scala.Boolean = false
        override def number: _root_.scala.Int = 0
        override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
      }
    
      @SerialVersionUID(0L)
      final case class NullValue(value: io.deephaven.proto.backplane.grpc.table.NullValue) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = io.deephaven.proto.backplane.grpc.table.NullValue
        override def isNullValue: _root_.scala.Boolean = true
        override def nullValue: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.NullValue] = Some(value)
        override def number: _root_.scala.Int = 1
      }
      @SerialVersionUID(0L)
      final case class StringValue(value: _root_.scala.Predef.String) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Predef.String
        override def isStringValue: _root_.scala.Boolean = true
        override def stringValue: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
        override def number: _root_.scala.Int = 2
      }
      @SerialVersionUID(0L)
      final case class IntValue(value: _root_.scala.Int) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Int
        override def isIntValue: _root_.scala.Boolean = true
        override def intValue: _root_.scala.Option[_root_.scala.Int] = Some(value)
        override def number: _root_.scala.Int = 3
      }
      @SerialVersionUID(0L)
      final case class LongValue(value: _root_.scala.Long) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Long
        override def isLongValue: _root_.scala.Boolean = true
        override def longValue: _root_.scala.Option[_root_.scala.Long] = Some(value)
        override def number: _root_.scala.Int = 4
      }
      @SerialVersionUID(0L)
      final case class FloatValue(value: _root_.scala.Float) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Float
        override def isFloatValue: _root_.scala.Boolean = true
        override def floatValue: _root_.scala.Option[_root_.scala.Float] = Some(value)
        override def number: _root_.scala.Int = 5
      }
      @SerialVersionUID(0L)
      final case class DoubleValue(value: _root_.scala.Double) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Double
        override def isDoubleValue: _root_.scala.Boolean = true
        override def doubleValue: _root_.scala.Option[_root_.scala.Double] = Some(value)
        override def number: _root_.scala.Int = 6
      }
      @SerialVersionUID(0L)
      final case class BoolValue(value: _root_.scala.Boolean) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Boolean
        override def isBoolValue: _root_.scala.Boolean = true
        override def boolValue: _root_.scala.Option[_root_.scala.Boolean] = Some(value)
        override def number: _root_.scala.Int = 7
      }
      @SerialVersionUID(0L)
      final case class ByteValue(value: _root_.scala.Int) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Int
        override def isByteValue: _root_.scala.Boolean = true
        override def byteValue: _root_.scala.Option[_root_.scala.Int] = Some(value)
        override def number: _root_.scala.Int = 8
      }
      @SerialVersionUID(0L)
      final case class ShortValue(value: _root_.scala.Int) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Int
        override def isShortValue: _root_.scala.Boolean = true
        override def shortValue: _root_.scala.Option[_root_.scala.Int] = Some(value)
        override def number: _root_.scala.Int = 9
      }
      @SerialVersionUID(0L)
      final case class CharValue(value: _root_.scala.Int) extends io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type {
        type ValueType = _root_.scala.Int
        override def isCharValue: _root_.scala.Boolean = true
        override def charValue: _root_.scala.Option[_root_.scala.Int] = Some(value)
        override def number: _root_.scala.Int = 10
      }
    }
    implicit class AggSpecNonUniqueSentinelLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel](_l) {
      def nullValue: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.NullValue] = field(_.getNullValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.NullValue(f_)))
      def stringValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStringValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.StringValue(f_)))
      def intValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getIntValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.IntValue(f_)))
      def longValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getLongValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.LongValue(f_)))
      def floatValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Float] = field(_.getFloatValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.FloatValue(f_)))
      def doubleValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getDoubleValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.DoubleValue(f_)))
      def boolValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getBoolValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.BoolValue(f_)))
      def byteValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getByteValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ByteValue(f_)))
      def shortValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getShortValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.ShortValue(f_)))
      def charValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getCharValue)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type.CharValue(f_)))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    }
    final val NULL_VALUE_FIELD_NUMBER = 1
    final val STRING_VALUE_FIELD_NUMBER = 2
    final val INT_VALUE_FIELD_NUMBER = 3
    final val LONG_VALUE_FIELD_NUMBER = 4
    final val FLOAT_VALUE_FIELD_NUMBER = 5
    final val DOUBLE_VALUE_FIELD_NUMBER = 6
    final val BOOL_VALUE_FIELD_NUMBER = 7
    final val BYTE_VALUE_FIELD_NUMBER = 8
    final val SHORT_VALUE_FIELD_NUMBER = 9
    final val CHAR_VALUE_FIELD_NUMBER = 10
    def of(
      `type`: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel.Type
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecNonUniqueSentinel(
      `type`
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecNonUniqueSentinel])
  }
  
  /** @param weightColumn
    *   Column name for the source of input weights.
    */
  @SerialVersionUID(0L)
  final case class AggSpecWeighted(
      weightColumn: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecWeighted] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = weightColumn
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = weightColumn
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withWeightColumn(__v: _root_.scala.Predef.String): AggSpecWeighted = copy(weightColumn = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = weightColumn
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(weightColumn)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted])
  }
  
  object AggSpecWeighted extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted = {
      var __weightColumn: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __weightColumn = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted(
          weightColumn = __weightColumn,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted(
          weightColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(11)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(11)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted(
      weightColumn = ""
    )
    implicit class AggSpecWeightedLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted](_l) {
      def weightColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.weightColumn)((c_, f_) => c_.copy(weightColumn = f_))
    }
    final val WEIGHT_COLUMN_FIELD_NUMBER = 1
    def of(
      weightColumn: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted(
      weightColumn
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecWeighted])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecAbsSum(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecAbsSum] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum])
  }
  
  object AggSpecAbsSum extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(12)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(12)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum(
    )
    implicit class AggSpecAbsSumLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAbsSum])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecAvg(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecAvg] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg])
  }
  
  object AggSpecAvg extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(13)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(13)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg(
    )
    implicit class AggSpecAvgLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecAvg])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecFirst(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecFirst] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst])
  }
  
  object AggSpecFirst extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(14)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(14)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst(
    )
    implicit class AggSpecFirstLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFirst])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecFreeze(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecFreeze] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze])
  }
  
  object AggSpecFreeze extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(15)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(15)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze(
    )
    implicit class AggSpecFreezeLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecFreeze])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecGroup(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecGroup] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup])
  }
  
  object AggSpecGroup extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(16)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(16)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup(
    )
    implicit class AggSpecGroupLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecGroup])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecLast(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecLast] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast])
  }
  
  object AggSpecLast extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(17)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(17)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast(
    )
    implicit class AggSpecLastLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecLast])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecMax(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecMax] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax])
  }
  
  object AggSpecMax extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(18)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(18)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax(
    )
    implicit class AggSpecMaxLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMax])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecMin(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecMin] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin])
  }
  
  object AggSpecMin extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(19)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(19)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin(
    )
    implicit class AggSpecMinLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecMin])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecStd(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecStd] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd])
  }
  
  object AggSpecStd extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(20)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(20)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd(
    )
    implicit class AggSpecStdLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecStd])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecSum(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecSum] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum])
  }
  
  object AggSpecSum extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(21)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(21)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum(
    )
    implicit class AggSpecSumLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecSum])
  }
  
  @SerialVersionUID(0L)
  final case class AggSpecVar(
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AggSpecVar] {
      @transient
      private var __serializedSizeMemoized: _root_.scala.Int = 0
      private def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        unknownFields.writeTo(_output__)
      }
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = throw new MatchError(__fieldNumber)
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = throw new MatchError(__field)
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar.type = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar])
  }
  
  object AggSpecVar extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar = {
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar(
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar(
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.javaDescriptor.getNestedTypes().get(22)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.AggSpec.scalaDescriptor.nestedMessages(22)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar(
    )
    implicit class AggSpecVarLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar](_l) {
    }
    def of(
    ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar(
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec.AggSpecVar])
  }
  
  implicit class AggSpecLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec](_l) {
    def absSum: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAbsSum] = field(_.getAbsSum)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.AbsSum(f_)))
    def approximatePercentile: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecApproximatePercentile] = field(_.getApproximatePercentile)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.ApproximatePercentile(f_)))
    def avg: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecAvg] = field(_.getAvg)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Avg(f_)))
    def countDistinct: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecCountDistinct] = field(_.getCountDistinct)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.CountDistinct(f_)))
    def distinct: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecDistinct] = field(_.getDistinct)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Distinct(f_)))
    def first: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFirst] = field(_.getFirst)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.First(f_)))
    def formula: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFormula] = field(_.getFormula)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Formula(f_)))
    def freeze: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecFreeze] = field(_.getFreeze)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Freeze(f_)))
    def group: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecGroup] = field(_.getGroup)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Group(f_)))
    def last: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecLast] = field(_.getLast)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Last(f_)))
    def max: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMax] = field(_.getMax)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Max(f_)))
    def median: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMedian] = field(_.getMedian)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Median(f_)))
    def min: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecMin] = field(_.getMin)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Min(f_)))
    def percentile: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecPercentile] = field(_.getPercentile)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Percentile(f_)))
    def sortedFirst: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = field(_.getSortedFirst)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedFirst(f_)))
    def sortedLast: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSorted] = field(_.getSortedLast)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.SortedLast(f_)))
    def std: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecStd] = field(_.getStd)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Std(f_)))
    def sum: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecSum] = field(_.getSum)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Sum(f_)))
    def tDigest: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecTDigest] = field(_.getTDigest)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.TDigest(f_)))
    def unique: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecUnique] = field(_.getUnique)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Unique(f_)))
    def weightedAvg: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = field(_.getWeightedAvg)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedAvg(f_)))
    def weightedSum: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecWeighted] = field(_.getWeightedSum)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.WeightedSum(f_)))
    def `var`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.AggSpecVar] = field(_.getVar)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.AggSpec.Type.Var(f_)))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.AggSpec.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val ABS_SUM_FIELD_NUMBER = 1
  final val APPROXIMATE_PERCENTILE_FIELD_NUMBER = 2
  final val AVG_FIELD_NUMBER = 3
  final val COUNT_DISTINCT_FIELD_NUMBER = 4
  final val DISTINCT_FIELD_NUMBER = 5
  final val FIRST_FIELD_NUMBER = 6
  final val FORMULA_FIELD_NUMBER = 7
  final val FREEZE_FIELD_NUMBER = 8
  final val GROUP_FIELD_NUMBER = 9
  final val LAST_FIELD_NUMBER = 10
  final val MAX_FIELD_NUMBER = 11
  final val MEDIAN_FIELD_NUMBER = 12
  final val MIN_FIELD_NUMBER = 13
  final val PERCENTILE_FIELD_NUMBER = 14
  final val SORTED_FIRST_FIELD_NUMBER = 15
  final val SORTED_LAST_FIELD_NUMBER = 16
  final val STD_FIELD_NUMBER = 17
  final val SUM_FIELD_NUMBER = 18
  final val T_DIGEST_FIELD_NUMBER = 19
  final val UNIQUE_FIELD_NUMBER = 20
  final val WEIGHTED_AVG_FIELD_NUMBER = 21
  final val WEIGHTED_SUM_FIELD_NUMBER = 22
  final val VAR_FIELD_NUMBER = 23
  def of(
    `type`: io.deephaven.proto.backplane.grpc.table.AggSpec.Type
  ): _root_.io.deephaven.proto.backplane.grpc.table.AggSpec = _root_.io.deephaven.proto.backplane.grpc.table.AggSpec(
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.AggSpec])
}
