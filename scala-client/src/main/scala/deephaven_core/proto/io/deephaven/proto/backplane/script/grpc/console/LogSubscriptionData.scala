// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class LogSubscriptionData(
    micros: _root_.scala.Long = 0L,
    logLevel: _root_.scala.Predef.String = "",
    message: _root_.scala.Predef.String = "",
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LogSubscriptionData] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = micros
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(1, __value)
        }
      };
      
      {
        val __value = logLevel
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = message
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = micros
        if (__v != 0L) {
          _output__.writeInt64(1, __v)
        }
      };
      {
        val __v = logLevel
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = message
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def withMicros(__v: _root_.scala.Long): LogSubscriptionData = copy(micros = __v)
    def withLogLevel(__v: _root_.scala.Predef.String): LogSubscriptionData = copy(logLevel = __v)
    def withMessage(__v: _root_.scala.Predef.String): LogSubscriptionData = copy(message = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = micros
          if (__t != 0L) __t else null
        }
        case 2 => {
          val __t = logLevel
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = message
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PLong(micros)
        case 2 => _root_.scalapb.descriptors.PString(logLevel)
        case 3 => _root_.scalapb.descriptors.PString(message)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData.type = io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.LogSubscriptionData])
}

object LogSubscriptionData extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData = {
    var __micros: _root_.scala.Long = 0L
    var __logLevel: _root_.scala.Predef.String = ""
    var __message: _root_.scala.Predef.String = ""
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __micros = _input__.readInt64()
        case 18 =>
          __logLevel = _input__.readStringRequireUtf8()
        case 26 =>
          __message = _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData(
        micros = __micros,
        logLevel = __logLevel,
        message = __message,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData(
        micros = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        logLevel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData(
    micros = 0L,
    logLevel = "",
    message = ""
  )
  implicit class LogSubscriptionDataLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData](_l) {
    def micros: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.micros)((c_, f_) => c_.copy(micros = f_))
    def logLevel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.logLevel)((c_, f_) => c_.copy(logLevel = f_))
    def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
  }
  final val MICROS_FIELD_NUMBER = 1
  final val LOG_LEVEL_FIELD_NUMBER = 2
  final val MESSAGE_FIELD_NUMBER = 3
  def of(
    micros: _root_.scala.Long,
    logLevel: _root_.scala.Predef.String,
    message: _root_.scala.Predef.String
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData = _root_.io.deephaven.proto.backplane.script.grpc.console.LogSubscriptionData(
    micros,
    logLevel,
    message
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.LogSubscriptionData])
}
