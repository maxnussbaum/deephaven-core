// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.session

/** @param abnormalTermination
  *   whether or not this termination is expected
  * @param reason
  *   if additional information is available then provide it in this field
  * @param isFromUncaughtException
  *   if this is due to an exception, whether or not it was uncaught
  * @param stackTraces
  *   if applicable, the list of stack traces in reverse causal order
  */
@SerialVersionUID(0L)
final case class TerminationNotificationResponse(
    abnormalTermination: _root_.scala.Boolean = false,
    reason: _root_.scala.Predef.String = "",
    isFromUncaughtException: _root_.scala.Boolean = false,
    stackTraces: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TerminationNotificationResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = abnormalTermination
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        }
      };
      
      {
        val __value = reason
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = isFromUncaughtException
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      stackTraces.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = abnormalTermination
        if (__v != false) {
          _output__.writeBool(1, __v)
        }
      };
      {
        val __v = reason
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = isFromUncaughtException
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
      stackTraces.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      unknownFields.writeTo(_output__)
    }
    def withAbnormalTermination(__v: _root_.scala.Boolean): TerminationNotificationResponse = copy(abnormalTermination = __v)
    def withReason(__v: _root_.scala.Predef.String): TerminationNotificationResponse = copy(reason = __v)
    def withIsFromUncaughtException(__v: _root_.scala.Boolean): TerminationNotificationResponse = copy(isFromUncaughtException = __v)
    def clearStackTraces = copy(stackTraces = _root_.scala.Seq.empty)
    def addStackTraces(__vs: io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace *): TerminationNotificationResponse = addAllStackTraces(__vs)
    def addAllStackTraces(__vs: Iterable[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]): TerminationNotificationResponse = copy(stackTraces = stackTraces ++ __vs)
    def withStackTraces(__v: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]): TerminationNotificationResponse = copy(stackTraces = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = abnormalTermination
          if (__t != false) __t else null
        }
        case 2 => {
          val __t = reason
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = isFromUncaughtException
          if (__t != false) __t else null
        }
        case 4 => stackTraces
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PBoolean(abnormalTermination)
        case 2 => _root_.scalapb.descriptors.PString(reason)
        case 3 => _root_.scalapb.descriptors.PBoolean(isFromUncaughtException)
        case 4 => _root_.scalapb.descriptors.PRepeated(stackTraces.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.type = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.TerminationNotificationResponse])
}

object TerminationNotificationResponse extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse = {
    var __abnormalTermination: _root_.scala.Boolean = false
    var __reason: _root_.scala.Predef.String = ""
    var __isFromUncaughtException: _root_.scala.Boolean = false
    val __stackTraces: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 8 =>
          __abnormalTermination = _input__.readBool()
        case 18 =>
          __reason = _input__.readStringRequireUtf8()
        case 24 =>
          __isFromUncaughtException = _input__.readBool()
        case 34 =>
          __stackTraces += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace](_input__)
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse(
        abnormalTermination = __abnormalTermination,
        reason = __reason,
        isFromUncaughtException = __isFromUncaughtException,
        stackTraces = __stackTraces.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse(
        abnormalTermination = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        reason = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        isFromUncaughtException = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        stackTraces = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.session.SessionProto.javaDescriptor.getMessageTypes().get(13)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.session.SessionProto.scalaDescriptor.messages(13)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 4 => __out = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse(
    abnormalTermination = false,
    reason = "",
    isFromUncaughtException = false,
    stackTraces = _root_.scala.Seq.empty
  )
  @SerialVersionUID(0L)
  final case class StackTrace(
      `type`: _root_.scala.Predef.String = "",
      message: _root_.scala.Predef.String = "",
      elements: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StackTrace] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = `type`
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = message
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        elements.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = `type`
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = message
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        elements.foreach { __v =>
          val __m = __v
          _output__.writeString(3, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def withType(__v: _root_.scala.Predef.String): StackTrace = copy(`type` = __v)
      def withMessage(__v: _root_.scala.Predef.String): StackTrace = copy(message = __v)
      def clearElements = copy(elements = _root_.scala.Seq.empty)
      def addElements(__vs: _root_.scala.Predef.String *): StackTrace = addAllElements(__vs)
      def addAllElements(__vs: Iterable[_root_.scala.Predef.String]): StackTrace = copy(elements = elements ++ __vs)
      def withElements(__v: _root_.scala.Seq[_root_.scala.Predef.String]): StackTrace = copy(elements = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = `type`
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = message
            if (__t != "") __t else null
          }
          case 3 => elements
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(`type`)
          case 2 => _root_.scalapb.descriptors.PString(message)
          case 3 => _root_.scalapb.descriptors.PRepeated(elements.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace.type = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace])
  }
  
  object StackTrace extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace = {
      var __type: _root_.scala.Predef.String = ""
      var __message: _root_.scala.Predef.String = ""
      val __elements: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __type = _input__.readStringRequireUtf8()
          case 18 =>
            __message = _input__.readStringRequireUtf8()
          case 26 =>
            __elements += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace(
          `type` = __type,
          message = __message,
          elements = __elements.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace(
          `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          message = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          elements = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace(
      `type` = "",
      message = "",
      elements = _root_.scala.Seq.empty
    )
    implicit class StackTraceLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace](_l) {
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def message: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.message)((c_, f_) => c_.copy(message = f_))
      def elements: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.elements)((c_, f_) => c_.copy(elements = f_))
    }
    final val TYPE_FIELD_NUMBER = 1
    final val MESSAGE_FIELD_NUMBER = 2
    final val ELEMENTS_FIELD_NUMBER = 3
    def of(
      `type`: _root_.scala.Predef.String,
      message: _root_.scala.Predef.String,
      elements: _root_.scala.Seq[_root_.scala.Predef.String]
    ): _root_.io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace = _root_.io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace(
      `type`,
      message,
      elements
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.TerminationNotificationResponse.StackTrace])
  }
  
  implicit class TerminationNotificationResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse](_l) {
    def abnormalTermination: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.abnormalTermination)((c_, f_) => c_.copy(abnormalTermination = f_))
    def reason: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.reason)((c_, f_) => c_.copy(reason = f_))
    def isFromUncaughtException: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isFromUncaughtException)((c_, f_) => c_.copy(isFromUncaughtException = f_))
    def stackTraces: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]] = field(_.stackTraces)((c_, f_) => c_.copy(stackTraces = f_))
  }
  final val ABNORMAL_TERMINATION_FIELD_NUMBER = 1
  final val REASON_FIELD_NUMBER = 2
  final val IS_FROM_UNCAUGHT_EXCEPTION_FIELD_NUMBER = 3
  final val STACK_TRACES_FIELD_NUMBER = 4
  def of(
    abnormalTermination: _root_.scala.Boolean,
    reason: _root_.scala.Predef.String,
    isFromUncaughtException: _root_.scala.Boolean,
    stackTraces: _root_.scala.Seq[io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse.StackTrace]
  ): _root_.io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse = _root_.io.deephaven.proto.backplane.grpc.session.TerminationNotificationResponse(
    abnormalTermination,
    reason,
    isFromUncaughtException,
    stackTraces
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.TerminationNotificationResponse])
}
