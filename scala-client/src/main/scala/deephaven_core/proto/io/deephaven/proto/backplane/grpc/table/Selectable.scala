// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class Selectable(
    `type`: io.deephaven.proto.backplane.grpc.table.Selectable.Type = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Selectable] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (`type`.raw.isDefined) {
        val __value = `type`.raw.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      `type`.raw.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getRaw: _root_.scala.Predef.String = `type`.raw.getOrElse("")
    def withRaw(__v: _root_.scala.Predef.String): Selectable = copy(`type` = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Raw(__v))
    def clearType: Selectable = copy(`type` = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Empty)
    def withType(__v: io.deephaven.proto.backplane.grpc.table.Selectable.Type): Selectable = copy(`type` = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => `type`.raw.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => `type`.raw.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.Selectable.type = io.deephaven.proto.backplane.grpc.table.Selectable
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.Selectable])
}

object Selectable extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Selectable] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.Selectable] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.Selectable = {
    var __type: io.deephaven.proto.backplane.grpc.table.Selectable.Type = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __type = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Raw(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.Selectable(
        `type` = __type,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.Selectable] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.Selectable(
        `type` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.deephaven.proto.backplane.grpc.table.Selectable.Type.Raw(_))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.Selectable.Type.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TableProto.javaDescriptor.getMessageTypes().get(9)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TableProto.scalaDescriptor.messages(9)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.Selectable(
    `type` = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Empty
  )
  sealed trait Type extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isRaw: _root_.scala.Boolean = false
    def raw: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object Type {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.Selectable.Type {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class Raw(value: _root_.scala.Predef.String) extends io.deephaven.proto.backplane.grpc.table.Selectable.Type {
      type ValueType = _root_.scala.Predef.String
      override def isRaw: _root_.scala.Boolean = true
      override def raw: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 1
    }
  }
  implicit class SelectableLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Selectable]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.Selectable](_l) {
    def raw: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getRaw)((c_, f_) => c_.copy(`type` = io.deephaven.proto.backplane.grpc.table.Selectable.Type.Raw(f_)))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.Selectable.Type] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
  }
  final val RAW_FIELD_NUMBER = 1
  def of(
    `type`: io.deephaven.proto.backplane.grpc.table.Selectable.Type
  ): _root_.io.deephaven.proto.backplane.grpc.table.Selectable = _root_.io.deephaven.proto.backplane.grpc.table.Selectable(
    `type`
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.Selectable])
}
