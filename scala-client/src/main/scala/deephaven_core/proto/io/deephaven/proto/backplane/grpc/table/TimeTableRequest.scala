// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

@SerialVersionUID(0L)
final case class TimeTableRequest(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    startTime: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.Empty,
    period: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.Empty,
    blinkTable: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TimeTableRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultId.isDefined) {
        val __value = resultId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (startTime.startTimeNanos.isDefined) {
        val __value = startTime.startTimeNanos.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(2, __value)
      };
      if (startTime.startTimeString.isDefined) {
        val __value = startTime.startTimeString.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
      };
      if (period.periodNanos.isDefined) {
        val __value = period.periodNanos.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeSInt64Size(3, __value)
      };
      if (period.periodString.isDefined) {
        val __value = period.periodString.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      };
      
      {
        val __value = blinkTable
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      startTime.startTimeNanos.foreach { __v =>
        val __m = __v
        _output__.writeSInt64(2, __m)
      };
      period.periodNanos.foreach { __v =>
        val __m = __v
        _output__.writeSInt64(3, __m)
      };
      {
        val __v = blinkTable
        if (__v != false) {
          _output__.writeBool(4, __v)
        }
      };
      startTime.startTimeString.foreach { __v =>
        val __m = __v
        _output__.writeString(5, __m)
      };
      period.periodString.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getResultId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultId: TimeTableRequest = copy(resultId = _root_.scala.None)
    def withResultId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): TimeTableRequest = copy(resultId = Option(__v))
    def getStartTimeNanos: _root_.scala.Long = startTime.startTimeNanos.getOrElse(0L)
    def withStartTimeNanos(__v: _root_.scala.Long): TimeTableRequest = copy(startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeNanos(__v))
    def getStartTimeString: _root_.scala.Predef.String = startTime.startTimeString.getOrElse("")
    def withStartTimeString(__v: _root_.scala.Predef.String): TimeTableRequest = copy(startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeString(__v))
    def getPeriodNanos: _root_.scala.Long = period.periodNanos.getOrElse(0L)
    def withPeriodNanos(__v: _root_.scala.Long): TimeTableRequest = copy(period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodNanos(__v))
    def getPeriodString: _root_.scala.Predef.String = period.periodString.getOrElse("")
    def withPeriodString(__v: _root_.scala.Predef.String): TimeTableRequest = copy(period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodString(__v))
    def withBlinkTable(__v: _root_.scala.Boolean): TimeTableRequest = copy(blinkTable = __v)
    def clearStartTime: TimeTableRequest = copy(startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.Empty)
    def withStartTime(__v: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime): TimeTableRequest = copy(startTime = __v)
    def clearPeriod: TimeTableRequest = copy(period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.Empty)
    def withPeriod(__v: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period): TimeTableRequest = copy(period = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultId.orNull
        case 2 => startTime.startTimeNanos.orNull
        case 5 => startTime.startTimeString.orNull
        case 3 => period.periodNanos.orNull
        case 6 => period.periodString.orNull
        case 4 => {
          val __t = blinkTable
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => startTime.startTimeNanos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => startTime.startTimeString.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => period.periodNanos.map(_root_.scalapb.descriptors.PLong(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => period.periodString.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => _root_.scalapb.descriptors.PBoolean(blinkTable)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.type = io.deephaven.proto.backplane.grpc.table.TimeTableRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.TimeTableRequest])
}

object TimeTableRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.TimeTableRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.table.TimeTableRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.table.TimeTableRequest = {
    var __resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __blinkTable: _root_.scala.Boolean = false
    var __startTime: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.Empty
    var __period: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.Empty
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultId = _root_.scala.Option(__resultId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 16 =>
          __startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeNanos(_input__.readSInt64())
        case 42 =>
          __startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeString(_input__.readStringRequireUtf8())
        case 24 =>
          __period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodNanos(_input__.readSInt64())
        case 50 =>
          __period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodString(_input__.readStringRequireUtf8())
        case 32 =>
          __blinkTable = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.table.TimeTableRequest(
        resultId = __resultId,
        blinkTable = __blinkTable,
        startTime = __startTime,
        period = __period,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.table.TimeTableRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.table.TimeTableRequest(
        resultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        blinkTable = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        startTime = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeNanos(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeString(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.Empty),
        period = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Long]]).map(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodNanos(_))
            .orElse[io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodString(_)))
            .getOrElse(io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getMessageTypes().get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.table.TimeTableRequest(
    resultId = _root_.scala.None,
    blinkTable = false,
    startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.Empty,
    period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.Empty
  )
  sealed abstract class StartTime extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isStartTimeNanos: _root_.scala.Boolean = false
    def isStartTimeString: _root_.scala.Boolean = false
    def startTimeNanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    def startTimeString: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object StartTime {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class StartTimeNanos(value: _root_.scala.Long) extends io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime {
      type ValueType = _root_.scala.Long
      override def isStartTimeNanos: _root_.scala.Boolean = true
      override def startTimeNanos: _root_.scala.Option[_root_.scala.Long] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class StartTimeString(value: _root_.scala.Predef.String) extends io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime {
      type ValueType = _root_.scala.Predef.String
      override def isStartTimeString: _root_.scala.Boolean = true
      override def startTimeString: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  sealed abstract class Period extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isPeriodNanos: _root_.scala.Boolean = false
    def isPeriodString: _root_.scala.Boolean = false
    def periodNanos: _root_.scala.Option[_root_.scala.Long] = _root_.scala.None
    def periodString: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object Period {
    @SerialVersionUID(0L)
    case object Empty extends io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class PeriodNanos(value: _root_.scala.Long) extends io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period {
      type ValueType = _root_.scala.Long
      override def isPeriodNanos: _root_.scala.Boolean = true
      override def periodNanos: _root_.scala.Option[_root_.scala.Long] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class PeriodString(value: _root_.scala.Predef.String) extends io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period {
      type ValueType = _root_.scala.Predef.String
      override def isPeriodString: _root_.scala.Boolean = true
      override def periodString: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 6
    }
  }
  implicit class TimeTableRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TimeTableRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.table.TimeTableRequest](_l) {
    def resultId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultId)((c_, f_) => c_.copy(resultId = _root_.scala.Option(f_)))
    def optionalResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultId)((c_, f_) => c_.copy(resultId = f_))
    def startTimeNanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getStartTimeNanos)((c_, f_) => c_.copy(startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeNanos(f_)))
    def startTimeString: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getStartTimeString)((c_, f_) => c_.copy(startTime = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime.StartTimeString(f_)))
    def periodNanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.getPeriodNanos)((c_, f_) => c_.copy(period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodNanos(f_)))
    def periodString: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPeriodString)((c_, f_) => c_.copy(period = io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period.PeriodString(f_)))
    def blinkTable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.blinkTable)((c_, f_) => c_.copy(blinkTable = f_))
    def startTime: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime] = field(_.startTime)((c_, f_) => c_.copy(startTime = f_))
    def period: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period] = field(_.period)((c_, f_) => c_.copy(period = f_))
  }
  final val RESULT_ID_FIELD_NUMBER = 1
  final val START_TIME_NANOS_FIELD_NUMBER = 2
  final val START_TIME_STRING_FIELD_NUMBER = 5
  final val PERIOD_NANOS_FIELD_NUMBER = 3
  final val PERIOD_STRING_FIELD_NUMBER = 6
  final val BLINK_TABLE_FIELD_NUMBER = 4
  def of(
    resultId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    startTime: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.StartTime,
    period: io.deephaven.proto.backplane.grpc.table.TimeTableRequest.Period,
    blinkTable: _root_.scala.Boolean
  ): _root_.io.deephaven.proto.backplane.grpc.table.TimeTableRequest = _root_.io.deephaven.proto.backplane.grpc.table.TimeTableRequest(
    resultId,
    startTime,
    period,
    blinkTable
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.TimeTableRequest])
}
