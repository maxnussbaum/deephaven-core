// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class GetSignatureHelpResponse(
    signatures: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation] = _root_.scala.Seq.empty,
    activeSignature: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    activeParameter: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetSignatureHelpResponse] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      signatures.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      if (activeSignature.isDefined) {
        val __value = activeSignature.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
      };
      if (activeParameter.isDefined) {
        val __value = activeParameter.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      signatures.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      activeSignature.foreach { __v =>
        val __m = __v
        _output__.writeInt32(2, __m)
      };
      activeParameter.foreach { __v =>
        val __m = __v
        _output__.writeInt32(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def clearSignatures = copy(signatures = _root_.scala.Seq.empty)
    def addSignatures(__vs: io.deephaven.proto.backplane.script.grpc.console.SignatureInformation *): GetSignatureHelpResponse = addAllSignatures(__vs)
    def addAllSignatures(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation]): GetSignatureHelpResponse = copy(signatures = signatures ++ __vs)
    def withSignatures(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation]): GetSignatureHelpResponse = copy(signatures = __v)
    def getActiveSignature: _root_.scala.Int = activeSignature.getOrElse(0)
    def clearActiveSignature: GetSignatureHelpResponse = copy(activeSignature = _root_.scala.None)
    def withActiveSignature(__v: _root_.scala.Int): GetSignatureHelpResponse = copy(activeSignature = Option(__v))
    def getActiveParameter: _root_.scala.Int = activeParameter.getOrElse(0)
    def clearActiveParameter: GetSignatureHelpResponse = copy(activeParameter = _root_.scala.None)
    def withActiveParameter(__v: _root_.scala.Int): GetSignatureHelpResponse = copy(activeParameter = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => signatures
        case 2 => activeSignature.orNull
        case 3 => activeParameter.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(signatures.iterator.map(_.toPMessage).toVector)
        case 2 => activeSignature.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => activeParameter.map(_root_.scalapb.descriptors.PInt(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse.type = io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse])
}

object GetSignatureHelpResponse extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse = {
    val __signatures: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation]
    var __activeSignature: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var __activeParameter: _root_.scala.Option[_root_.scala.Int] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __signatures += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation](_input__)
        case 16 =>
          __activeSignature = _root_.scala.Option(_input__.readInt32())
        case 24 =>
          __activeParameter = _root_.scala.Option(_input__.readInt32())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse(
        signatures = __signatures.result(),
        activeSignature = __activeSignature,
        activeParameter = __activeParameter,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse(
        signatures = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation]]).getOrElse(_root_.scala.Seq.empty),
        activeSignature = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]]),
        activeParameter = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Int]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.javaDescriptor.getMessageTypes().get(34)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.ConsoleProto.scalaDescriptor.messages(34)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.script.grpc.console.SignatureInformation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse(
    signatures = _root_.scala.Seq.empty,
    activeSignature = _root_.scala.None,
    activeParameter = _root_.scala.None
  )
  implicit class GetSignatureHelpResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse](_l) {
    def signatures: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation]] = field(_.signatures)((c_, f_) => c_.copy(signatures = f_))
    def activeSignature: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getActiveSignature)((c_, f_) => c_.copy(activeSignature = _root_.scala.Option(f_)))
    def optionalActiveSignature: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.activeSignature)((c_, f_) => c_.copy(activeSignature = f_))
    def activeParameter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.getActiveParameter)((c_, f_) => c_.copy(activeParameter = _root_.scala.Option(f_)))
    def optionalActiveParameter: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Int]] = field(_.activeParameter)((c_, f_) => c_.copy(activeParameter = f_))
  }
  final val SIGNATURES_FIELD_NUMBER = 1
  final val ACTIVE_SIGNATURE_FIELD_NUMBER = 2
  final val ACTIVE_PARAMETER_FIELD_NUMBER = 3
  def of(
    signatures: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.SignatureInformation],
    activeSignature: _root_.scala.Option[_root_.scala.Int],
    activeParameter: _root_.scala.Option[_root_.scala.Int]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse = _root_.io.deephaven.proto.backplane.script.grpc.console.GetSignatureHelpResponse(
    signatures,
    activeSignature,
    activeParameter
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.GetSignatureHelpResponse])
}
