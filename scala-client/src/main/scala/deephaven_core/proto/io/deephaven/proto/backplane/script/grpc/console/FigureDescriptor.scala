// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class FigureDescriptor(
    title: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    titleFont: _root_.scala.Predef.String = "",
    titleColor: _root_.scala.Predef.String = "",
    updateInterval: _root_.scala.Long = 0L,
    cols: _root_.scala.Int = 0,
    rows: _root_.scala.Int = 0,
    charts: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor] = _root_.scala.Seq.empty,
    errors: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[FigureDescriptor] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (title.isDefined) {
        val __value = title.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      };
      
      {
        val __value = titleFont
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = titleColor
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = updateInterval
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(7, __value)
        }
      };
      
      {
        val __value = cols
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(8, __value)
        }
      };
      
      {
        val __value = rows
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(9, __value)
        }
      };
      charts.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      errors.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, __value)
      }
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      title.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      {
        val __v = titleFont
        if (!__v.isEmpty) {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = titleColor
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = updateInterval
        if (__v != 0L) {
          _output__.writeInt64(7, __v)
        }
      };
      {
        val __v = cols
        if (__v != 0) {
          _output__.writeInt32(8, __v)
        }
      };
      {
        val __v = rows
        if (__v != 0) {
          _output__.writeInt32(9, __v)
        }
      };
      charts.foreach { __v =>
        val __m = __v
        _output__.writeTag(10, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      errors.foreach { __v =>
        val __m = __v
        _output__.writeString(13, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getTitle: _root_.scala.Predef.String = title.getOrElse("")
    def clearTitle: FigureDescriptor = copy(title = _root_.scala.None)
    def withTitle(__v: _root_.scala.Predef.String): FigureDescriptor = copy(title = Option(__v))
    def withTitleFont(__v: _root_.scala.Predef.String): FigureDescriptor = copy(titleFont = __v)
    def withTitleColor(__v: _root_.scala.Predef.String): FigureDescriptor = copy(titleColor = __v)
    def withUpdateInterval(__v: _root_.scala.Long): FigureDescriptor = copy(updateInterval = __v)
    def withCols(__v: _root_.scala.Int): FigureDescriptor = copy(cols = __v)
    def withRows(__v: _root_.scala.Int): FigureDescriptor = copy(rows = __v)
    def clearCharts = copy(charts = _root_.scala.Seq.empty)
    def addCharts(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor *): FigureDescriptor = addAllCharts(__vs)
    def addAllCharts(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor]): FigureDescriptor = copy(charts = charts ++ __vs)
    def withCharts(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor]): FigureDescriptor = copy(charts = __v)
    def clearErrors = copy(errors = _root_.scala.Seq.empty)
    def addErrors(__vs: _root_.scala.Predef.String *): FigureDescriptor = addAllErrors(__vs)
    def addAllErrors(__vs: Iterable[_root_.scala.Predef.String]): FigureDescriptor = copy(errors = errors ++ __vs)
    def withErrors(__v: _root_.scala.Seq[_root_.scala.Predef.String]): FigureDescriptor = copy(errors = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => title.orNull
        case 2 => {
          val __t = titleFont
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = titleColor
          if (__t != "") __t else null
        }
        case 7 => {
          val __t = updateInterval
          if (__t != 0L) __t else null
        }
        case 8 => {
          val __t = cols
          if (__t != 0) __t else null
        }
        case 9 => {
          val __t = rows
          if (__t != 0) __t else null
        }
        case 10 => charts
        case 13 => errors
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => title.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(titleFont)
        case 3 => _root_.scalapb.descriptors.PString(titleColor)
        case 7 => _root_.scalapb.descriptors.PLong(updateInterval)
        case 8 => _root_.scalapb.descriptors.PInt(cols)
        case 9 => _root_.scalapb.descriptors.PInt(rows)
        case 10 => _root_.scalapb.descriptors.PRepeated(charts.iterator.map(_.toPMessage).toVector)
        case 13 => _root_.scalapb.descriptors.PRepeated(errors.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor])
}

object FigureDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor = {
    var __title: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __titleFont: _root_.scala.Predef.String = ""
    var __titleColor: _root_.scala.Predef.String = ""
    var __updateInterval: _root_.scala.Long = 0L
    var __cols: _root_.scala.Int = 0
    var __rows: _root_.scala.Int = 0
    val __charts: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor]
    val __errors: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __title = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 18 =>
          __titleFont = _input__.readStringRequireUtf8()
        case 26 =>
          __titleColor = _input__.readStringRequireUtf8()
        case 56 =>
          __updateInterval = _input__.readInt64()
        case 64 =>
          __cols = _input__.readInt32()
        case 72 =>
          __rows = _input__.readInt32()
        case 82 =>
          __charts += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor](_input__)
        case 106 =>
          __errors += _input__.readStringRequireUtf8()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor(
        title = __title,
        titleFont = __titleFont,
        titleColor = __titleColor,
        updateInterval = __updateInterval,
        cols = __cols,
        rows = __rows,
        charts = __charts.result(),
        errors = __errors.result(),
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor(
        title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        titleFont = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        titleColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        updateInterval = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        cols = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        rows = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        charts = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor]]).getOrElse(_root_.scala.Seq.empty),
        errors = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsoleProto.javaDescriptor.getMessageTypes().get(43)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsoleProto.scalaDescriptor.messages(43)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 10 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor,
      _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor(
    title = _root_.scala.None,
    titleFont = "",
    titleColor = "",
    updateInterval = 0L,
    cols = 0,
    rows = 0,
    charts = _root_.scala.Seq.empty,
    errors = _root_.scala.Seq.empty
  )
  sealed abstract class SeriesPlotStyle(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle
    type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.Recognized
    def isBar: _root_.scala.Boolean = false
    def isStackedBar: _root_.scala.Boolean = false
    def isLine: _root_.scala.Boolean = false
    def isArea: _root_.scala.Boolean = false
    def isStackedArea: _root_.scala.Boolean = false
    def isPie: _root_.scala.Boolean = false
    def isHistogram: _root_.scala.Boolean = false
    def isOhlc: _root_.scala.Boolean = false
    def isScatter: _root_.scala.Boolean = false
    def isStep: _root_.scala.Boolean = false
    def isErrorBar: _root_.scala.Boolean = false
    def isTreemap: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[SeriesPlotStyle] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.Recognized])
  }
  
  object SeriesPlotStyle extends _root_.scalapb.GeneratedEnumCompanion[SeriesPlotStyle] {
    sealed trait Recognized extends SeriesPlotStyle
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SeriesPlotStyle] = this
    
    @SerialVersionUID(0L)
    case object BAR extends SeriesPlotStyle(0) with SeriesPlotStyle.Recognized {
      val index = 0
      val name = "BAR"
      override def isBar: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STACKED_BAR extends SeriesPlotStyle(1) with SeriesPlotStyle.Recognized {
      val index = 1
      val name = "STACKED_BAR"
      override def isStackedBar: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LINE extends SeriesPlotStyle(2) with SeriesPlotStyle.Recognized {
      val index = 2
      val name = "LINE"
      override def isLine: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object AREA extends SeriesPlotStyle(3) with SeriesPlotStyle.Recognized {
      val index = 3
      val name = "AREA"
      override def isArea: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STACKED_AREA extends SeriesPlotStyle(4) with SeriesPlotStyle.Recognized {
      val index = 4
      val name = "STACKED_AREA"
      override def isStackedArea: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PIE extends SeriesPlotStyle(5) with SeriesPlotStyle.Recognized {
      val index = 5
      val name = "PIE"
      override def isPie: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HISTOGRAM extends SeriesPlotStyle(6) with SeriesPlotStyle.Recognized {
      val index = 6
      val name = "HISTOGRAM"
      override def isHistogram: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object OHLC extends SeriesPlotStyle(7) with SeriesPlotStyle.Recognized {
      val index = 7
      val name = "OHLC"
      override def isOhlc: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SCATTER extends SeriesPlotStyle(8) with SeriesPlotStyle.Recognized {
      val index = 8
      val name = "SCATTER"
      override def isScatter: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object STEP extends SeriesPlotStyle(9) with SeriesPlotStyle.Recognized {
      val index = 9
      val name = "STEP"
      override def isStep: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object ERROR_BAR extends SeriesPlotStyle(10) with SeriesPlotStyle.Recognized {
      val index = 10
      val name = "ERROR_BAR"
      override def isErrorBar: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TREEMAP extends SeriesPlotStyle(11) with SeriesPlotStyle.Recognized {
      val index = 11
      val name = "TREEMAP"
      override def isTreemap: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SeriesPlotStyle(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(BAR, STACKED_BAR, LINE, AREA, STACKED_AREA, PIE, HISTOGRAM, OHLC, SCATTER, STEP, ERROR_BAR, TREEMAP)
    def fromValue(__value: _root_.scala.Int): SeriesPlotStyle = __value match {
      case 0 => BAR
      case 1 => STACKED_BAR
      case 2 => LINE
      case 3 => AREA
      case 4 => STACKED_AREA
      case 5 => PIE
      case 6 => HISTOGRAM
      case 7 => OHLC
      case 8 => SCATTER
      case 9 => STEP
      case 10 => ERROR_BAR
      case 11 => TREEMAP
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getEnumTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.enums(0)
  }
  sealed abstract class SourceType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
    type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType
    type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.Recognized
    def isX: _root_.scala.Boolean = false
    def isY: _root_.scala.Boolean = false
    def isZ: _root_.scala.Boolean = false
    def isXLow: _root_.scala.Boolean = false
    def isXHigh: _root_.scala.Boolean = false
    def isYLow: _root_.scala.Boolean = false
    def isYHigh: _root_.scala.Boolean = false
    def isTime: _root_.scala.Boolean = false
    def isOpen: _root_.scala.Boolean = false
    def isHigh: _root_.scala.Boolean = false
    def isLow: _root_.scala.Boolean = false
    def isClose: _root_.scala.Boolean = false
    def isShape: _root_.scala.Boolean = false
    def isSize: _root_.scala.Boolean = false
    def isLabel: _root_.scala.Boolean = false
    def isColor: _root_.scala.Boolean = false
    def isParent: _root_.scala.Boolean = false
    def isHoverText: _root_.scala.Boolean = false
    def isText: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[SourceType] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType
    final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.Recognized])
  }
  
  object SourceType extends _root_.scalapb.GeneratedEnumCompanion[SourceType] {
    sealed trait Recognized extends SourceType
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[SourceType] = this
    
    @SerialVersionUID(0L)
    case object X extends SourceType(0) with SourceType.Recognized {
      val index = 0
      val name = "X"
      override def isX: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Y extends SourceType(1) with SourceType.Recognized {
      val index = 1
      val name = "Y"
      override def isY: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Z extends SourceType(2) with SourceType.Recognized {
      val index = 2
      val name = "Z"
      override def isZ: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object X_LOW extends SourceType(3) with SourceType.Recognized {
      val index = 3
      val name = "X_LOW"
      override def isXLow: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object X_HIGH extends SourceType(4) with SourceType.Recognized {
      val index = 4
      val name = "X_HIGH"
      override def isXHigh: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Y_LOW extends SourceType(5) with SourceType.Recognized {
      val index = 5
      val name = "Y_LOW"
      override def isYLow: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object Y_HIGH extends SourceType(6) with SourceType.Recognized {
      val index = 6
      val name = "Y_HIGH"
      override def isYHigh: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TIME extends SourceType(7) with SourceType.Recognized {
      val index = 7
      val name = "TIME"
      override def isTime: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object OPEN extends SourceType(8) with SourceType.Recognized {
      val index = 8
      val name = "OPEN"
      override def isOpen: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HIGH extends SourceType(9) with SourceType.Recognized {
      val index = 9
      val name = "HIGH"
      override def isHigh: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LOW extends SourceType(10) with SourceType.Recognized {
      val index = 10
      val name = "LOW"
      override def isLow: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CLOSE extends SourceType(11) with SourceType.Recognized {
      val index = 11
      val name = "CLOSE"
      override def isClose: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SHAPE extends SourceType(12) with SourceType.Recognized {
      val index = 12
      val name = "SHAPE"
      override def isShape: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object SIZE extends SourceType(13) with SourceType.Recognized {
      val index = 13
      val name = "SIZE"
      override def isSize: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object LABEL extends SourceType(14) with SourceType.Recognized {
      val index = 14
      val name = "LABEL"
      override def isLabel: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object COLOR extends SourceType(15) with SourceType.Recognized {
      val index = 15
      val name = "COLOR"
      override def isColor: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object PARENT extends SourceType(16) with SourceType.Recognized {
      val index = 16
      val name = "PARENT"
      override def isParent: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object HOVER_TEXT extends SourceType(17) with SourceType.Recognized {
      val index = 17
      val name = "HOVER_TEXT"
      override def isHoverText: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object TEXT extends SourceType(18) with SourceType.Recognized {
      val index = 18
      val name = "TEXT"
      override def isText: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends SourceType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
    lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(X, Y, Z, X_LOW, X_HIGH, Y_LOW, Y_HIGH, TIME, OPEN, HIGH, LOW, CLOSE, SHAPE, SIZE, LABEL, COLOR, PARENT, HOVER_TEXT, TEXT)
    def fromValue(__value: _root_.scala.Int): SourceType = __value match {
      case 0 => X
      case 1 => Y
      case 2 => Z
      case 3 => X_LOW
      case 4 => X_HIGH
      case 5 => Y_LOW
      case 6 => Y_HIGH
      case 7 => TIME
      case 8 => OPEN
      case 9 => HIGH
      case 10 => LOW
      case 11 => CLOSE
      case 12 => SHAPE
      case 13 => SIZE
      case 14 => LABEL
      case 15 => COLOR
      case 16 => PARENT
      case 17 => HOVER_TEXT
      case 18 => TEXT
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getEnumTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.enums(1)
  }
  @SerialVersionUID(0L)
  final case class ChartDescriptor(
      colspan: _root_.scala.Int = 0,
      rowspan: _root_.scala.Int = 0,
      series: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor] = _root_.scala.Seq.empty,
      multiSeries: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor] = _root_.scala.Seq.empty,
      axes: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor] = _root_.scala.Seq.empty,
      chartType: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.XY,
      title: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      titleFont: _root_.scala.Predef.String = "",
      titleColor: _root_.scala.Predef.String = "",
      showLegend: _root_.scala.Boolean = false,
      legendFont: _root_.scala.Predef.String = "",
      legendColor: _root_.scala.Predef.String = "",
      is3D: _root_.scala.Boolean = false,
      column: _root_.scala.Int = 0,
      row: _root_.scala.Int = 0,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[ChartDescriptor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = colspan
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
          }
        };
        
        {
          val __value = rowspan
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        series.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        multiSeries.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        axes.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        
        {
          val __value = chartType.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(6, __value)
          }
        };
        if (title.isDefined) {
          val __value = title.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
        };
        
        {
          val __value = titleFont
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
          }
        };
        
        {
          val __value = titleColor
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
          }
        };
        
        {
          val __value = showLegend
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(10, __value)
          }
        };
        
        {
          val __value = legendFont
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
          }
        };
        
        {
          val __value = legendColor
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(12, __value)
          }
        };
        
        {
          val __value = is3D
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
          }
        };
        
        {
          val __value = column
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(14, __value)
          }
        };
        
        {
          val __value = row
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = colspan
          if (__v != 0) {
            _output__.writeInt32(1, __v)
          }
        };
        {
          val __v = rowspan
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
        series.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        multiSeries.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        axes.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        {
          val __v = chartType.value
          if (__v != 0) {
            _output__.writeEnum(6, __v)
          }
        };
        title.foreach { __v =>
          val __m = __v
          _output__.writeString(7, __m)
        };
        {
          val __v = titleFont
          if (!__v.isEmpty) {
            _output__.writeString(8, __v)
          }
        };
        {
          val __v = titleColor
          if (!__v.isEmpty) {
            _output__.writeString(9, __v)
          }
        };
        {
          val __v = showLegend
          if (__v != false) {
            _output__.writeBool(10, __v)
          }
        };
        {
          val __v = legendFont
          if (!__v.isEmpty) {
            _output__.writeString(11, __v)
          }
        };
        {
          val __v = legendColor
          if (!__v.isEmpty) {
            _output__.writeString(12, __v)
          }
        };
        {
          val __v = is3D
          if (__v != false) {
            _output__.writeBool(13, __v)
          }
        };
        {
          val __v = column
          if (__v != 0) {
            _output__.writeInt32(14, __v)
          }
        };
        {
          val __v = row
          if (__v != 0) {
            _output__.writeInt32(15, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withColspan(__v: _root_.scala.Int): ChartDescriptor = copy(colspan = __v)
      def withRowspan(__v: _root_.scala.Int): ChartDescriptor = copy(rowspan = __v)
      def clearSeries = copy(series = _root_.scala.Seq.empty)
      def addSeries(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor *): ChartDescriptor = addAllSeries(__vs)
      def addAllSeries(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor]): ChartDescriptor = copy(series = series ++ __vs)
      def withSeries(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor]): ChartDescriptor = copy(series = __v)
      def clearMultiSeries = copy(multiSeries = _root_.scala.Seq.empty)
      def addMultiSeries(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor *): ChartDescriptor = addAllMultiSeries(__vs)
      def addAllMultiSeries(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor]): ChartDescriptor = copy(multiSeries = multiSeries ++ __vs)
      def withMultiSeries(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor]): ChartDescriptor = copy(multiSeries = __v)
      def clearAxes = copy(axes = _root_.scala.Seq.empty)
      def addAxes(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor *): ChartDescriptor = addAllAxes(__vs)
      def addAllAxes(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor]): ChartDescriptor = copy(axes = axes ++ __vs)
      def withAxes(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor]): ChartDescriptor = copy(axes = __v)
      def withChartType(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType): ChartDescriptor = copy(chartType = __v)
      def getTitle: _root_.scala.Predef.String = title.getOrElse("")
      def clearTitle: ChartDescriptor = copy(title = _root_.scala.None)
      def withTitle(__v: _root_.scala.Predef.String): ChartDescriptor = copy(title = Option(__v))
      def withTitleFont(__v: _root_.scala.Predef.String): ChartDescriptor = copy(titleFont = __v)
      def withTitleColor(__v: _root_.scala.Predef.String): ChartDescriptor = copy(titleColor = __v)
      def withShowLegend(__v: _root_.scala.Boolean): ChartDescriptor = copy(showLegend = __v)
      def withLegendFont(__v: _root_.scala.Predef.String): ChartDescriptor = copy(legendFont = __v)
      def withLegendColor(__v: _root_.scala.Predef.String): ChartDescriptor = copy(legendColor = __v)
      def withIs3D(__v: _root_.scala.Boolean): ChartDescriptor = copy(is3D = __v)
      def withColumn(__v: _root_.scala.Int): ChartDescriptor = copy(column = __v)
      def withRow(__v: _root_.scala.Int): ChartDescriptor = copy(row = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = colspan
            if (__t != 0) __t else null
          }
          case 2 => {
            val __t = rowspan
            if (__t != 0) __t else null
          }
          case 3 => series
          case 4 => multiSeries
          case 5 => axes
          case 6 => {
            val __t = chartType.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 7 => title.orNull
          case 8 => {
            val __t = titleFont
            if (__t != "") __t else null
          }
          case 9 => {
            val __t = titleColor
            if (__t != "") __t else null
          }
          case 10 => {
            val __t = showLegend
            if (__t != false) __t else null
          }
          case 11 => {
            val __t = legendFont
            if (__t != "") __t else null
          }
          case 12 => {
            val __t = legendColor
            if (__t != "") __t else null
          }
          case 13 => {
            val __t = is3D
            if (__t != false) __t else null
          }
          case 14 => {
            val __t = column
            if (__t != 0) __t else null
          }
          case 15 => {
            val __t = row
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PInt(colspan)
          case 2 => _root_.scalapb.descriptors.PInt(rowspan)
          case 3 => _root_.scalapb.descriptors.PRepeated(series.iterator.map(_.toPMessage).toVector)
          case 4 => _root_.scalapb.descriptors.PRepeated(multiSeries.iterator.map(_.toPMessage).toVector)
          case 5 => _root_.scalapb.descriptors.PRepeated(axes.iterator.map(_.toPMessage).toVector)
          case 6 => _root_.scalapb.descriptors.PEnum(chartType.scalaValueDescriptor)
          case 7 => title.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 8 => _root_.scalapb.descriptors.PString(titleFont)
          case 9 => _root_.scalapb.descriptors.PString(titleColor)
          case 10 => _root_.scalapb.descriptors.PBoolean(showLegend)
          case 11 => _root_.scalapb.descriptors.PString(legendFont)
          case 12 => _root_.scalapb.descriptors.PString(legendColor)
          case 13 => _root_.scalapb.descriptors.PBoolean(is3D)
          case 14 => _root_.scalapb.descriptors.PInt(column)
          case 15 => _root_.scalapb.descriptors.PInt(row)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor])
  }
  
  object ChartDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor = {
      var __colspan: _root_.scala.Int = 0
      var __rowspan: _root_.scala.Int = 0
      val __series: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor]
      val __multiSeries: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor]
      val __axes: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor]
      var __chartType: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.XY
      var __title: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __titleFont: _root_.scala.Predef.String = ""
      var __titleColor: _root_.scala.Predef.String = ""
      var __showLegend: _root_.scala.Boolean = false
      var __legendFont: _root_.scala.Predef.String = ""
      var __legendColor: _root_.scala.Predef.String = ""
      var __is3D: _root_.scala.Boolean = false
      var __column: _root_.scala.Int = 0
      var __row: _root_.scala.Int = 0
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __colspan = _input__.readInt32()
          case 16 =>
            __rowspan = _input__.readInt32()
          case 26 =>
            __series += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor](_input__)
          case 34 =>
            __multiSeries += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor](_input__)
          case 42 =>
            __axes += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor](_input__)
          case 48 =>
            __chartType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.fromValue(_input__.readEnum())
          case 58 =>
            __title = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 66 =>
            __titleFont = _input__.readStringRequireUtf8()
          case 74 =>
            __titleColor = _input__.readStringRequireUtf8()
          case 80 =>
            __showLegend = _input__.readBool()
          case 90 =>
            __legendFont = _input__.readStringRequireUtf8()
          case 98 =>
            __legendColor = _input__.readStringRequireUtf8()
          case 104 =>
            __is3D = _input__.readBool()
          case 112 =>
            __column = _input__.readInt32()
          case 120 =>
            __row = _input__.readInt32()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor(
          colspan = __colspan,
          rowspan = __rowspan,
          series = __series.result(),
          multiSeries = __multiSeries.result(),
          axes = __axes.result(),
          chartType = __chartType,
          title = __title,
          titleFont = __titleFont,
          titleColor = __titleColor,
          showLegend = __showLegend,
          legendFont = __legendFont,
          legendColor = __legendColor,
          is3D = __is3D,
          column = __column,
          row = __row,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor(
          colspan = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          rowspan = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          series = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor]]).getOrElse(_root_.scala.Seq.empty),
          multiSeries = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor]]).getOrElse(_root_.scala.Seq.empty),
          axes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor]]).getOrElse(_root_.scala.Seq.empty),
          chartType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.XY.scalaValueDescriptor).number),
          title = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          titleFont = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          titleColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          showLegend = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          legendFont = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          legendColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          is3D = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          column = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          row = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 3 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor
        case 4 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor
        case 5 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 6 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor(
      colspan = 0,
      rowspan = 0,
      series = _root_.scala.Seq.empty,
      multiSeries = _root_.scala.Seq.empty,
      axes = _root_.scala.Seq.empty,
      chartType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.XY,
      title = _root_.scala.None,
      titleFont = "",
      titleColor = "",
      showLegend = false,
      legendFont = "",
      legendColor = "",
      is3D = false,
      column = 0,
      row = 0
    )
    sealed abstract class ChartType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType
      type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.Recognized
      def isXy: _root_.scala.Boolean = false
      def isPie: _root_.scala.Boolean = false
      def isOhlc: _root_.scala.Boolean = false
      def isCategory: _root_.scala.Boolean = false
      def isXyz: _root_.scala.Boolean = false
      def isCategory3D: _root_.scala.Boolean = false
      def isTreemap: _root_.scala.Boolean = false
      def companion: _root_.scalapb.GeneratedEnumCompanion[ChartType] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType
      final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType.Recognized])
    }
    
    object ChartType extends _root_.scalapb.GeneratedEnumCompanion[ChartType] {
      sealed trait Recognized extends ChartType
      implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[ChartType] = this
      
      @SerialVersionUID(0L)
      case object XY extends ChartType(0) with ChartType.Recognized {
        val index = 0
        val name = "XY"
        override def isXy: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object PIE extends ChartType(1) with ChartType.Recognized {
        val index = 1
        val name = "PIE"
        override def isPie: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      @scala.deprecated(message="Marked as deprecated in proto file", "")
      case object OHLC extends ChartType(2) with ChartType.Recognized {
        val index = 2
        val name = "OHLC"
        override def isOhlc: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object CATEGORY extends ChartType(3) with ChartType.Recognized {
        val index = 3
        val name = "CATEGORY"
        override def isCategory: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object XYZ extends ChartType(4) with ChartType.Recognized {
        val index = 4
        val name = "XYZ"
        override def isXyz: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object CATEGORY_3D extends ChartType(5) with ChartType.Recognized {
        val index = 5
        val name = "CATEGORY_3D"
        override def isCategory3D: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object TREEMAP extends ChartType(6) with ChartType.Recognized {
        val index = 6
        val name = "TREEMAP"
        override def isTreemap: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends ChartType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(XY, PIE, OHLC, CATEGORY, XYZ, CATEGORY_3D, TREEMAP)
      def fromValue(__value: _root_.scala.Int): ChartType = __value match {
        case 0 => XY
        case 1 => PIE
        case 2 => OHLC
        case 3 => CATEGORY
        case 4 => XYZ
        case 5 => CATEGORY_3D
        case 6 => TREEMAP
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.javaDescriptor.getEnumTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.scalaDescriptor.enums(0)
    }
    implicit class ChartDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor](_l) {
      def colspan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.colspan)((c_, f_) => c_.copy(colspan = f_))
      def rowspan: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.rowspan)((c_, f_) => c_.copy(rowspan = f_))
      def series: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor]] = field(_.series)((c_, f_) => c_.copy(series = f_))
      def multiSeries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor]] = field(_.multiSeries)((c_, f_) => c_.copy(multiSeries = f_))
      def axes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor]] = field(_.axes)((c_, f_) => c_.copy(axes = f_))
      def chartType: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType] = field(_.chartType)((c_, f_) => c_.copy(chartType = f_))
      def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = _root_.scala.Option(f_)))
      def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
      def titleFont: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.titleFont)((c_, f_) => c_.copy(titleFont = f_))
      def titleColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.titleColor)((c_, f_) => c_.copy(titleColor = f_))
      def showLegend: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.showLegend)((c_, f_) => c_.copy(showLegend = f_))
      def legendFont: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.legendFont)((c_, f_) => c_.copy(legendFont = f_))
      def legendColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.legendColor)((c_, f_) => c_.copy(legendColor = f_))
      def is3D: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.is3D)((c_, f_) => c_.copy(is3D = f_))
      def column: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.column)((c_, f_) => c_.copy(column = f_))
      def row: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.row)((c_, f_) => c_.copy(row = f_))
    }
    final val COLSPAN_FIELD_NUMBER = 1
    final val ROWSPAN_FIELD_NUMBER = 2
    final val SERIES_FIELD_NUMBER = 3
    final val MULTI_SERIES_FIELD_NUMBER = 4
    final val AXES_FIELD_NUMBER = 5
    final val CHART_TYPE_FIELD_NUMBER = 6
    final val TITLE_FIELD_NUMBER = 7
    final val TITLE_FONT_FIELD_NUMBER = 8
    final val TITLE_COLOR_FIELD_NUMBER = 9
    final val SHOW_LEGEND_FIELD_NUMBER = 10
    final val LEGEND_FONT_FIELD_NUMBER = 11
    final val LEGEND_COLOR_FIELD_NUMBER = 12
    final val IS3D_FIELD_NUMBER = 13
    final val COLUMN_FIELD_NUMBER = 14
    final val ROW_FIELD_NUMBER = 15
    def of(
      colspan: _root_.scala.Int,
      rowspan: _root_.scala.Int,
      series: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor],
      multiSeries: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor],
      axes: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor],
      chartType: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor.ChartType,
      title: _root_.scala.Option[_root_.scala.Predef.String],
      titleFont: _root_.scala.Predef.String,
      titleColor: _root_.scala.Predef.String,
      showLegend: _root_.scala.Boolean,
      legendFont: _root_.scala.Predef.String,
      legendColor: _root_.scala.Predef.String,
      is3D: _root_.scala.Boolean,
      column: _root_.scala.Int,
      row: _root_.scala.Int
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor(
      colspan,
      rowspan,
      series,
      multiSeries,
      axes,
      chartType,
      title,
      titleFont,
      titleColor,
      showLegend,
      legendFont,
      legendColor,
      is3D,
      column,
      row
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.ChartDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class SeriesDescriptor(
      plotStyle: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR,
      name: _root_.scala.Predef.String = "",
      linesVisible: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
      shapesVisible: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
      gradientVisible: _root_.scala.Boolean = false,
      lineColor: _root_.scala.Predef.String = "",
      pointLabelFormat: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      xToolTipPattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      yToolTipPattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      shapeLabel: _root_.scala.Predef.String = "",
      shapeSize: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      shapeColor: _root_.scala.Predef.String = "",
      shape: _root_.scala.Predef.String = "",
      dataSources: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SeriesDescriptor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = plotStyle.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
          }
        };
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        if (linesVisible.isDefined) {
          val __value = linesVisible.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        };
        if (shapesVisible.isDefined) {
          val __value = shapesVisible.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(4, __value)
        };
        
        {
          val __value = gradientVisible
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
          }
        };
        
        {
          val __value = lineColor
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
          }
        };
        if (pointLabelFormat.isDefined) {
          val __value = pointLabelFormat.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
        };
        if (xToolTipPattern.isDefined) {
          val __value = xToolTipPattern.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        };
        if (yToolTipPattern.isDefined) {
          val __value = yToolTipPattern.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
        };
        
        {
          val __value = shapeLabel
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(11, __value)
          }
        };
        if (shapeSize.isDefined) {
          val __value = shapeSize.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(12, __value)
        };
        
        {
          val __value = shapeColor
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(13, __value)
          }
        };
        
        {
          val __value = shape
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(14, __value)
          }
        };
        dataSources.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = plotStyle.value
          if (__v != 0) {
            _output__.writeEnum(1, __v)
          }
        };
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        linesVisible.foreach { __v =>
          val __m = __v
          _output__.writeBool(3, __m)
        };
        shapesVisible.foreach { __v =>
          val __m = __v
          _output__.writeBool(4, __m)
        };
        {
          val __v = gradientVisible
          if (__v != false) {
            _output__.writeBool(5, __v)
          }
        };
        {
          val __v = lineColor
          if (!__v.isEmpty) {
            _output__.writeString(6, __v)
          }
        };
        pointLabelFormat.foreach { __v =>
          val __m = __v
          _output__.writeString(8, __m)
        };
        xToolTipPattern.foreach { __v =>
          val __m = __v
          _output__.writeString(9, __m)
        };
        yToolTipPattern.foreach { __v =>
          val __m = __v
          _output__.writeString(10, __m)
        };
        {
          val __v = shapeLabel
          if (!__v.isEmpty) {
            _output__.writeString(11, __v)
          }
        };
        shapeSize.foreach { __v =>
          val __m = __v
          _output__.writeDouble(12, __m)
        };
        {
          val __v = shapeColor
          if (!__v.isEmpty) {
            _output__.writeString(13, __v)
          }
        };
        {
          val __v = shape
          if (!__v.isEmpty) {
            _output__.writeString(14, __v)
          }
        };
        dataSources.foreach { __v =>
          val __m = __v
          _output__.writeTag(15, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withPlotStyle(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle): SeriesDescriptor = copy(plotStyle = __v)
      def withName(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(name = __v)
      def getLinesVisible: _root_.scala.Boolean = linesVisible.getOrElse(false)
      def clearLinesVisible: SeriesDescriptor = copy(linesVisible = _root_.scala.None)
      def withLinesVisible(__v: _root_.scala.Boolean): SeriesDescriptor = copy(linesVisible = Option(__v))
      def getShapesVisible: _root_.scala.Boolean = shapesVisible.getOrElse(false)
      def clearShapesVisible: SeriesDescriptor = copy(shapesVisible = _root_.scala.None)
      def withShapesVisible(__v: _root_.scala.Boolean): SeriesDescriptor = copy(shapesVisible = Option(__v))
      def withGradientVisible(__v: _root_.scala.Boolean): SeriesDescriptor = copy(gradientVisible = __v)
      def withLineColor(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(lineColor = __v)
      def getPointLabelFormat: _root_.scala.Predef.String = pointLabelFormat.getOrElse("")
      def clearPointLabelFormat: SeriesDescriptor = copy(pointLabelFormat = _root_.scala.None)
      def withPointLabelFormat(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(pointLabelFormat = Option(__v))
      def getXToolTipPattern: _root_.scala.Predef.String = xToolTipPattern.getOrElse("")
      def clearXToolTipPattern: SeriesDescriptor = copy(xToolTipPattern = _root_.scala.None)
      def withXToolTipPattern(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(xToolTipPattern = Option(__v))
      def getYToolTipPattern: _root_.scala.Predef.String = yToolTipPattern.getOrElse("")
      def clearYToolTipPattern: SeriesDescriptor = copy(yToolTipPattern = _root_.scala.None)
      def withYToolTipPattern(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(yToolTipPattern = Option(__v))
      def withShapeLabel(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(shapeLabel = __v)
      def getShapeSize: _root_.scala.Double = shapeSize.getOrElse(0.0)
      def clearShapeSize: SeriesDescriptor = copy(shapeSize = _root_.scala.None)
      def withShapeSize(__v: _root_.scala.Double): SeriesDescriptor = copy(shapeSize = Option(__v))
      def withShapeColor(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(shapeColor = __v)
      def withShape(__v: _root_.scala.Predef.String): SeriesDescriptor = copy(shape = __v)
      def clearDataSources = copy(dataSources = _root_.scala.Seq.empty)
      def addDataSources(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor *): SeriesDescriptor = addAllDataSources(__vs)
      def addAllDataSources(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]): SeriesDescriptor = copy(dataSources = dataSources ++ __vs)
      def withDataSources(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]): SeriesDescriptor = copy(dataSources = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = plotStyle.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 2 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 3 => linesVisible.orNull
          case 4 => shapesVisible.orNull
          case 5 => {
            val __t = gradientVisible
            if (__t != false) __t else null
          }
          case 6 => {
            val __t = lineColor
            if (__t != "") __t else null
          }
          case 8 => pointLabelFormat.orNull
          case 9 => xToolTipPattern.orNull
          case 10 => yToolTipPattern.orNull
          case 11 => {
            val __t = shapeLabel
            if (__t != "") __t else null
          }
          case 12 => shapeSize.orNull
          case 13 => {
            val __t = shapeColor
            if (__t != "") __t else null
          }
          case 14 => {
            val __t = shape
            if (__t != "") __t else null
          }
          case 15 => dataSources
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(plotStyle.scalaValueDescriptor)
          case 2 => _root_.scalapb.descriptors.PString(name)
          case 3 => linesVisible.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => shapesVisible.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => _root_.scalapb.descriptors.PBoolean(gradientVisible)
          case 6 => _root_.scalapb.descriptors.PString(lineColor)
          case 8 => pointLabelFormat.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 9 => xToolTipPattern.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => yToolTipPattern.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => _root_.scalapb.descriptors.PString(shapeLabel)
          case 12 => shapeSize.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 13 => _root_.scalapb.descriptors.PString(shapeColor)
          case 14 => _root_.scalapb.descriptors.PString(shape)
          case 15 => _root_.scalapb.descriptors.PRepeated(dataSources.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor])
  }
  
  object SeriesDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor = {
      var __plotStyle: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR
      var __name: _root_.scala.Predef.String = ""
      var __linesVisible: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
      var __shapesVisible: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
      var __gradientVisible: _root_.scala.Boolean = false
      var __lineColor: _root_.scala.Predef.String = ""
      var __pointLabelFormat: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __xToolTipPattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __yToolTipPattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __shapeLabel: _root_.scala.Predef.String = ""
      var __shapeSize: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      var __shapeColor: _root_.scala.Predef.String = ""
      var __shape: _root_.scala.Predef.String = ""
      val __dataSources: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __plotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.fromValue(_input__.readEnum())
          case 18 =>
            __name = _input__.readStringRequireUtf8()
          case 24 =>
            __linesVisible = _root_.scala.Option(_input__.readBool())
          case 32 =>
            __shapesVisible = _root_.scala.Option(_input__.readBool())
          case 40 =>
            __gradientVisible = _input__.readBool()
          case 50 =>
            __lineColor = _input__.readStringRequireUtf8()
          case 66 =>
            __pointLabelFormat = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 74 =>
            __xToolTipPattern = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 82 =>
            __yToolTipPattern = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 90 =>
            __shapeLabel = _input__.readStringRequireUtf8()
          case 97 =>
            __shapeSize = _root_.scala.Option(_input__.readDouble())
          case 106 =>
            __shapeColor = _input__.readStringRequireUtf8()
          case 114 =>
            __shape = _input__.readStringRequireUtf8()
          case 122 =>
            __dataSources += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor(
          plotStyle = __plotStyle,
          name = __name,
          linesVisible = __linesVisible,
          shapesVisible = __shapesVisible,
          gradientVisible = __gradientVisible,
          lineColor = __lineColor,
          pointLabelFormat = __pointLabelFormat,
          xToolTipPattern = __xToolTipPattern,
          yToolTipPattern = __yToolTipPattern,
          shapeLabel = __shapeLabel,
          shapeSize = __shapeSize,
          shapeColor = __shapeColor,
          shape = __shape,
          dataSources = __dataSources.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor(
          plotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR.scalaValueDescriptor).number),
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          linesVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
          shapesVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
          gradientVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          lineColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          pointLabelFormat = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          xToolTipPattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          yToolTipPattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          shapeLabel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          shapeSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
          shapeColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          shape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          dataSources = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 15 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor(
      plotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR,
      name = "",
      linesVisible = _root_.scala.None,
      shapesVisible = _root_.scala.None,
      gradientVisible = false,
      lineColor = "",
      pointLabelFormat = _root_.scala.None,
      xToolTipPattern = _root_.scala.None,
      yToolTipPattern = _root_.scala.None,
      shapeLabel = "",
      shapeSize = _root_.scala.None,
      shapeColor = "",
      shape = "",
      dataSources = _root_.scala.Seq.empty
    )
    implicit class SeriesDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor](_l) {
      def plotStyle: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle] = field(_.plotStyle)((c_, f_) => c_.copy(plotStyle = f_))
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def linesVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getLinesVisible)((c_, f_) => c_.copy(linesVisible = _root_.scala.Option(f_)))
      def optionalLinesVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.linesVisible)((c_, f_) => c_.copy(linesVisible = f_))
      def shapesVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getShapesVisible)((c_, f_) => c_.copy(shapesVisible = _root_.scala.Option(f_)))
      def optionalShapesVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.shapesVisible)((c_, f_) => c_.copy(shapesVisible = f_))
      def gradientVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.gradientVisible)((c_, f_) => c_.copy(gradientVisible = f_))
      def lineColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.lineColor)((c_, f_) => c_.copy(lineColor = f_))
      def pointLabelFormat: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPointLabelFormat)((c_, f_) => c_.copy(pointLabelFormat = _root_.scala.Option(f_)))
      def optionalPointLabelFormat: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.pointLabelFormat)((c_, f_) => c_.copy(pointLabelFormat = f_))
      def xToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getXToolTipPattern)((c_, f_) => c_.copy(xToolTipPattern = _root_.scala.Option(f_)))
      def optionalXToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.xToolTipPattern)((c_, f_) => c_.copy(xToolTipPattern = f_))
      def yToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getYToolTipPattern)((c_, f_) => c_.copy(yToolTipPattern = _root_.scala.Option(f_)))
      def optionalYToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.yToolTipPattern)((c_, f_) => c_.copy(yToolTipPattern = f_))
      def shapeLabel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shapeLabel)((c_, f_) => c_.copy(shapeLabel = f_))
      def shapeSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getShapeSize)((c_, f_) => c_.copy(shapeSize = _root_.scala.Option(f_)))
      def optionalShapeSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.shapeSize)((c_, f_) => c_.copy(shapeSize = f_))
      def shapeColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shapeColor)((c_, f_) => c_.copy(shapeColor = f_))
      def shape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.shape)((c_, f_) => c_.copy(shape = f_))
      def dataSources: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]] = field(_.dataSources)((c_, f_) => c_.copy(dataSources = f_))
    }
    final val PLOT_STYLE_FIELD_NUMBER = 1
    final val NAME_FIELD_NUMBER = 2
    final val LINES_VISIBLE_FIELD_NUMBER = 3
    final val SHAPES_VISIBLE_FIELD_NUMBER = 4
    final val GRADIENT_VISIBLE_FIELD_NUMBER = 5
    final val LINE_COLOR_FIELD_NUMBER = 6
    final val POINT_LABEL_FORMAT_FIELD_NUMBER = 8
    final val X_TOOL_TIP_PATTERN_FIELD_NUMBER = 9
    final val Y_TOOL_TIP_PATTERN_FIELD_NUMBER = 10
    final val SHAPE_LABEL_FIELD_NUMBER = 11
    final val SHAPE_SIZE_FIELD_NUMBER = 12
    final val SHAPE_COLOR_FIELD_NUMBER = 13
    final val SHAPE_FIELD_NUMBER = 14
    final val DATA_SOURCES_FIELD_NUMBER = 15
    def of(
      plotStyle: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle,
      name: _root_.scala.Predef.String,
      linesVisible: _root_.scala.Option[_root_.scala.Boolean],
      shapesVisible: _root_.scala.Option[_root_.scala.Boolean],
      gradientVisible: _root_.scala.Boolean,
      lineColor: _root_.scala.Predef.String,
      pointLabelFormat: _root_.scala.Option[_root_.scala.Predef.String],
      xToolTipPattern: _root_.scala.Option[_root_.scala.Predef.String],
      yToolTipPattern: _root_.scala.Option[_root_.scala.Predef.String],
      shapeLabel: _root_.scala.Predef.String,
      shapeSize: _root_.scala.Option[_root_.scala.Double],
      shapeColor: _root_.scala.Predef.String,
      shape: _root_.scala.Predef.String,
      dataSources: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesDescriptor(
      plotStyle,
      name,
      linesVisible,
      shapesVisible,
      gradientVisible,
      lineColor,
      pointLabelFormat,
      xToolTipPattern,
      yToolTipPattern,
      shapeLabel,
      shapeSize,
      shapeColor,
      shape,
      dataSources
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SeriesDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class MultiSeriesDescriptor(
      plotStyle: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR,
      name: _root_.scala.Predef.String = "",
      lineColor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      pointColor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      linesVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scala.None,
      pointsVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scala.None,
      gradientVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scala.None,
      pointLabelFormat: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      xToolTipPattern: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      yToolTipPattern: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      pointLabel: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      pointSize: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault] = _root_.scala.None,
      pointShape: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None,
      dataSources: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MultiSeriesDescriptor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = plotStyle.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(1, __value)
          }
        };
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        if (lineColor.isDefined) {
          val __value = lineColor.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (pointColor.isDefined) {
          val __value = pointColor.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (linesVisible.isDefined) {
          val __value = linesVisible.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (pointsVisible.isDefined) {
          val __value = pointsVisible.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (gradientVisible.isDefined) {
          val __value = gradientVisible.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (pointLabelFormat.isDefined) {
          val __value = pointLabelFormat.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (xToolTipPattern.isDefined) {
          val __value = xToolTipPattern.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (yToolTipPattern.isDefined) {
          val __value = yToolTipPattern.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (pointLabel.isDefined) {
          val __value = pointLabel.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (pointSize.isDefined) {
          val __value = pointSize.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        if (pointShape.isDefined) {
          val __value = pointShape.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        dataSources.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = plotStyle.value
          if (__v != 0) {
            _output__.writeEnum(1, __v)
          }
        };
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        lineColor.foreach { __v =>
          val __m = __v
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        pointColor.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        linesVisible.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        pointsVisible.foreach { __v =>
          val __m = __v
          _output__.writeTag(6, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        gradientVisible.foreach { __v =>
          val __m = __v
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        pointLabelFormat.foreach { __v =>
          val __m = __v
          _output__.writeTag(8, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        xToolTipPattern.foreach { __v =>
          val __m = __v
          _output__.writeTag(9, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        yToolTipPattern.foreach { __v =>
          val __m = __v
          _output__.writeTag(10, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        pointLabel.foreach { __v =>
          val __m = __v
          _output__.writeTag(11, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        pointSize.foreach { __v =>
          val __m = __v
          _output__.writeTag(12, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        pointShape.foreach { __v =>
          val __m = __v
          _output__.writeTag(13, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        dataSources.foreach { __v =>
          val __m = __v
          _output__.writeTag(14, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withPlotStyle(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle): MultiSeriesDescriptor = copy(plotStyle = __v)
      def withName(__v: _root_.scala.Predef.String): MultiSeriesDescriptor = copy(name = __v)
      def getLineColor: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = lineColor.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearLineColor: MultiSeriesDescriptor = copy(lineColor = _root_.scala.None)
      def withLineColor(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(lineColor = Option(__v))
      def getPointColor: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = pointColor.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearPointColor: MultiSeriesDescriptor = copy(pointColor = _root_.scala.None)
      def withPointColor(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(pointColor = Option(__v))
      def getLinesVisible: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault = linesVisible.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault.defaultInstance)
      def clearLinesVisible: MultiSeriesDescriptor = copy(linesVisible = _root_.scala.None)
      def withLinesVisible(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault): MultiSeriesDescriptor = copy(linesVisible = Option(__v))
      def getPointsVisible: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault = pointsVisible.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault.defaultInstance)
      def clearPointsVisible: MultiSeriesDescriptor = copy(pointsVisible = _root_.scala.None)
      def withPointsVisible(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault): MultiSeriesDescriptor = copy(pointsVisible = Option(__v))
      def getGradientVisible: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault = gradientVisible.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault.defaultInstance)
      def clearGradientVisible: MultiSeriesDescriptor = copy(gradientVisible = _root_.scala.None)
      def withGradientVisible(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault): MultiSeriesDescriptor = copy(gradientVisible = Option(__v))
      def getPointLabelFormat: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = pointLabelFormat.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearPointLabelFormat: MultiSeriesDescriptor = copy(pointLabelFormat = _root_.scala.None)
      def withPointLabelFormat(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(pointLabelFormat = Option(__v))
      def getXToolTipPattern: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = xToolTipPattern.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearXToolTipPattern: MultiSeriesDescriptor = copy(xToolTipPattern = _root_.scala.None)
      def withXToolTipPattern(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(xToolTipPattern = Option(__v))
      def getYToolTipPattern: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = yToolTipPattern.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearYToolTipPattern: MultiSeriesDescriptor = copy(yToolTipPattern = _root_.scala.None)
      def withYToolTipPattern(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(yToolTipPattern = Option(__v))
      def getPointLabel: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = pointLabel.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearPointLabel: MultiSeriesDescriptor = copy(pointLabel = _root_.scala.None)
      def withPointLabel(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(pointLabel = Option(__v))
      def getPointSize: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault = pointSize.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault.defaultInstance)
      def clearPointSize: MultiSeriesDescriptor = copy(pointSize = _root_.scala.None)
      def withPointSize(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault): MultiSeriesDescriptor = copy(pointSize = Option(__v))
      def getPointShape: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = pointShape.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.defaultInstance)
      def clearPointShape: MultiSeriesDescriptor = copy(pointShape = _root_.scala.None)
      def withPointShape(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault): MultiSeriesDescriptor = copy(pointShape = Option(__v))
      def clearDataSources = copy(dataSources = _root_.scala.Seq.empty)
      def addDataSources(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor *): MultiSeriesDescriptor = addAllDataSources(__vs)
      def addAllDataSources(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]): MultiSeriesDescriptor = copy(dataSources = dataSources ++ __vs)
      def withDataSources(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]): MultiSeriesDescriptor = copy(dataSources = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = plotStyle.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 2 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 3 => lineColor.orNull
          case 4 => pointColor.orNull
          case 5 => linesVisible.orNull
          case 6 => pointsVisible.orNull
          case 7 => gradientVisible.orNull
          case 8 => pointLabelFormat.orNull
          case 9 => xToolTipPattern.orNull
          case 10 => yToolTipPattern.orNull
          case 11 => pointLabel.orNull
          case 12 => pointSize.orNull
          case 13 => pointShape.orNull
          case 14 => dataSources
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PEnum(plotStyle.scalaValueDescriptor)
          case 2 => _root_.scalapb.descriptors.PString(name)
          case 3 => lineColor.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 4 => pointColor.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 5 => linesVisible.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 6 => pointsVisible.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 7 => gradientVisible.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 8 => pointLabelFormat.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 9 => xToolTipPattern.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => yToolTipPattern.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 11 => pointLabel.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 12 => pointSize.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 13 => pointShape.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 14 => _root_.scalapb.descriptors.PRepeated(dataSources.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor])
  }
  
  object MultiSeriesDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor = {
      var __plotStyle: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR
      var __name: _root_.scala.Predef.String = ""
      var __lineColor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      var __pointColor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      var __linesVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scala.None
      var __pointsVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scala.None
      var __gradientVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scala.None
      var __pointLabelFormat: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      var __xToolTipPattern: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      var __yToolTipPattern: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      var __pointLabel: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      var __pointSize: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault] = _root_.scala.None
      var __pointShape: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scala.None
      val __dataSources: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __plotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.fromValue(_input__.readEnum())
          case 18 =>
            __name = _input__.readStringRequireUtf8()
          case 26 =>
            __lineColor = _root_.scala.Option(__lineColor.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 34 =>
            __pointColor = _root_.scala.Option(__pointColor.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 42 =>
            __linesVisible = _root_.scala.Option(__linesVisible.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 50 =>
            __pointsVisible = _root_.scala.Option(__pointsVisible.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 58 =>
            __gradientVisible = _root_.scala.Option(__gradientVisible.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 66 =>
            __pointLabelFormat = _root_.scala.Option(__pointLabelFormat.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 74 =>
            __xToolTipPattern = _root_.scala.Option(__xToolTipPattern.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 82 =>
            __yToolTipPattern = _root_.scala.Option(__yToolTipPattern.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 90 =>
            __pointLabel = _root_.scala.Option(__pointLabel.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 98 =>
            __pointSize = _root_.scala.Option(__pointSize.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 106 =>
            __pointShape = _root_.scala.Option(__pointShape.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case 114 =>
            __dataSources += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor(
          plotStyle = __plotStyle,
          name = __name,
          lineColor = __lineColor,
          pointColor = __pointColor,
          linesVisible = __linesVisible,
          pointsVisible = __pointsVisible,
          gradientVisible = __gradientVisible,
          pointLabelFormat = __pointLabelFormat,
          xToolTipPattern = __xToolTipPattern,
          yToolTipPattern = __yToolTipPattern,
          pointLabel = __pointLabel,
          pointSize = __pointSize,
          pointShape = __pointShape,
          dataSources = __dataSources.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor(
          plotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR.scalaValueDescriptor).number),
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          lineColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          pointColor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          linesVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]]),
          pointsVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]]),
          gradientVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]]),
          pointLabelFormat = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          xToolTipPattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          yToolTipPattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          pointLabel = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          pointSize = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault]]),
          pointShape = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]]),
          dataSources = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 3 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 4 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 5 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault
        case 6 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault
        case 7 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault
        case 8 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 9 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 10 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 11 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 12 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault
        case 13 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
        case 14 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor(
      plotStyle = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle.BAR,
      name = "",
      lineColor = _root_.scala.None,
      pointColor = _root_.scala.None,
      linesVisible = _root_.scala.None,
      pointsVisible = _root_.scala.None,
      gradientVisible = _root_.scala.None,
      pointLabelFormat = _root_.scala.None,
      xToolTipPattern = _root_.scala.None,
      yToolTipPattern = _root_.scala.None,
      pointLabel = _root_.scala.None,
      pointSize = _root_.scala.None,
      pointShape = _root_.scala.None,
      dataSources = _root_.scala.Seq.empty
    )
    implicit class MultiSeriesDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor](_l) {
      def plotStyle: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle] = field(_.plotStyle)((c_, f_) => c_.copy(plotStyle = f_))
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def lineColor: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getLineColor)((c_, f_) => c_.copy(lineColor = _root_.scala.Option(f_)))
      def optionalLineColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.lineColor)((c_, f_) => c_.copy(lineColor = f_))
      def pointColor: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getPointColor)((c_, f_) => c_.copy(pointColor = _root_.scala.Option(f_)))
      def optionalPointColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.pointColor)((c_, f_) => c_.copy(pointColor = f_))
      def linesVisible: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = field(_.getLinesVisible)((c_, f_) => c_.copy(linesVisible = _root_.scala.Option(f_)))
      def optionalLinesVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]] = field(_.linesVisible)((c_, f_) => c_.copy(linesVisible = f_))
      def pointsVisible: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = field(_.getPointsVisible)((c_, f_) => c_.copy(pointsVisible = _root_.scala.Option(f_)))
      def optionalPointsVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]] = field(_.pointsVisible)((c_, f_) => c_.copy(pointsVisible = f_))
      def gradientVisible: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = field(_.getGradientVisible)((c_, f_) => c_.copy(gradientVisible = _root_.scala.Option(f_)))
      def optionalGradientVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]] = field(_.gradientVisible)((c_, f_) => c_.copy(gradientVisible = f_))
      def pointLabelFormat: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getPointLabelFormat)((c_, f_) => c_.copy(pointLabelFormat = _root_.scala.Option(f_)))
      def optionalPointLabelFormat: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.pointLabelFormat)((c_, f_) => c_.copy(pointLabelFormat = f_))
      def xToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getXToolTipPattern)((c_, f_) => c_.copy(xToolTipPattern = _root_.scala.Option(f_)))
      def optionalXToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.xToolTipPattern)((c_, f_) => c_.copy(xToolTipPattern = f_))
      def yToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getYToolTipPattern)((c_, f_) => c_.copy(yToolTipPattern = _root_.scala.Option(f_)))
      def optionalYToolTipPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.yToolTipPattern)((c_, f_) => c_.copy(yToolTipPattern = f_))
      def pointLabel: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getPointLabel)((c_, f_) => c_.copy(pointLabel = _root_.scala.Option(f_)))
      def optionalPointLabel: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.pointLabel)((c_, f_) => c_.copy(pointLabel = f_))
      def pointSize: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault] = field(_.getPointSize)((c_, f_) => c_.copy(pointSize = _root_.scala.Option(f_)))
      def optionalPointSize: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault]] = field(_.pointSize)((c_, f_) => c_.copy(pointSize = f_))
      def pointShape: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = field(_.getPointShape)((c_, f_) => c_.copy(pointShape = _root_.scala.Option(f_)))
      def optionalPointShape: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]] = field(_.pointShape)((c_, f_) => c_.copy(pointShape = f_))
      def dataSources: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]] = field(_.dataSources)((c_, f_) => c_.copy(dataSources = f_))
    }
    final val PLOT_STYLE_FIELD_NUMBER = 1
    final val NAME_FIELD_NUMBER = 2
    final val LINE_COLOR_FIELD_NUMBER = 3
    final val POINT_COLOR_FIELD_NUMBER = 4
    final val LINES_VISIBLE_FIELD_NUMBER = 5
    final val POINTS_VISIBLE_FIELD_NUMBER = 6
    final val GRADIENT_VISIBLE_FIELD_NUMBER = 7
    final val POINT_LABEL_FORMAT_FIELD_NUMBER = 8
    final val X_TOOL_TIP_PATTERN_FIELD_NUMBER = 9
    final val Y_TOOL_TIP_PATTERN_FIELD_NUMBER = 10
    final val POINT_LABEL_FIELD_NUMBER = 11
    final val POINT_SIZE_FIELD_NUMBER = 12
    final val POINT_SHAPE_FIELD_NUMBER = 13
    final val DATA_SOURCES_FIELD_NUMBER = 14
    def of(
      plotStyle: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SeriesPlotStyle,
      name: _root_.scala.Predef.String,
      lineColor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      pointColor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      linesVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault],
      pointsVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault],
      gradientVisible: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault],
      pointLabelFormat: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      xToolTipPattern: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      yToolTipPattern: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      pointLabel: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      pointSize: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault],
      pointShape: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault],
      dataSources: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesDescriptor(
      plotStyle,
      name,
      lineColor,
      pointColor,
      linesVisible,
      pointsVisible,
      gradientVisible,
      pointLabelFormat,
      xToolTipPattern,
      yToolTipPattern,
      pointLabel,
      pointSize,
      pointShape,
      dataSources
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class StringMapWithDefault(
      defaultString: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      keys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      values: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[StringMapWithDefault] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (defaultString.isDefined) {
          val __value = defaultString.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        };
        keys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        values.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        defaultString.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        keys.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        values.foreach { __v =>
          val __m = __v
          _output__.writeString(3, __m)
        };
        unknownFields.writeTo(_output__)
      }
      def getDefaultString: _root_.scala.Predef.String = defaultString.getOrElse("")
      def clearDefaultString: StringMapWithDefault = copy(defaultString = _root_.scala.None)
      def withDefaultString(__v: _root_.scala.Predef.String): StringMapWithDefault = copy(defaultString = Option(__v))
      def clearKeys = copy(keys = _root_.scala.Seq.empty)
      def addKeys(__vs: _root_.scala.Predef.String *): StringMapWithDefault = addAllKeys(__vs)
      def addAllKeys(__vs: Iterable[_root_.scala.Predef.String]): StringMapWithDefault = copy(keys = keys ++ __vs)
      def withKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): StringMapWithDefault = copy(keys = __v)
      def clearValues = copy(values = _root_.scala.Seq.empty)
      def addValues(__vs: _root_.scala.Predef.String *): StringMapWithDefault = addAllValues(__vs)
      def addAllValues(__vs: Iterable[_root_.scala.Predef.String]): StringMapWithDefault = copy(values = values ++ __vs)
      def withValues(__v: _root_.scala.Seq[_root_.scala.Predef.String]): StringMapWithDefault = copy(values = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => defaultString.orNull
          case 2 => keys
          case 3 => values
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => defaultString.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PRepeated(keys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PRepeated(values.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault])
  }
  
  object StringMapWithDefault extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = {
      var __defaultString: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      val __keys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __values: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __defaultString = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 18 =>
            __keys += _input__.readStringRequireUtf8()
          case 26 =>
            __values += _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault(
          defaultString = __defaultString,
          keys = __keys.result(),
          values = __values.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault(
          defaultString = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          keys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          values = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(3)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(3)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault(
      defaultString = _root_.scala.None,
      keys = _root_.scala.Seq.empty,
      values = _root_.scala.Seq.empty
    )
    implicit class StringMapWithDefaultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault](_l) {
      def defaultString: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getDefaultString)((c_, f_) => c_.copy(defaultString = _root_.scala.Option(f_)))
      def optionalDefaultString: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.defaultString)((c_, f_) => c_.copy(defaultString = f_))
      def keys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
      def values: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.values)((c_, f_) => c_.copy(values = f_))
    }
    final val DEFAULT_STRING_FIELD_NUMBER = 1
    final val KEYS_FIELD_NUMBER = 2
    final val VALUES_FIELD_NUMBER = 3
    def of(
      defaultString: _root_.scala.Option[_root_.scala.Predef.String],
      keys: _root_.scala.Seq[_root_.scala.Predef.String],
      values: _root_.scala.Seq[_root_.scala.Predef.String]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.StringMapWithDefault(
      defaultString,
      keys,
      values
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.StringMapWithDefault])
  }
  
  @SerialVersionUID(0L)
  final case class DoubleMapWithDefault(
      defaultDouble: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      keys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      values: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[DoubleMapWithDefault] {
      private[this] def valuesSerializedSize = {
        8 * values.size
      }
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (defaultDouble.isDefined) {
          val __value = defaultDouble.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
        };
        keys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        if (values.nonEmpty) {
          val __localsize = valuesSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        defaultDouble.foreach { __v =>
          val __m = __v
          _output__.writeDouble(1, __m)
        };
        keys.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        if (values.nonEmpty) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(valuesSerializedSize)
          values.foreach(_output__.writeDoubleNoTag)
        };
        unknownFields.writeTo(_output__)
      }
      def getDefaultDouble: _root_.scala.Double = defaultDouble.getOrElse(0.0)
      def clearDefaultDouble: DoubleMapWithDefault = copy(defaultDouble = _root_.scala.None)
      def withDefaultDouble(__v: _root_.scala.Double): DoubleMapWithDefault = copy(defaultDouble = Option(__v))
      def clearKeys = copy(keys = _root_.scala.Seq.empty)
      def addKeys(__vs: _root_.scala.Predef.String *): DoubleMapWithDefault = addAllKeys(__vs)
      def addAllKeys(__vs: Iterable[_root_.scala.Predef.String]): DoubleMapWithDefault = copy(keys = keys ++ __vs)
      def withKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DoubleMapWithDefault = copy(keys = __v)
      def clearValues = copy(values = _root_.scala.Seq.empty)
      def addValues(__vs: _root_.scala.Double *): DoubleMapWithDefault = addAllValues(__vs)
      def addAllValues(__vs: Iterable[_root_.scala.Double]): DoubleMapWithDefault = copy(values = values ++ __vs)
      def withValues(__v: _root_.scala.Seq[_root_.scala.Double]): DoubleMapWithDefault = copy(values = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => defaultDouble.orNull
          case 2 => keys
          case 3 => values
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => defaultDouble.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PRepeated(keys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PRepeated(values.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault])
  }
  
  object DoubleMapWithDefault extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault = {
      var __defaultDouble: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      val __keys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __values: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __defaultDouble = _root_.scala.Option(_input__.readDouble())
          case 18 =>
            __keys += _input__.readStringRequireUtf8()
          case 25 =>
            __values += _input__.readDouble()
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __values += _input__.readDouble()
            }
            _input__.popLimit(oldLimit)
          }
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault(
          defaultDouble = __defaultDouble,
          keys = __keys.result(),
          values = __values.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault(
          defaultDouble = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
          keys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          values = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(4)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(4)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault(
      defaultDouble = _root_.scala.None,
      keys = _root_.scala.Seq.empty,
      values = _root_.scala.Seq.empty
    )
    implicit class DoubleMapWithDefaultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault](_l) {
      def defaultDouble: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getDefaultDouble)((c_, f_) => c_.copy(defaultDouble = _root_.scala.Option(f_)))
      def optionalDefaultDouble: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.defaultDouble)((c_, f_) => c_.copy(defaultDouble = f_))
      def keys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
      def values: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.values)((c_, f_) => c_.copy(values = f_))
    }
    final val DEFAULT_DOUBLE_FIELD_NUMBER = 1
    final val KEYS_FIELD_NUMBER = 2
    final val VALUES_FIELD_NUMBER = 3
    def of(
      defaultDouble: _root_.scala.Option[_root_.scala.Double],
      keys: _root_.scala.Seq[_root_.scala.Predef.String],
      values: _root_.scala.Seq[_root_.scala.Double]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.DoubleMapWithDefault(
      defaultDouble,
      keys,
      values
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.DoubleMapWithDefault])
  }
  
  @SerialVersionUID(0L)
  final case class BoolMapWithDefault(
      defaultBool: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None,
      keys: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      values: _root_.scala.Seq[_root_.scala.Boolean] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BoolMapWithDefault] {
      private[this] def valuesSerializedSize = {
        1 * values.size
      }
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        if (defaultBool.isDefined) {
          val __value = defaultBool.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(1, __value)
        };
        keys.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        if (values.nonEmpty) {
          val __localsize = valuesSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        defaultBool.foreach { __v =>
          val __m = __v
          _output__.writeBool(1, __m)
        };
        keys.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        if (values.nonEmpty) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(valuesSerializedSize)
          values.foreach(_output__.writeBoolNoTag)
        };
        unknownFields.writeTo(_output__)
      }
      def getDefaultBool: _root_.scala.Boolean = defaultBool.getOrElse(false)
      def clearDefaultBool: BoolMapWithDefault = copy(defaultBool = _root_.scala.None)
      def withDefaultBool(__v: _root_.scala.Boolean): BoolMapWithDefault = copy(defaultBool = Option(__v))
      def clearKeys = copy(keys = _root_.scala.Seq.empty)
      def addKeys(__vs: _root_.scala.Predef.String *): BoolMapWithDefault = addAllKeys(__vs)
      def addAllKeys(__vs: Iterable[_root_.scala.Predef.String]): BoolMapWithDefault = copy(keys = keys ++ __vs)
      def withKeys(__v: _root_.scala.Seq[_root_.scala.Predef.String]): BoolMapWithDefault = copy(keys = __v)
      def clearValues = copy(values = _root_.scala.Seq.empty)
      def addValues(__vs: _root_.scala.Boolean *): BoolMapWithDefault = addAllValues(__vs)
      def addAllValues(__vs: Iterable[_root_.scala.Boolean]): BoolMapWithDefault = copy(values = values ++ __vs)
      def withValues(__v: _root_.scala.Seq[_root_.scala.Boolean]): BoolMapWithDefault = copy(values = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => defaultBool.orNull
          case 2 => keys
          case 3 => values
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => defaultBool.map(_root_.scalapb.descriptors.PBoolean(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 2 => _root_.scalapb.descriptors.PRepeated(keys.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PRepeated(values.iterator.map(_root_.scalapb.descriptors.PBoolean(_)).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault])
  }
  
  object BoolMapWithDefault extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault = {
      var __defaultBool: _root_.scala.Option[_root_.scala.Boolean] = _root_.scala.None
      val __keys: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __values: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Boolean] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Boolean]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __defaultBool = _root_.scala.Option(_input__.readBool())
          case 18 =>
            __keys += _input__.readStringRequireUtf8()
          case 24 =>
            __values += _input__.readBool()
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __values += _input__.readBool()
            }
            _input__.popLimit(oldLimit)
          }
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault(
          defaultBool = __defaultBool,
          keys = __keys.result(),
          values = __values.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault(
          defaultBool = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Boolean]]),
          keys = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          values = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scala.Boolean]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(5)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(5)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault(
      defaultBool = _root_.scala.None,
      keys = _root_.scala.Seq.empty,
      values = _root_.scala.Seq.empty
    )
    implicit class BoolMapWithDefaultLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault](_l) {
      def defaultBool: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.getDefaultBool)((c_, f_) => c_.copy(defaultBool = _root_.scala.Option(f_)))
      def optionalDefaultBool: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Boolean]] = field(_.defaultBool)((c_, f_) => c_.copy(defaultBool = f_))
      def keys: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.keys)((c_, f_) => c_.copy(keys = f_))
      def values: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Boolean]] = field(_.values)((c_, f_) => c_.copy(values = f_))
    }
    final val DEFAULT_BOOL_FIELD_NUMBER = 1
    final val KEYS_FIELD_NUMBER = 2
    final val VALUES_FIELD_NUMBER = 3
    def of(
      defaultBool: _root_.scala.Option[_root_.scala.Boolean],
      keys: _root_.scala.Seq[_root_.scala.Predef.String],
      values: _root_.scala.Seq[_root_.scala.Boolean]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BoolMapWithDefault(
      defaultBool,
      keys,
      values
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BoolMapWithDefault])
  }
  
  @SerialVersionUID(0L)
  final case class AxisDescriptor(
      id: _root_.scala.Predef.String = "",
      formatType: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.CATEGORY,
      `type`: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.X,
      position: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.TOP,
      log: _root_.scala.Boolean = false,
      label: _root_.scala.Predef.String = "",
      labelFont: _root_.scala.Predef.String = "",
      ticksFont: _root_.scala.Predef.String = "",
      formatPattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
      color: _root_.scala.Predef.String = "",
      minRange: _root_.scala.Double = 0.0,
      maxRange: _root_.scala.Double = 0.0,
      minorTicksVisible: _root_.scala.Boolean = false,
      majorTicksVisible: _root_.scala.Boolean = false,
      minorTickCount: _root_.scala.Int = 0,
      gapBetweenMajorTicks: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None,
      majorTickLocations: _root_.scala.Seq[_root_.scala.Double] = _root_.scala.Seq.empty,
      tickLabelAngle: _root_.scala.Double = 0.0,
      invert: _root_.scala.Boolean = false,
      isTimeAxis: _root_.scala.Boolean = false,
      businessCalendarDescriptor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[AxisDescriptor] {
      private[this] def majorTickLocationsSerializedSize = {
        8 * majorTickLocations.size
      }
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = id
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = formatType.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
          }
        };
        
        {
          val __value = `type`.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(3, __value)
          }
        };
        
        {
          val __value = position.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(4, __value)
          }
        };
        
        {
          val __value = log
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
          }
        };
        
        {
          val __value = label
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
          }
        };
        
        {
          val __value = labelFont
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
          }
        };
        
        {
          val __value = ticksFont
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(8, __value)
          }
        };
        if (formatPattern.isDefined) {
          val __value = formatPattern.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(9, __value)
        };
        
        {
          val __value = color
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(10, __value)
          }
        };
        
        {
          val __value = minRange
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(11, __value)
          }
        };
        
        {
          val __value = maxRange
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(12, __value)
          }
        };
        
        {
          val __value = minorTicksVisible
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(13, __value)
          }
        };
        
        {
          val __value = majorTicksVisible
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(14, __value)
          }
        };
        
        {
          val __value = minorTickCount
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(15, __value)
          }
        };
        if (gapBetweenMajorTicks.isDefined) {
          val __value = gapBetweenMajorTicks.get
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(16, __value)
        };
        if (majorTickLocations.nonEmpty) {
          val __localsize = majorTickLocationsSerializedSize
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        
        {
          val __value = tickLabelAngle
          if (__value != 0.0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(18, __value)
          }
        };
        
        {
          val __value = invert
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(19, __value)
          }
        };
        
        {
          val __value = isTimeAxis
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(20, __value)
          }
        };
        if (businessCalendarDescriptor.isDefined) {
          val __value = businessCalendarDescriptor.get
          __size += 2 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = id
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = formatType.value
          if (__v != 0) {
            _output__.writeEnum(2, __v)
          }
        };
        {
          val __v = `type`.value
          if (__v != 0) {
            _output__.writeEnum(3, __v)
          }
        };
        {
          val __v = position.value
          if (__v != 0) {
            _output__.writeEnum(4, __v)
          }
        };
        {
          val __v = log
          if (__v != false) {
            _output__.writeBool(5, __v)
          }
        };
        {
          val __v = label
          if (!__v.isEmpty) {
            _output__.writeString(6, __v)
          }
        };
        {
          val __v = labelFont
          if (!__v.isEmpty) {
            _output__.writeString(7, __v)
          }
        };
        {
          val __v = ticksFont
          if (!__v.isEmpty) {
            _output__.writeString(8, __v)
          }
        };
        formatPattern.foreach { __v =>
          val __m = __v
          _output__.writeString(9, __m)
        };
        {
          val __v = color
          if (!__v.isEmpty) {
            _output__.writeString(10, __v)
          }
        };
        {
          val __v = minRange
          if (__v != 0.0) {
            _output__.writeDouble(11, __v)
          }
        };
        {
          val __v = maxRange
          if (__v != 0.0) {
            _output__.writeDouble(12, __v)
          }
        };
        {
          val __v = minorTicksVisible
          if (__v != false) {
            _output__.writeBool(13, __v)
          }
        };
        {
          val __v = majorTicksVisible
          if (__v != false) {
            _output__.writeBool(14, __v)
          }
        };
        {
          val __v = minorTickCount
          if (__v != 0) {
            _output__.writeInt32(15, __v)
          }
        };
        gapBetweenMajorTicks.foreach { __v =>
          val __m = __v
          _output__.writeDouble(16, __m)
        };
        if (majorTickLocations.nonEmpty) {
          _output__.writeTag(17, 2)
          _output__.writeUInt32NoTag(majorTickLocationsSerializedSize)
          majorTickLocations.foreach(_output__.writeDoubleNoTag)
        };
        {
          val __v = tickLabelAngle
          if (__v != 0.0) {
            _output__.writeDouble(18, __v)
          }
        };
        {
          val __v = invert
          if (__v != false) {
            _output__.writeBool(19, __v)
          }
        };
        {
          val __v = isTimeAxis
          if (__v != false) {
            _output__.writeBool(20, __v)
          }
        };
        businessCalendarDescriptor.foreach { __v =>
          val __m = __v
          _output__.writeTag(21, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withId(__v: _root_.scala.Predef.String): AxisDescriptor = copy(id = __v)
      def withFormatType(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType): AxisDescriptor = copy(formatType = __v)
      def withType(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType): AxisDescriptor = copy(`type` = __v)
      def withPosition(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition): AxisDescriptor = copy(position = __v)
      def withLog(__v: _root_.scala.Boolean): AxisDescriptor = copy(log = __v)
      def withLabel(__v: _root_.scala.Predef.String): AxisDescriptor = copy(label = __v)
      def withLabelFont(__v: _root_.scala.Predef.String): AxisDescriptor = copy(labelFont = __v)
      def withTicksFont(__v: _root_.scala.Predef.String): AxisDescriptor = copy(ticksFont = __v)
      def getFormatPattern: _root_.scala.Predef.String = formatPattern.getOrElse("")
      def clearFormatPattern: AxisDescriptor = copy(formatPattern = _root_.scala.None)
      def withFormatPattern(__v: _root_.scala.Predef.String): AxisDescriptor = copy(formatPattern = Option(__v))
      def withColor(__v: _root_.scala.Predef.String): AxisDescriptor = copy(color = __v)
      def withMinRange(__v: _root_.scala.Double): AxisDescriptor = copy(minRange = __v)
      def withMaxRange(__v: _root_.scala.Double): AxisDescriptor = copy(maxRange = __v)
      def withMinorTicksVisible(__v: _root_.scala.Boolean): AxisDescriptor = copy(minorTicksVisible = __v)
      def withMajorTicksVisible(__v: _root_.scala.Boolean): AxisDescriptor = copy(majorTicksVisible = __v)
      def withMinorTickCount(__v: _root_.scala.Int): AxisDescriptor = copy(minorTickCount = __v)
      def getGapBetweenMajorTicks: _root_.scala.Double = gapBetweenMajorTicks.getOrElse(0.0)
      def clearGapBetweenMajorTicks: AxisDescriptor = copy(gapBetweenMajorTicks = _root_.scala.None)
      def withGapBetweenMajorTicks(__v: _root_.scala.Double): AxisDescriptor = copy(gapBetweenMajorTicks = Option(__v))
      def clearMajorTickLocations = copy(majorTickLocations = _root_.scala.Seq.empty)
      def addMajorTickLocations(__vs: _root_.scala.Double *): AxisDescriptor = addAllMajorTickLocations(__vs)
      def addAllMajorTickLocations(__vs: Iterable[_root_.scala.Double]): AxisDescriptor = copy(majorTickLocations = majorTickLocations ++ __vs)
      def withMajorTickLocations(__v: _root_.scala.Seq[_root_.scala.Double]): AxisDescriptor = copy(majorTickLocations = __v)
      def withTickLabelAngle(__v: _root_.scala.Double): AxisDescriptor = copy(tickLabelAngle = __v)
      def withInvert(__v: _root_.scala.Boolean): AxisDescriptor = copy(invert = __v)
      def withIsTimeAxis(__v: _root_.scala.Boolean): AxisDescriptor = copy(isTimeAxis = __v)
      def getBusinessCalendarDescriptor: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor = businessCalendarDescriptor.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.defaultInstance)
      def clearBusinessCalendarDescriptor: AxisDescriptor = copy(businessCalendarDescriptor = _root_.scala.None)
      def withBusinessCalendarDescriptor(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor): AxisDescriptor = copy(businessCalendarDescriptor = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = id
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = formatType.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 3 => {
            val __t = `type`.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 4 => {
            val __t = position.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 5 => {
            val __t = log
            if (__t != false) __t else null
          }
          case 6 => {
            val __t = label
            if (__t != "") __t else null
          }
          case 7 => {
            val __t = labelFont
            if (__t != "") __t else null
          }
          case 8 => {
            val __t = ticksFont
            if (__t != "") __t else null
          }
          case 9 => formatPattern.orNull
          case 10 => {
            val __t = color
            if (__t != "") __t else null
          }
          case 11 => {
            val __t = minRange
            if (__t != 0.0) __t else null
          }
          case 12 => {
            val __t = maxRange
            if (__t != 0.0) __t else null
          }
          case 13 => {
            val __t = minorTicksVisible
            if (__t != false) __t else null
          }
          case 14 => {
            val __t = majorTicksVisible
            if (__t != false) __t else null
          }
          case 15 => {
            val __t = minorTickCount
            if (__t != 0) __t else null
          }
          case 16 => gapBetweenMajorTicks.orNull
          case 17 => majorTickLocations
          case 18 => {
            val __t = tickLabelAngle
            if (__t != 0.0) __t else null
          }
          case 19 => {
            val __t = invert
            if (__t != false) __t else null
          }
          case 20 => {
            val __t = isTimeAxis
            if (__t != false) __t else null
          }
          case 21 => businessCalendarDescriptor.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(id)
          case 2 => _root_.scalapb.descriptors.PEnum(formatType.scalaValueDescriptor)
          case 3 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
          case 4 => _root_.scalapb.descriptors.PEnum(position.scalaValueDescriptor)
          case 5 => _root_.scalapb.descriptors.PBoolean(log)
          case 6 => _root_.scalapb.descriptors.PString(label)
          case 7 => _root_.scalapb.descriptors.PString(labelFont)
          case 8 => _root_.scalapb.descriptors.PString(ticksFont)
          case 9 => formatPattern.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 10 => _root_.scalapb.descriptors.PString(color)
          case 11 => _root_.scalapb.descriptors.PDouble(minRange)
          case 12 => _root_.scalapb.descriptors.PDouble(maxRange)
          case 13 => _root_.scalapb.descriptors.PBoolean(minorTicksVisible)
          case 14 => _root_.scalapb.descriptors.PBoolean(majorTicksVisible)
          case 15 => _root_.scalapb.descriptors.PInt(minorTickCount)
          case 16 => gapBetweenMajorTicks.map(_root_.scalapb.descriptors.PDouble(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
          case 17 => _root_.scalapb.descriptors.PRepeated(majorTickLocations.iterator.map(_root_.scalapb.descriptors.PDouble(_)).toVector)
          case 18 => _root_.scalapb.descriptors.PDouble(tickLabelAngle)
          case 19 => _root_.scalapb.descriptors.PBoolean(invert)
          case 20 => _root_.scalapb.descriptors.PBoolean(isTimeAxis)
          case 21 => businessCalendarDescriptor.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor])
  }
  
  object AxisDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor = {
      var __id: _root_.scala.Predef.String = ""
      var __formatType: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.CATEGORY
      var __type: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.X
      var __position: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.TOP
      var __log: _root_.scala.Boolean = false
      var __label: _root_.scala.Predef.String = ""
      var __labelFont: _root_.scala.Predef.String = ""
      var __ticksFont: _root_.scala.Predef.String = ""
      var __formatPattern: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
      var __color: _root_.scala.Predef.String = ""
      var __minRange: _root_.scala.Double = 0.0
      var __maxRange: _root_.scala.Double = 0.0
      var __minorTicksVisible: _root_.scala.Boolean = false
      var __majorTicksVisible: _root_.scala.Boolean = false
      var __minorTickCount: _root_.scala.Int = 0
      var __gapBetweenMajorTicks: _root_.scala.Option[_root_.scala.Double] = _root_.scala.None
      val __majorTickLocations: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Double]
      var __tickLabelAngle: _root_.scala.Double = 0.0
      var __invert: _root_.scala.Boolean = false
      var __isTimeAxis: _root_.scala.Boolean = false
      var __businessCalendarDescriptor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readStringRequireUtf8()
          case 16 =>
            __formatType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.fromValue(_input__.readEnum())
          case 24 =>
            __type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.fromValue(_input__.readEnum())
          case 32 =>
            __position = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.fromValue(_input__.readEnum())
          case 40 =>
            __log = _input__.readBool()
          case 50 =>
            __label = _input__.readStringRequireUtf8()
          case 58 =>
            __labelFont = _input__.readStringRequireUtf8()
          case 66 =>
            __ticksFont = _input__.readStringRequireUtf8()
          case 74 =>
            __formatPattern = _root_.scala.Option(_input__.readStringRequireUtf8())
          case 82 =>
            __color = _input__.readStringRequireUtf8()
          case 89 =>
            __minRange = _input__.readDouble()
          case 97 =>
            __maxRange = _input__.readDouble()
          case 104 =>
            __minorTicksVisible = _input__.readBool()
          case 112 =>
            __majorTicksVisible = _input__.readBool()
          case 120 =>
            __minorTickCount = _input__.readInt32()
          case 129 =>
            __gapBetweenMajorTicks = _root_.scala.Option(_input__.readDouble())
          case 137 =>
            __majorTickLocations += _input__.readDouble()
          case 138 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __majorTickLocations += _input__.readDouble()
            }
            _input__.popLimit(oldLimit)
          }
          case 145 =>
            __tickLabelAngle = _input__.readDouble()
          case 152 =>
            __invert = _input__.readBool()
          case 160 =>
            __isTimeAxis = _input__.readBool()
          case 170 =>
            __businessCalendarDescriptor = _root_.scala.Option(__businessCalendarDescriptor.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor(
          id = __id,
          formatType = __formatType,
          `type` = __type,
          position = __position,
          log = __log,
          label = __label,
          labelFont = __labelFont,
          ticksFont = __ticksFont,
          formatPattern = __formatPattern,
          color = __color,
          minRange = __minRange,
          maxRange = __maxRange,
          minorTicksVisible = __minorTicksVisible,
          majorTicksVisible = __majorTicksVisible,
          minorTickCount = __minorTickCount,
          gapBetweenMajorTicks = __gapBetweenMajorTicks,
          majorTickLocations = __majorTickLocations.result(),
          tickLabelAngle = __tickLabelAngle,
          invert = __invert,
          isTimeAxis = __isTimeAxis,
          businessCalendarDescriptor = __businessCalendarDescriptor,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor(
          id = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          formatType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.CATEGORY.scalaValueDescriptor).number),
          `type` = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.X.scalaValueDescriptor).number),
          position = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.TOP.scalaValueDescriptor).number),
          log = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          label = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          labelFont = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          ticksFont = __fieldsMap.get(scalaDescriptor.findFieldByNumber(8).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          formatPattern = __fieldsMap.get(scalaDescriptor.findFieldByNumber(9).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
          color = __fieldsMap.get(scalaDescriptor.findFieldByNumber(10).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          minRange = __fieldsMap.get(scalaDescriptor.findFieldByNumber(11).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          maxRange = __fieldsMap.get(scalaDescriptor.findFieldByNumber(12).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          minorTicksVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(13).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          majorTicksVisible = __fieldsMap.get(scalaDescriptor.findFieldByNumber(14).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          minorTickCount = __fieldsMap.get(scalaDescriptor.findFieldByNumber(15).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          gapBetweenMajorTicks = __fieldsMap.get(scalaDescriptor.findFieldByNumber(16).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Double]]),
          majorTickLocations = __fieldsMap.get(scalaDescriptor.findFieldByNumber(17).get).map(_.as[_root_.scala.Seq[_root_.scala.Double]]).getOrElse(_root_.scala.Seq.empty),
          tickLabelAngle = __fieldsMap.get(scalaDescriptor.findFieldByNumber(18).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
          invert = __fieldsMap.get(scalaDescriptor.findFieldByNumber(19).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          isTimeAxis = __fieldsMap.get(scalaDescriptor.findFieldByNumber(20).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
          businessCalendarDescriptor = __fieldsMap.get(scalaDescriptor.findFieldByNumber(21).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(6)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(6)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 21 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType
        case 3 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType
        case 4 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor(
      id = "",
      formatType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.CATEGORY,
      `type` = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.X,
      position = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.TOP,
      log = false,
      label = "",
      labelFont = "",
      ticksFont = "",
      formatPattern = _root_.scala.None,
      color = "",
      minRange = 0.0,
      maxRange = 0.0,
      minorTicksVisible = false,
      majorTicksVisible = false,
      minorTickCount = 0,
      gapBetweenMajorTicks = _root_.scala.None,
      majorTickLocations = _root_.scala.Seq.empty,
      tickLabelAngle = 0.0,
      invert = false,
      isTimeAxis = false,
      businessCalendarDescriptor = _root_.scala.None
    )
    sealed abstract class AxisFormatType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType
      type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.Recognized
      def isCategory: _root_.scala.Boolean = false
      def isNumber: _root_.scala.Boolean = false
      def companion: _root_.scalapb.GeneratedEnumCompanion[AxisFormatType] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType
      final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType.Recognized])
    }
    
    object AxisFormatType extends _root_.scalapb.GeneratedEnumCompanion[AxisFormatType] {
      sealed trait Recognized extends AxisFormatType
      implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AxisFormatType] = this
      
      @SerialVersionUID(0L)
      case object CATEGORY extends AxisFormatType(0) with AxisFormatType.Recognized {
        val index = 0
        val name = "CATEGORY"
        override def isCategory: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object NUMBER extends AxisFormatType(1) with AxisFormatType.Recognized {
        val index = 1
        val name = "NUMBER"
        override def isNumber: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends AxisFormatType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(CATEGORY, NUMBER)
      def fromValue(__value: _root_.scala.Int): AxisFormatType = __value match {
        case 0 => CATEGORY
        case 1 => NUMBER
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.javaDescriptor.getEnumTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.scalaDescriptor.enums(0)
    }
    sealed abstract class AxisType(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType
      type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.Recognized
      def isX: _root_.scala.Boolean = false
      def isY: _root_.scala.Boolean = false
      def isShape: _root_.scala.Boolean = false
      def isSize: _root_.scala.Boolean = false
      def isLabel: _root_.scala.Boolean = false
      def isColor: _root_.scala.Boolean = false
      def companion: _root_.scalapb.GeneratedEnumCompanion[AxisType] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType
      final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType.Recognized])
    }
    
    object AxisType extends _root_.scalapb.GeneratedEnumCompanion[AxisType] {
      sealed trait Recognized extends AxisType
      implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AxisType] = this
      
      @SerialVersionUID(0L)
      case object X extends AxisType(0) with AxisType.Recognized {
        val index = 0
        val name = "X"
        override def isX: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object Y extends AxisType(1) with AxisType.Recognized {
        val index = 1
        val name = "Y"
        override def isY: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SHAPE extends AxisType(2) with AxisType.Recognized {
        val index = 2
        val name = "SHAPE"
        override def isShape: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SIZE extends AxisType(3) with AxisType.Recognized {
        val index = 3
        val name = "SIZE"
        override def isSize: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object LABEL extends AxisType(4) with AxisType.Recognized {
        val index = 4
        val name = "LABEL"
        override def isLabel: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object COLOR extends AxisType(5) with AxisType.Recognized {
        val index = 5
        val name = "COLOR"
        override def isColor: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends AxisType(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(X, Y, SHAPE, SIZE, LABEL, COLOR)
      def fromValue(__value: _root_.scala.Int): AxisType = __value match {
        case 0 => X
        case 1 => Y
        case 2 => SHAPE
        case 3 => SIZE
        case 4 => LABEL
        case 5 => COLOR
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.javaDescriptor.getEnumTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.scalaDescriptor.enums(1)
    }
    sealed abstract class AxisPosition(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition
      type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.Recognized
      def isTop: _root_.scala.Boolean = false
      def isBottom: _root_.scala.Boolean = false
      def isLeft: _root_.scala.Boolean = false
      def isRight: _root_.scala.Boolean = false
      def isNone: _root_.scala.Boolean = false
      def companion: _root_.scalapb.GeneratedEnumCompanion[AxisPosition] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition
      final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition.Recognized])
    }
    
    object AxisPosition extends _root_.scalapb.GeneratedEnumCompanion[AxisPosition] {
      sealed trait Recognized extends AxisPosition
      implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[AxisPosition] = this
      
      @SerialVersionUID(0L)
      case object TOP extends AxisPosition(0) with AxisPosition.Recognized {
        val index = 0
        val name = "TOP"
        override def isTop: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object BOTTOM extends AxisPosition(1) with AxisPosition.Recognized {
        val index = 1
        val name = "BOTTOM"
        override def isBottom: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object LEFT extends AxisPosition(2) with AxisPosition.Recognized {
        val index = 2
        val name = "LEFT"
        override def isLeft: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object RIGHT extends AxisPosition(3) with AxisPosition.Recognized {
        val index = 3
        val name = "RIGHT"
        override def isRight: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object NONE extends AxisPosition(4) with AxisPosition.Recognized {
        val index = 4
        val name = "NONE"
        override def isNone: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends AxisPosition(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(TOP, BOTTOM, LEFT, RIGHT, NONE)
      def fromValue(__value: _root_.scala.Int): AxisPosition = __value match {
        case 0 => TOP
        case 1 => BOTTOM
        case 2 => LEFT
        case 3 => RIGHT
        case 4 => NONE
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.javaDescriptor.getEnumTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.scalaDescriptor.enums(2)
    }
    implicit class AxisDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor](_l) {
      def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
      def formatType: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType] = field(_.formatType)((c_, f_) => c_.copy(formatType = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def position: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition] = field(_.position)((c_, f_) => c_.copy(position = f_))
      def log: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.log)((c_, f_) => c_.copy(log = f_))
      def label: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.label)((c_, f_) => c_.copy(label = f_))
      def labelFont: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.labelFont)((c_, f_) => c_.copy(labelFont = f_))
      def ticksFont: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.ticksFont)((c_, f_) => c_.copy(ticksFont = f_))
      def formatPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFormatPattern)((c_, f_) => c_.copy(formatPattern = _root_.scala.Option(f_)))
      def optionalFormatPattern: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.formatPattern)((c_, f_) => c_.copy(formatPattern = f_))
      def color: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.color)((c_, f_) => c_.copy(color = f_))
      def minRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.minRange)((c_, f_) => c_.copy(minRange = f_))
      def maxRange: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.maxRange)((c_, f_) => c_.copy(maxRange = f_))
      def minorTicksVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.minorTicksVisible)((c_, f_) => c_.copy(minorTicksVisible = f_))
      def majorTicksVisible: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.majorTicksVisible)((c_, f_) => c_.copy(majorTicksVisible = f_))
      def minorTickCount: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.minorTickCount)((c_, f_) => c_.copy(minorTickCount = f_))
      def gapBetweenMajorTicks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.getGapBetweenMajorTicks)((c_, f_) => c_.copy(gapBetweenMajorTicks = _root_.scala.Option(f_)))
      def optionalGapBetweenMajorTicks: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Double]] = field(_.gapBetweenMajorTicks)((c_, f_) => c_.copy(gapBetweenMajorTicks = f_))
      def majorTickLocations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Double]] = field(_.majorTickLocations)((c_, f_) => c_.copy(majorTickLocations = f_))
      def tickLabelAngle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.tickLabelAngle)((c_, f_) => c_.copy(tickLabelAngle = f_))
      def invert: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.invert)((c_, f_) => c_.copy(invert = f_))
      def isTimeAxis: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.isTimeAxis)((c_, f_) => c_.copy(isTimeAxis = f_))
      def businessCalendarDescriptor: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor] = field(_.getBusinessCalendarDescriptor)((c_, f_) => c_.copy(businessCalendarDescriptor = _root_.scala.Option(f_)))
      def optionalBusinessCalendarDescriptor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor]] = field(_.businessCalendarDescriptor)((c_, f_) => c_.copy(businessCalendarDescriptor = f_))
    }
    final val ID_FIELD_NUMBER = 1
    final val FORMAT_TYPE_FIELD_NUMBER = 2
    final val TYPE_FIELD_NUMBER = 3
    final val POSITION_FIELD_NUMBER = 4
    final val LOG_FIELD_NUMBER = 5
    final val LABEL_FIELD_NUMBER = 6
    final val LABEL_FONT_FIELD_NUMBER = 7
    final val TICKS_FONT_FIELD_NUMBER = 8
    final val FORMAT_PATTERN_FIELD_NUMBER = 9
    final val COLOR_FIELD_NUMBER = 10
    final val MIN_RANGE_FIELD_NUMBER = 11
    final val MAX_RANGE_FIELD_NUMBER = 12
    final val MINOR_TICKS_VISIBLE_FIELD_NUMBER = 13
    final val MAJOR_TICKS_VISIBLE_FIELD_NUMBER = 14
    final val MINOR_TICK_COUNT_FIELD_NUMBER = 15
    final val GAP_BETWEEN_MAJOR_TICKS_FIELD_NUMBER = 16
    final val MAJOR_TICK_LOCATIONS_FIELD_NUMBER = 17
    final val TICK_LABEL_ANGLE_FIELD_NUMBER = 18
    final val INVERT_FIELD_NUMBER = 19
    final val IS_TIME_AXIS_FIELD_NUMBER = 20
    final val BUSINESS_CALENDAR_DESCRIPTOR_FIELD_NUMBER = 21
    def of(
      id: _root_.scala.Predef.String,
      formatType: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisFormatType,
      `type`: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisType,
      position: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor.AxisPosition,
      log: _root_.scala.Boolean,
      label: _root_.scala.Predef.String,
      labelFont: _root_.scala.Predef.String,
      ticksFont: _root_.scala.Predef.String,
      formatPattern: _root_.scala.Option[_root_.scala.Predef.String],
      color: _root_.scala.Predef.String,
      minRange: _root_.scala.Double,
      maxRange: _root_.scala.Double,
      minorTicksVisible: _root_.scala.Boolean,
      majorTicksVisible: _root_.scala.Boolean,
      minorTickCount: _root_.scala.Int,
      gapBetweenMajorTicks: _root_.scala.Option[_root_.scala.Double],
      majorTickLocations: _root_.scala.Seq[_root_.scala.Double],
      tickLabelAngle: _root_.scala.Double,
      invert: _root_.scala.Boolean,
      isTimeAxis: _root_.scala.Boolean,
      businessCalendarDescriptor: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.AxisDescriptor(
      id,
      formatType,
      `type`,
      position,
      log,
      label,
      labelFont,
      ticksFont,
      formatPattern,
      color,
      minRange,
      maxRange,
      minorTicksVisible,
      majorTicksVisible,
      minorTickCount,
      gapBetweenMajorTicks,
      majorTickLocations,
      tickLabelAngle,
      invert,
      isTimeAxis,
      businessCalendarDescriptor
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.AxisDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class BusinessCalendarDescriptor(
      name: _root_.scala.Predef.String = "",
      timeZone: _root_.scala.Predef.String = "",
      businessDays: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek] = _root_.scala.Seq.empty,
      businessPeriods: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] = _root_.scala.Seq.empty,
      holidays: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday] = _root_.scala.Seq.empty,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BusinessCalendarDescriptor] {
      private[this] def businessDaysSerializedSize = {
        if (__businessDaysSerializedSizeField == 0) __businessDaysSerializedSizeField = {
          var __s: _root_.scala.Int = 0
          businessDays.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeEnumSizeNoTag(__i.value))
          __s
        }
        __businessDaysSerializedSizeField
      }
      @transient private[this] var __businessDaysSerializedSizeField: _root_.scala.Int = 0
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = name
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = timeZone
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        if (businessDays.nonEmpty) {
          val __localsize = businessDaysSerializedSize
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
        }
        businessPeriods.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        holidays.foreach { __item =>
          val __value = __item
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        }
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = name
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = timeZone
          if (!__v.isEmpty) {
            _output__.writeString(2, __v)
          }
        };
        if (businessDays.nonEmpty) {
          _output__.writeTag(3, 2)
          _output__.writeUInt32NoTag(businessDaysSerializedSize)
          businessDays.foreach((_output__.writeEnumNoTag _).compose((_: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek).value))
        };
        businessPeriods.foreach { __v =>
          val __m = __v
          _output__.writeTag(4, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        holidays.foreach { __v =>
          val __m = __v
          _output__.writeTag(5, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withName(__v: _root_.scala.Predef.String): BusinessCalendarDescriptor = copy(name = __v)
      def withTimeZone(__v: _root_.scala.Predef.String): BusinessCalendarDescriptor = copy(timeZone = __v)
      def clearBusinessDays = copy(businessDays = _root_.scala.Seq.empty)
      def addBusinessDays(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek *): BusinessCalendarDescriptor = addAllBusinessDays(__vs)
      def addAllBusinessDays(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek]): BusinessCalendarDescriptor = copy(businessDays = businessDays ++ __vs)
      def withBusinessDays(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek]): BusinessCalendarDescriptor = copy(businessDays = __v)
      def clearBusinessPeriods = copy(businessPeriods = _root_.scala.Seq.empty)
      def addBusinessPeriods(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod *): BusinessCalendarDescriptor = addAllBusinessPeriods(__vs)
      def addAllBusinessPeriods(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]): BusinessCalendarDescriptor = copy(businessPeriods = businessPeriods ++ __vs)
      def withBusinessPeriods(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]): BusinessCalendarDescriptor = copy(businessPeriods = __v)
      def clearHolidays = copy(holidays = _root_.scala.Seq.empty)
      def addHolidays(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday *): BusinessCalendarDescriptor = addAllHolidays(__vs)
      def addAllHolidays(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]): BusinessCalendarDescriptor = copy(holidays = holidays ++ __vs)
      def withHolidays(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]): BusinessCalendarDescriptor = copy(holidays = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = timeZone
            if (__t != "") __t else null
          }
          case 3 => businessDays.iterator.map(_.javaValueDescriptor).toSeq
          case 4 => businessPeriods
          case 5 => holidays
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 2 => _root_.scalapb.descriptors.PString(timeZone)
          case 3 => _root_.scalapb.descriptors.PRepeated(businessDays.iterator.map(__e => _root_.scalapb.descriptors.PEnum(__e.scalaValueDescriptor)).toVector)
          case 4 => _root_.scalapb.descriptors.PRepeated(businessPeriods.iterator.map(_.toPMessage).toVector)
          case 5 => _root_.scalapb.descriptors.PRepeated(holidays.iterator.map(_.toPMessage).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor])
  }
  
  object BusinessCalendarDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor = {
      var __name: _root_.scala.Predef.String = ""
      var __timeZone: _root_.scala.Predef.String = ""
      val __businessDays: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek]
      val __businessPeriods: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]
      val __holidays: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readStringRequireUtf8()
          case 18 =>
            __timeZone = _input__.readStringRequireUtf8()
          case 24 =>
            __businessDays += io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek.fromValue(_input__.readEnum())
          case 26 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __businessDays += io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek.fromValue(_input__.readEnum())
            }
            _input__.popLimit(oldLimit)
          }
          case 34 =>
            __businessPeriods += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod](_input__)
          case 42 =>
            __holidays += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday](_input__)
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor(
          name = __name,
          timeZone = __timeZone,
          businessDays = __businessDays.result(),
          businessPeriods = __businessPeriods.result(),
          holidays = __holidays.result(),
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor(
          name = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          timeZone = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          businessDays = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[_root_.scalapb.descriptors.EnumValueDescriptor]]).getOrElse(_root_.scala.Seq.empty).iterator.map(__e => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek.fromValue(__e.number)).toSeq,
          businessPeriods = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]]).getOrElse(_root_.scala.Seq.empty),
          holidays = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(7)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(7)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 4 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod
        case 5 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
      Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
        _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod,
        _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday,
        _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate
      )
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor(
      name = "",
      timeZone = "",
      businessDays = _root_.scala.Seq.empty,
      businessPeriods = _root_.scala.Seq.empty,
      holidays = _root_.scala.Seq.empty
    )
    sealed abstract class DayOfWeek(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
      type EnumType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek
      type RecognizedType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek.Recognized
      def isSunday: _root_.scala.Boolean = false
      def isMonday: _root_.scala.Boolean = false
      def isTuesday: _root_.scala.Boolean = false
      def isWednesday: _root_.scala.Boolean = false
      def isThursday: _root_.scala.Boolean = false
      def isFriday: _root_.scala.Boolean = false
      def isSaturday: _root_.scala.Boolean = false
      def companion: _root_.scalapb.GeneratedEnumCompanion[DayOfWeek] = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek
      final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek.Recognized])
    }
    
    object DayOfWeek extends _root_.scalapb.GeneratedEnumCompanion[DayOfWeek] {
      sealed trait Recognized extends DayOfWeek
      implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[DayOfWeek] = this
      
      @SerialVersionUID(0L)
      case object SUNDAY extends DayOfWeek(0) with DayOfWeek.Recognized {
        val index = 0
        val name = "SUNDAY"
        override def isSunday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object MONDAY extends DayOfWeek(1) with DayOfWeek.Recognized {
        val index = 1
        val name = "MONDAY"
        override def isMonday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object TUESDAY extends DayOfWeek(2) with DayOfWeek.Recognized {
        val index = 2
        val name = "TUESDAY"
        override def isTuesday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object WEDNESDAY extends DayOfWeek(3) with DayOfWeek.Recognized {
        val index = 3
        val name = "WEDNESDAY"
        override def isWednesday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object THURSDAY extends DayOfWeek(4) with DayOfWeek.Recognized {
        val index = 4
        val name = "THURSDAY"
        override def isThursday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object FRIDAY extends DayOfWeek(5) with DayOfWeek.Recognized {
        val index = 5
        val name = "FRIDAY"
        override def isFriday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      case object SATURDAY extends DayOfWeek(6) with DayOfWeek.Recognized {
        val index = 6
        val name = "SATURDAY"
        override def isSaturday: _root_.scala.Boolean = true
      }
      
      @SerialVersionUID(0L)
      final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends DayOfWeek(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
      lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY)
      def fromValue(__value: _root_.scala.Int): DayOfWeek = __value match {
        case 0 => SUNDAY
        case 1 => MONDAY
        case 2 => TUESDAY
        case 3 => WEDNESDAY
        case 4 => THURSDAY
        case 5 => FRIDAY
        case 6 => SATURDAY
        case __other => Unrecognized(__other)
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.javaDescriptor.getEnumTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.scalaDescriptor.enums(0)
    }
    @SerialVersionUID(0L)
    final case class BusinessPeriod(
        `open`: _root_.scala.Predef.String = "",
        close: _root_.scala.Predef.String = "",
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[BusinessPeriod] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = `open`
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
            }
          };
          
          {
            val __value = close
            if (!__value.isEmpty) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = `open`
            if (!__v.isEmpty) {
              _output__.writeString(1, __v)
            }
          };
          {
            val __v = close
            if (!__v.isEmpty) {
              _output__.writeString(2, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withOpen(__v: _root_.scala.Predef.String): BusinessPeriod = copy(`open` = __v)
        def withClose(__v: _root_.scala.Predef.String): BusinessPeriod = copy(close = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = `open`
              if (__t != "") __t else null
            }
            case 2 => {
              val __t = close
              if (__t != "") __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PString(`open`)
            case 2 => _root_.scalapb.descriptors.PString(close)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod])
    }
    
    object BusinessPeriod extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod = {
        var __open: _root_.scala.Predef.String = ""
        var __close: _root_.scala.Predef.String = ""
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __open = _input__.readStringRequireUtf8()
            case 18 =>
              __close = _input__.readStringRequireUtf8()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod(
            `open` = __open,
            close = __close,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod(
            `open` = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
            close = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.javaDescriptor.getNestedTypes().get(0)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.scalaDescriptor.nestedMessages(0)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod(
        `open` = "",
        close = ""
      )
      implicit class BusinessPeriodLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod](_l) {
        def `open`: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.`open`)((c_, f_) => c_.copy(`open` = f_))
        def close: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.close)((c_, f_) => c_.copy(close = f_))
      }
      final val OPEN_FIELD_NUMBER = 1
      final val CLOSE_FIELD_NUMBER = 2
      def of(
        `open`: _root_.scala.Predef.String,
        close: _root_.scala.Predef.String
      ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod(
        `open`,
        close
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod])
    }
    
    @SerialVersionUID(0L)
    final case class Holiday(
        date: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate] = _root_.scala.None,
        businessPeriods: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] = _root_.scala.Seq.empty,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[Holiday] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          if (date.isDefined) {
            val __value = date.get
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          };
          businessPeriods.foreach { __item =>
            val __value = __item
            __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
          }
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          date.foreach { __v =>
            val __m = __v
            _output__.writeTag(1, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          businessPeriods.foreach { __v =>
            val __m = __v
            _output__.writeTag(2, 2)
            _output__.writeUInt32NoTag(__m.serializedSize)
            __m.writeTo(_output__)
          };
          unknownFields.writeTo(_output__)
        }
        def getDate: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate = date.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate.defaultInstance)
        def clearDate: Holiday = copy(date = _root_.scala.None)
        def withDate(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate): Holiday = copy(date = Option(__v))
        def clearBusinessPeriods = copy(businessPeriods = _root_.scala.Seq.empty)
        def addBusinessPeriods(__vs: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod *): Holiday = addAllBusinessPeriods(__vs)
        def addAllBusinessPeriods(__vs: Iterable[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]): Holiday = copy(businessPeriods = businessPeriods ++ __vs)
        def withBusinessPeriods(__v: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]): Holiday = copy(businessPeriods = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => date.orNull
            case 2 => businessPeriods
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => date.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
            case 2 => _root_.scalapb.descriptors.PRepeated(businessPeriods.iterator.map(_.toPMessage).toVector)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday])
    }
    
    object Holiday extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday = {
        var __date: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate] = _root_.scala.None
        val __businessPeriods: _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod] = new _root_.scala.collection.immutable.VectorBuilder[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __date = _root_.scala.Option(__date.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
            case 18 =>
              __businessPeriods += _root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod](_input__)
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday(
            date = __date,
            businessPeriods = __businessPeriods.result(),
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday(
            date = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate]]),
            businessPeriods = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]]).getOrElse(_root_.scala.Seq.empty)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.javaDescriptor.getNestedTypes().get(1)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.scalaDescriptor.nestedMessages(1)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
        var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
        (__number: @_root_.scala.unchecked) match {
          case 1 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate
          case 2 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod
        }
        __out
      }
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday(
        date = _root_.scala.None,
        businessPeriods = _root_.scala.Seq.empty
      )
      implicit class HolidayLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday](_l) {
        def date: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate] = field(_.getDate)((c_, f_) => c_.copy(date = _root_.scala.Option(f_)))
        def optionalDate: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate]] = field(_.date)((c_, f_) => c_.copy(date = f_))
        def businessPeriods: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]] = field(_.businessPeriods)((c_, f_) => c_.copy(businessPeriods = f_))
      }
      final val DATE_FIELD_NUMBER = 1
      final val BUSINESS_PERIODS_FIELD_NUMBER = 2
      def of(
        date: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate],
        businessPeriods: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]
      ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday(
        date,
        businessPeriods
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.Holiday])
    }
    
    @SerialVersionUID(0L)
    final case class LocalDate(
        year: _root_.scala.Int = 0,
        month: _root_.scala.Int = 0,
        day: _root_.scala.Int = 0,
        unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
        ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[LocalDate] {
        @transient
        private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
        private[this] def __computeSerializedSize(): _root_.scala.Int = {
          var __size = 0
          
          {
            val __value = year
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
            }
          };
          
          {
            val __value = month
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
            }
          };
          
          {
            val __value = day
            if (__value != 0) {
              __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
            }
          };
          __size += unknownFields.serializedSize
          __size
        }
        override def serializedSize: _root_.scala.Int = {
          var __size = __serializedSizeMemoized
          if (__size == 0) {
            __size = __computeSerializedSize() + 1
            __serializedSizeMemoized = __size
          }
          __size - 1
          
        }
        def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
          {
            val __v = year
            if (__v != 0) {
              _output__.writeInt32(1, __v)
            }
          };
          {
            val __v = month
            if (__v != 0) {
              _output__.writeInt32(2, __v)
            }
          };
          {
            val __v = day
            if (__v != 0) {
              _output__.writeInt32(3, __v)
            }
          };
          unknownFields.writeTo(_output__)
        }
        def withYear(__v: _root_.scala.Int): LocalDate = copy(year = __v)
        def withMonth(__v: _root_.scala.Int): LocalDate = copy(month = __v)
        def withDay(__v: _root_.scala.Int): LocalDate = copy(day = __v)
        def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
        def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
        def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
          (__fieldNumber: @_root_.scala.unchecked) match {
            case 1 => {
              val __t = year
              if (__t != 0) __t else null
            }
            case 2 => {
              val __t = month
              if (__t != 0) __t else null
            }
            case 3 => {
              val __t = day
              if (__t != 0) __t else null
            }
          }
        }
        def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
          _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
          (__field.number: @_root_.scala.unchecked) match {
            case 1 => _root_.scalapb.descriptors.PInt(year)
            case 2 => _root_.scalapb.descriptors.PInt(month)
            case 3 => _root_.scalapb.descriptors.PInt(day)
          }
        }
        def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
        def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate
        // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate])
    }
    
    object LocalDate extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate] {
      implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate] = this
      def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate = {
        var __year: _root_.scala.Int = 0
        var __month: _root_.scala.Int = 0
        var __day: _root_.scala.Int = 0
        var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 8 =>
              __year = _input__.readInt32()
            case 16 =>
              __month = _input__.readInt32()
            case 24 =>
              __day = _input__.readInt32()
            case tag =>
              if (_unknownFields__ == null) {
                _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
              }
              _unknownFields__.parseField(tag, _input__)
          }
        }
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate(
            year = __year,
            month = __month,
            day = __day,
            unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
        )
      }
      implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate] = _root_.scalapb.descriptors.Reads{
        case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
          _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
          io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate(
            year = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            month = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
            day = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
          )
        case _ => throw new RuntimeException("Expected PMessage")
      }
      def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.javaDescriptor.getNestedTypes().get(2)
      def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.scalaDescriptor.nestedMessages(2)
      def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
      lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
      def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
      lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate(
        year = 0,
        month = 0,
        day = 0
      )
      implicit class LocalDateLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate](_l) {
        def year: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.year)((c_, f_) => c_.copy(year = f_))
        def month: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.month)((c_, f_) => c_.copy(month = f_))
        def day: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.day)((c_, f_) => c_.copy(day = f_))
      }
      final val YEAR_FIELD_NUMBER = 1
      final val MONTH_FIELD_NUMBER = 2
      final val DAY_FIELD_NUMBER = 3
      def of(
        year: _root_.scala.Int,
        month: _root_.scala.Int,
        day: _root_.scala.Int
      ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.LocalDate(
        year,
        month,
        day
      )
      // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor.LocalDate])
    }
    
    implicit class BusinessCalendarDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor](_l) {
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def timeZone: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.timeZone)((c_, f_) => c_.copy(timeZone = f_))
      def businessDays: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek]] = field(_.businessDays)((c_, f_) => c_.copy(businessDays = f_))
      def businessPeriods: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod]] = field(_.businessPeriods)((c_, f_) => c_.copy(businessPeriods = f_))
      def holidays: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]] = field(_.holidays)((c_, f_) => c_.copy(holidays = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val TIME_ZONE_FIELD_NUMBER = 2
    final val BUSINESS_DAYS_FIELD_NUMBER = 3
    final val BUSINESS_PERIODS_FIELD_NUMBER = 4
    final val HOLIDAYS_FIELD_NUMBER = 5
    def of(
      name: _root_.scala.Predef.String,
      timeZone: _root_.scala.Predef.String,
      businessDays: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.DayOfWeek],
      businessPeriods: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.BusinessPeriod],
      holidays: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor.Holiday]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.BusinessCalendarDescriptor(
      name,
      timeZone,
      businessDays,
      businessPeriods,
      holidays
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.BusinessCalendarDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class MultiSeriesSourceDescriptor(
      axisId: _root_.scala.Predef.String = "",
      `type`: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X,
      partitionedTableId: _root_.scala.Int = 0,
      columnName: _root_.scala.Predef.String = "",
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[MultiSeriesSourceDescriptor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = axisId
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = `type`.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
          }
        };
        
        {
          val __value = partitionedTableId
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
          }
        };
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = axisId
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = `type`.value
          if (__v != 0) {
            _output__.writeEnum(2, __v)
          }
        };
        {
          val __v = partitionedTableId
          if (__v != 0) {
            _output__.writeInt32(3, __v)
          }
        };
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(4, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def withAxisId(__v: _root_.scala.Predef.String): MultiSeriesSourceDescriptor = copy(axisId = __v)
      def withType(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType): MultiSeriesSourceDescriptor = copy(`type` = __v)
      def withPartitionedTableId(__v: _root_.scala.Int): MultiSeriesSourceDescriptor = copy(partitionedTableId = __v)
      def withColumnName(__v: _root_.scala.Predef.String): MultiSeriesSourceDescriptor = copy(columnName = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = axisId
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = `type`.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 3 => {
            val __t = partitionedTableId
            if (__t != 0) __t else null
          }
          case 4 => {
            val __t = columnName
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(axisId)
          case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
          case 3 => _root_.scalapb.descriptors.PInt(partitionedTableId)
          case 4 => _root_.scalapb.descriptors.PString(columnName)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor])
  }
  
  object MultiSeriesSourceDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor = {
      var __axisId: _root_.scala.Predef.String = ""
      var __type: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X
      var __partitionedTableId: _root_.scala.Int = 0
      var __columnName: _root_.scala.Predef.String = ""
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __axisId = _input__.readStringRequireUtf8()
          case 16 =>
            __type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.fromValue(_input__.readEnum())
          case 24 =>
            __partitionedTableId = _input__.readInt32()
          case 34 =>
            __columnName = _input__.readStringRequireUtf8()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor(
          axisId = __axisId,
          `type` = __type,
          partitionedTableId = __partitionedTableId,
          columnName = __columnName,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor(
          axisId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          `type` = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X.scalaValueDescriptor).number),
          partitionedTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(8)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(8)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor(
      axisId = "",
      `type` = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X,
      partitionedTableId = 0,
      columnName = ""
    )
    implicit class MultiSeriesSourceDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor](_l) {
      def axisId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.axisId)((c_, f_) => c_.copy(axisId = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def partitionedTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.partitionedTableId)((c_, f_) => c_.copy(partitionedTableId = f_))
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
    }
    final val AXIS_ID_FIELD_NUMBER = 1
    final val TYPE_FIELD_NUMBER = 2
    final val PARTITIONED_TABLE_ID_FIELD_NUMBER = 3
    final val COLUMN_NAME_FIELD_NUMBER = 4
    def of(
      axisId: _root_.scala.Predef.String,
      `type`: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType,
      partitionedTableId: _root_.scala.Int,
      columnName: _root_.scala.Predef.String
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.MultiSeriesSourceDescriptor(
      axisId,
      `type`,
      partitionedTableId,
      columnName
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.MultiSeriesSourceDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class SourceDescriptor(
      axisId: _root_.scala.Predef.String = "",
      `type`: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X,
      tableId: _root_.scala.Int = 0,
      partitionedTableId: _root_.scala.Int = 0,
      columnName: _root_.scala.Predef.String = "",
      columnType: _root_.scala.Predef.String = "",
      oneClick: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor] = _root_.scala.None,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[SourceDescriptor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = axisId
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = `type`.value
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value)
          }
        };
        
        {
          val __value = tableId
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
          }
        };
        
        {
          val __value = partitionedTableId
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
          }
        };
        
        {
          val __value = columnName
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
          }
        };
        
        {
          val __value = columnType
          if (!__value.isEmpty) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
          }
        };
        if (oneClick.isDefined) {
          val __value = oneClick.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = axisId
          if (!__v.isEmpty) {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = `type`.value
          if (__v != 0) {
            _output__.writeEnum(2, __v)
          }
        };
        {
          val __v = tableId
          if (__v != 0) {
            _output__.writeInt32(3, __v)
          }
        };
        {
          val __v = partitionedTableId
          if (__v != 0) {
            _output__.writeInt32(4, __v)
          }
        };
        {
          val __v = columnName
          if (!__v.isEmpty) {
            _output__.writeString(5, __v)
          }
        };
        {
          val __v = columnType
          if (!__v.isEmpty) {
            _output__.writeString(6, __v)
          }
        };
        oneClick.foreach { __v =>
          val __m = __v
          _output__.writeTag(7, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
        unknownFields.writeTo(_output__)
      }
      def withAxisId(__v: _root_.scala.Predef.String): SourceDescriptor = copy(axisId = __v)
      def withType(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType): SourceDescriptor = copy(`type` = __v)
      def withTableId(__v: _root_.scala.Int): SourceDescriptor = copy(tableId = __v)
      def withPartitionedTableId(__v: _root_.scala.Int): SourceDescriptor = copy(partitionedTableId = __v)
      def withColumnName(__v: _root_.scala.Predef.String): SourceDescriptor = copy(columnName = __v)
      def withColumnType(__v: _root_.scala.Predef.String): SourceDescriptor = copy(columnType = __v)
      def getOneClick: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor = oneClick.getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor.defaultInstance)
      def clearOneClick: SourceDescriptor = copy(oneClick = _root_.scala.None)
      def withOneClick(__v: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor): SourceDescriptor = copy(oneClick = Option(__v))
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = axisId
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = `type`.javaValueDescriptor
            if (__t.getNumber() != 0) __t else null
          }
          case 3 => {
            val __t = tableId
            if (__t != 0) __t else null
          }
          case 4 => {
            val __t = partitionedTableId
            if (__t != 0) __t else null
          }
          case 5 => {
            val __t = columnName
            if (__t != "") __t else null
          }
          case 6 => {
            val __t = columnType
            if (__t != "") __t else null
          }
          case 7 => oneClick.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(axisId)
          case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
          case 3 => _root_.scalapb.descriptors.PInt(tableId)
          case 4 => _root_.scalapb.descriptors.PInt(partitionedTableId)
          case 5 => _root_.scalapb.descriptors.PString(columnName)
          case 6 => _root_.scalapb.descriptors.PString(columnType)
          case 7 => oneClick.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor])
  }
  
  object SourceDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor = {
      var __axisId: _root_.scala.Predef.String = ""
      var __type: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X
      var __tableId: _root_.scala.Int = 0
      var __partitionedTableId: _root_.scala.Int = 0
      var __columnName: _root_.scala.Predef.String = ""
      var __columnType: _root_.scala.Predef.String = ""
      var __oneClick: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor] = _root_.scala.None
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __axisId = _input__.readStringRequireUtf8()
          case 16 =>
            __type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.fromValue(_input__.readEnum())
          case 24 =>
            __tableId = _input__.readInt32()
          case 32 =>
            __partitionedTableId = _input__.readInt32()
          case 42 =>
            __columnName = _input__.readStringRequireUtf8()
          case 50 =>
            __columnType = _input__.readStringRequireUtf8()
          case 58 =>
            __oneClick = _root_.scala.Option(__oneClick.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor(
          axisId = __axisId,
          `type` = __type,
          tableId = __tableId,
          partitionedTableId = __partitionedTableId,
          columnName = __columnName,
          columnType = __columnType,
          oneClick = __oneClick,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor(
          axisId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          `type` = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X.scalaValueDescriptor).number),
          tableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          partitionedTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0),
          columnName = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          columnType = __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          oneClick = __fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(9)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(9)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 7 => __out = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 2 => io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType
      }
    }
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor(
      axisId = "",
      `type` = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType.X,
      tableId = 0,
      partitionedTableId = 0,
      columnName = "",
      columnType = "",
      oneClick = _root_.scala.None
    )
    implicit class SourceDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor](_l) {
      def axisId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.axisId)((c_, f_) => c_.copy(axisId = f_))
      def `type`: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
      def tableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.tableId)((c_, f_) => c_.copy(tableId = f_))
      def partitionedTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.partitionedTableId)((c_, f_) => c_.copy(partitionedTableId = f_))
      def columnName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnName)((c_, f_) => c_.copy(columnName = f_))
      def columnType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.columnType)((c_, f_) => c_.copy(columnType = f_))
      def oneClick: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor] = field(_.getOneClick)((c_, f_) => c_.copy(oneClick = _root_.scala.Option(f_)))
      def optionalOneClick: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor]] = field(_.oneClick)((c_, f_) => c_.copy(oneClick = f_))
    }
    final val AXIS_ID_FIELD_NUMBER = 1
    final val TYPE_FIELD_NUMBER = 2
    final val TABLE_ID_FIELD_NUMBER = 3
    final val PARTITIONED_TABLE_ID_FIELD_NUMBER = 4
    final val COLUMN_NAME_FIELD_NUMBER = 5
    final val COLUMN_TYPE_FIELD_NUMBER = 6
    final val ONE_CLICK_FIELD_NUMBER = 7
    def of(
      axisId: _root_.scala.Predef.String,
      `type`: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceType,
      tableId: _root_.scala.Int,
      partitionedTableId: _root_.scala.Int,
      columnName: _root_.scala.Predef.String,
      columnType: _root_.scala.Predef.String,
      oneClick: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor]
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.SourceDescriptor(
      axisId,
      `type`,
      tableId,
      partitionedTableId,
      columnName,
      columnType,
      oneClick
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.SourceDescriptor])
  }
  
  @SerialVersionUID(0L)
  final case class OneClickDescriptor(
      columns: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      columnTypes: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
      requireAllFiltersToDisplay: _root_.scala.Boolean = false,
      unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
      ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[OneClickDescriptor] {
      @transient
      private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
      private[this] def __computeSerializedSize(): _root_.scala.Int = {
        var __size = 0
        columns.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
        columnTypes.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
        
        {
          val __value = requireAllFiltersToDisplay
          if (__value != false) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
          }
        };
        __size += unknownFields.serializedSize
        __size
      }
      override def serializedSize: _root_.scala.Int = {
        var __size = __serializedSizeMemoized
        if (__size == 0) {
          __size = __computeSerializedSize() + 1
          __serializedSizeMemoized = __size
        }
        __size - 1
        
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        columns.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        columnTypes.foreach { __v =>
          val __m = __v
          _output__.writeString(2, __m)
        };
        {
          val __v = requireAllFiltersToDisplay
          if (__v != false) {
            _output__.writeBool(3, __v)
          }
        };
        unknownFields.writeTo(_output__)
      }
      def clearColumns = copy(columns = _root_.scala.Seq.empty)
      def addColumns(__vs: _root_.scala.Predef.String *): OneClickDescriptor = addAllColumns(__vs)
      def addAllColumns(__vs: Iterable[_root_.scala.Predef.String]): OneClickDescriptor = copy(columns = columns ++ __vs)
      def withColumns(__v: _root_.scala.Seq[_root_.scala.Predef.String]): OneClickDescriptor = copy(columns = __v)
      def clearColumnTypes = copy(columnTypes = _root_.scala.Seq.empty)
      def addColumnTypes(__vs: _root_.scala.Predef.String *): OneClickDescriptor = addAllColumnTypes(__vs)
      def addAllColumnTypes(__vs: Iterable[_root_.scala.Predef.String]): OneClickDescriptor = copy(columnTypes = columnTypes ++ __vs)
      def withColumnTypes(__v: _root_.scala.Seq[_root_.scala.Predef.String]): OneClickDescriptor = copy(columnTypes = __v)
      def withRequireAllFiltersToDisplay(__v: _root_.scala.Boolean): OneClickDescriptor = copy(requireAllFiltersToDisplay = __v)
      def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
      def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => columns
          case 2 => columnTypes
          case 3 => {
            val __t = requireAllFiltersToDisplay
            if (__t != false) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PRepeated(columns.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 2 => _root_.scalapb.descriptors.PRepeated(columnTypes.iterator.map(_root_.scalapb.descriptors.PString(_)).toVector)
          case 3 => _root_.scalapb.descriptors.PBoolean(requireAllFiltersToDisplay)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion: io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor.type = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor
      // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor])
  }
  
  object OneClickDescriptor extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor] = this
    def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor = {
      val __columns: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      val __columnTypes: _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String] = new _root_.scala.collection.immutable.VectorBuilder[_root_.scala.Predef.String]
      var __requireAllFiltersToDisplay: _root_.scala.Boolean = false
      var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __columns += _input__.readStringRequireUtf8()
          case 18 =>
            __columnTypes += _input__.readStringRequireUtf8()
          case 24 =>
            __requireAllFiltersToDisplay = _input__.readBool()
          case tag =>
            if (_unknownFields__ == null) {
              _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
            }
            _unknownFields__.parseField(tag, _input__)
        }
      }
      io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor(
          columns = __columns.result(),
          columnTypes = __columnTypes.result(),
          requireAllFiltersToDisplay = __requireAllFiltersToDisplay,
          unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
        io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor(
          columns = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          columnTypes = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
          requireAllFiltersToDisplay = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.javaDescriptor.getNestedTypes().get(10)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.scalaDescriptor.nestedMessages(10)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor(
      columns = _root_.scala.Seq.empty,
      columnTypes = _root_.scala.Seq.empty,
      requireAllFiltersToDisplay = false
    )
    implicit class OneClickDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor](_l) {
      def columns: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.columns)((c_, f_) => c_.copy(columns = f_))
      def columnTypes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.columnTypes)((c_, f_) => c_.copy(columnTypes = f_))
      def requireAllFiltersToDisplay: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.requireAllFiltersToDisplay)((c_, f_) => c_.copy(requireAllFiltersToDisplay = f_))
    }
    final val COLUMNS_FIELD_NUMBER = 1
    final val COLUMN_TYPES_FIELD_NUMBER = 2
    final val REQUIRE_ALL_FILTERS_TO_DISPLAY_FIELD_NUMBER = 3
    def of(
      columns: _root_.scala.Seq[_root_.scala.Predef.String],
      columnTypes: _root_.scala.Seq[_root_.scala.Predef.String],
      requireAllFiltersToDisplay: _root_.scala.Boolean
    ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.OneClickDescriptor(
      columns,
      columnTypes,
      requireAllFiltersToDisplay
    )
    // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor.OneClickDescriptor])
  }
  
  implicit class FigureDescriptorLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor](_l) {
    def title: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getTitle)((c_, f_) => c_.copy(title = _root_.scala.Option(f_)))
    def optionalTitle: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.title)((c_, f_) => c_.copy(title = f_))
    def titleFont: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.titleFont)((c_, f_) => c_.copy(titleFont = f_))
    def titleColor: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.titleColor)((c_, f_) => c_.copy(titleColor = f_))
    def updateInterval: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.updateInterval)((c_, f_) => c_.copy(updateInterval = f_))
    def cols: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.cols)((c_, f_) => c_.copy(cols = f_))
    def rows: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.rows)((c_, f_) => c_.copy(rows = f_))
    def charts: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor]] = field(_.charts)((c_, f_) => c_.copy(charts = f_))
    def errors: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.errors)((c_, f_) => c_.copy(errors = f_))
  }
  final val TITLE_FIELD_NUMBER = 1
  final val TITLE_FONT_FIELD_NUMBER = 2
  final val TITLE_COLOR_FIELD_NUMBER = 3
  final val UPDATE_INTERVAL_FIELD_NUMBER = 7
  final val COLS_FIELD_NUMBER = 8
  final val ROWS_FIELD_NUMBER = 9
  final val CHARTS_FIELD_NUMBER = 10
  final val ERRORS_FIELD_NUMBER = 13
  def of(
    title: _root_.scala.Option[_root_.scala.Predef.String],
    titleFont: _root_.scala.Predef.String,
    titleColor: _root_.scala.Predef.String,
    updateInterval: _root_.scala.Long,
    cols: _root_.scala.Int,
    rows: _root_.scala.Int,
    charts: _root_.scala.Seq[io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor.ChartDescriptor],
    errors: _root_.scala.Seq[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor = _root_.io.deephaven.proto.backplane.script.grpc.console.FigureDescriptor(
    title,
    titleFont,
    titleColor,
    updateInterval,
    cols,
    rows,
    charts,
    errors
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.FigureDescriptor])
}
