// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.inputtable


object InputTableServiceGrpc {
  val METHOD_ADD_TABLE_TO_INPUT_TABLE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest, io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.InputTableService", "AddTableToInputTable"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.inputtable.InputtableProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_DELETE_TABLE_FROM_INPUT_TABLE: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest, io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.InputTableService", "DeleteTableFromInputTable"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.inputtable.InputtableProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.InputTableService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.inputtable.InputtableProto.javaDescriptor))
      .addMethod(METHOD_ADD_TABLE_TO_INPUT_TABLE)
      .addMethod(METHOD_DELETE_TABLE_FROM_INPUT_TABLE)
      .build()
  
  /**
    * This service offers methods to manipulate the contents of input tables.
    */
  trait InputTableService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[InputTableService] = InputTableService
    /**
      * Adds the provided table to the specified input table. The new data to add must only have
      * columns (name, types, and order) which match the given input table's columns.
      */
    def addTableToInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse]
    /**
      * Removes the provided table from the specified input tables. The tables indicating which rows
      * to remove are expected to only have columns that match the key columns of the input table.
      */
    def deleteTableFromInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse]
  }
  
  object InputTableService extends _root_.scalapb.grpc.ServiceCompanion[InputTableService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[InputTableService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.inputtable.InputtableProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.inputtable.InputtableProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: InputTableService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_ADD_TABLE_TO_INPUT_TABLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse]) => {
          serviceImpl.addTableToInputTable(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_DELETE_TABLE_FROM_INPUT_TABLE,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse]) => {
          serviceImpl.deleteTableFromInputTable(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /**
    * This service offers methods to manipulate the contents of input tables.
    */
  trait InputTableServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[InputTableService] = InputTableService
    /**
      * Adds the provided table to the specified input table. The new data to add must only have
      * columns (name, types, and order) which match the given input table's columns.
      */
    def addTableToInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest): io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse
    /**
      * Removes the provided table from the specified input tables. The tables indicating which rows
      * to remove are expected to only have columns that match the key columns of the input table.
      */
    def deleteTableFromInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest): io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse
  }
  
  class InputTableServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[InputTableServiceBlockingStub](channel, options) with InputTableServiceBlockingClient {
    /**
      * Adds the provided table to the specified input table. The new data to add must only have
      * columns (name, types, and order) which match the given input table's columns.
      */
    override def addTableToInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest): io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_ADD_TABLE_TO_INPUT_TABLE, options, request)
    }
    
    /**
      * Removes the provided table from the specified input tables. The tables indicating which rows
      * to remove are expected to only have columns that match the key columns of the input table.
      */
    override def deleteTableFromInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest): io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_DELETE_TABLE_FROM_INPUT_TABLE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): InputTableServiceBlockingStub = new InputTableServiceBlockingStub(channel, options)
  }
  
  class InputTableServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[InputTableServiceStub](channel, options) with InputTableService {
    /**
      * Adds the provided table to the specified input table. The new data to add must only have
      * columns (name, types, and order) which match the given input table's columns.
      */
    override def addTableToInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.AddTableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.inputtable.AddTableResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_ADD_TABLE_TO_INPUT_TABLE, options, request)
    }
    
    /**
      * Removes the provided table from the specified input tables. The tables indicating which rows
      * to remove are expected to only have columns that match the key columns of the input table.
      */
    override def deleteTableFromInputTable(request: io.deephaven.proto.backplane.grpc.inputtable.DeleteTableRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.inputtable.DeleteTableResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_DELETE_TABLE_FROM_INPUT_TABLE, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): InputTableServiceStub = new InputTableServiceStub(channel, options)
  }
  
  object InputTableServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[InputTableServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): InputTableServiceStub = new InputTableServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[InputTableServiceStub] = this
  }
  
  def bindService(serviceImpl: InputTableService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = InputTableService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): InputTableServiceBlockingStub = new InputTableServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): InputTableServiceStub = new InputTableServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.inputtable.InputtableProto.javaDescriptor.getServices().get(0)
  
}