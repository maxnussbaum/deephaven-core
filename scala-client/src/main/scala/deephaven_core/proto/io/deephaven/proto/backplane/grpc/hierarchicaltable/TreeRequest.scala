// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.hierarchicaltable

/** @param resultTreeTableId
  *   Ticket to use to hold the result TreeTable from the tree operation
  * @param sourceTableId
  *   Ticket for the source Table to tree
  * @param identifierColumn
  *   The name of the column containing the unique identifier for each row in the source table
  * @param parentIdentifierColumn
  *   The name of the column containing the parent row's unique identifier for each row in the source table
  * @param promoteOrphans
  *   Whether to promote "orphaned" nodes to be children of the root node. Orphans are nodes whose parent identifiers do
  *   not occur as identifiers for any row in the source Table.
  */
@SerialVersionUID(0L)
final case class TreeRequest(
    resultTreeTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None,
    identifierColumn: _root_.scala.Predef.String = "",
    parentIdentifierColumn: _root_.scala.Predef.String = "",
    promoteOrphans: _root_.scala.Boolean = false,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[TreeRequest] {
    @transient
    private[this] var __serializedSizeMemoized: _root_.scala.Int = 0
    private[this] def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (resultTreeTableId.isDefined) {
        val __value = resultTreeTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (sourceTableId.isDefined) {
        val __value = sourceTableId.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = identifierColumn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = parentIdentifierColumn
        if (!__value.isEmpty) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = promoteOrphans
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(5, __value)
        }
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      resultTreeTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      sourceTableId.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = identifierColumn
        if (!__v.isEmpty) {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = parentIdentifierColumn
        if (!__v.isEmpty) {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = promoteOrphans
        if (__v != false) {
          _output__.writeBool(5, __v)
        }
      };
      unknownFields.writeTo(_output__)
    }
    def getResultTreeTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = resultTreeTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearResultTreeTableId: TreeRequest = copy(resultTreeTableId = _root_.scala.None)
    def withResultTreeTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): TreeRequest = copy(resultTreeTableId = Option(__v))
    def getSourceTableId: io.deephaven.proto.backplane.grpc.ticket.Ticket = sourceTableId.getOrElse(io.deephaven.proto.backplane.grpc.ticket.Ticket.defaultInstance)
    def clearSourceTableId: TreeRequest = copy(sourceTableId = _root_.scala.None)
    def withSourceTableId(__v: io.deephaven.proto.backplane.grpc.ticket.Ticket): TreeRequest = copy(sourceTableId = Option(__v))
    def withIdentifierColumn(__v: _root_.scala.Predef.String): TreeRequest = copy(identifierColumn = __v)
    def withParentIdentifierColumn(__v: _root_.scala.Predef.String): TreeRequest = copy(parentIdentifierColumn = __v)
    def withPromoteOrphans(__v: _root_.scala.Boolean): TreeRequest = copy(promoteOrphans = __v)
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => resultTreeTableId.orNull
        case 2 => sourceTableId.orNull
        case 3 => {
          val __t = identifierColumn
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = parentIdentifierColumn
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = promoteOrphans
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => resultTreeTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => sourceTableId.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PString(identifierColumn)
        case 4 => _root_.scalapb.descriptors.PString(parentIdentifierColumn)
        case 5 => _root_.scalapb.descriptors.PBoolean(promoteOrphans)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest.type = io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.grpc.TreeRequest])
}

object TreeRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest = {
    var __resultTreeTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket] = _root_.scala.None
    var __identifierColumn: _root_.scala.Predef.String = ""
    var __parentIdentifierColumn: _root_.scala.Predef.String = ""
    var __promoteOrphans: _root_.scala.Boolean = false
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __resultTreeTableId = _root_.scala.Option(__resultTreeTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __sourceTableId = _root_.scala.Option(__sourceTableId.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.grpc.ticket.Ticket](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 26 =>
          __identifierColumn = _input__.readStringRequireUtf8()
        case 34 =>
          __parentIdentifierColumn = _input__.readStringRequireUtf8()
        case 40 =>
          __promoteOrphans = _input__.readBool()
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest(
        resultTreeTableId = __resultTreeTableId,
        sourceTableId = __sourceTableId,
        identifierColumn = __identifierColumn,
        parentIdentifierColumn = __parentIdentifierColumn,
        promoteOrphans = __promoteOrphans,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest(
        resultTreeTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        sourceTableId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]]),
        identifierColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        parentIdentifierColumn = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        promoteOrphans = __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.javaDescriptor.getMessageTypes().get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.deephaven.proto.backplane.grpc.hierarchicaltable.HierarchicaltableProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
      case 2 => __out = io.deephaven.proto.backplane.grpc.ticket.Ticket
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest(
    resultTreeTableId = _root_.scala.None,
    sourceTableId = _root_.scala.None,
    identifierColumn = "",
    parentIdentifierColumn = "",
    promoteOrphans = false
  )
  implicit class TreeRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest](_l) {
    def resultTreeTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getResultTreeTableId)((c_, f_) => c_.copy(resultTreeTableId = _root_.scala.Option(f_)))
    def optionalResultTreeTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.resultTreeTableId)((c_, f_) => c_.copy(resultTreeTableId = f_))
    def sourceTableId: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.grpc.ticket.Ticket] = field(_.getSourceTableId)((c_, f_) => c_.copy(sourceTableId = _root_.scala.Option(f_)))
    def optionalSourceTableId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket]] = field(_.sourceTableId)((c_, f_) => c_.copy(sourceTableId = f_))
    def identifierColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.identifierColumn)((c_, f_) => c_.copy(identifierColumn = f_))
    def parentIdentifierColumn: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.parentIdentifierColumn)((c_, f_) => c_.copy(parentIdentifierColumn = f_))
    def promoteOrphans: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.promoteOrphans)((c_, f_) => c_.copy(promoteOrphans = f_))
  }
  final val RESULT_TREE_TABLE_ID_FIELD_NUMBER = 1
  final val SOURCE_TABLE_ID_FIELD_NUMBER = 2
  final val IDENTIFIER_COLUMN_FIELD_NUMBER = 3
  final val PARENT_IDENTIFIER_COLUMN_FIELD_NUMBER = 4
  final val PROMOTE_ORPHANS_FIELD_NUMBER = 5
  def of(
    resultTreeTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    sourceTableId: _root_.scala.Option[io.deephaven.proto.backplane.grpc.ticket.Ticket],
    identifierColumn: _root_.scala.Predef.String,
    parentIdentifierColumn: _root_.scala.Predef.String,
    promoteOrphans: _root_.scala.Boolean
  ): _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest = _root_.io.deephaven.proto.backplane.grpc.hierarchicaltable.TreeRequest(
    resultTreeTableId,
    sourceTableId,
    identifierColumn,
    parentIdentifierColumn,
    promoteOrphans
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.grpc.TreeRequest])
}
