// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.config


object ConfigServiceGrpc {
  val METHOD_GET_AUTHENTICATION_CONSTANTS: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest, io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.ConfigService", "GetAuthenticationConstants"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.config.ConfigProto.javaDescriptor.getServices().get(0).getMethods().get(0)))
      .build()
  
  val METHOD_GET_CONFIGURATION_CONSTANTS: _root_.io.grpc.MethodDescriptor[io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest, io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse] =
    _root_.io.grpc.MethodDescriptor.newBuilder()
      .setType(_root_.io.grpc.MethodDescriptor.MethodType.UNARY)
      .setFullMethodName(_root_.io.grpc.MethodDescriptor.generateFullMethodName("io.deephaven.proto.backplane.grpc.ConfigService", "GetConfigurationConstants"))
      .setSampledToLocalTracing(true)
      .setRequestMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest])
      .setResponseMarshaller(_root_.scalapb.grpc.Marshaller.forMessage[io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse])
      .setSchemaDescriptor(_root_.scalapb.grpc.ConcreteProtoMethodDescriptorSupplier.fromMethodDescriptor(io.deephaven.proto.backplane.grpc.config.ConfigProto.javaDescriptor.getServices().get(0).getMethods().get(1)))
      .build()
  
  val SERVICE: _root_.io.grpc.ServiceDescriptor =
    _root_.io.grpc.ServiceDescriptor.newBuilder("io.deephaven.proto.backplane.grpc.ConfigService")
      .setSchemaDescriptor(new _root_.scalapb.grpc.ConcreteProtoFileDescriptorSupplier(io.deephaven.proto.backplane.grpc.config.ConfigProto.javaDescriptor))
      .addMethod(METHOD_GET_AUTHENTICATION_CONSTANTS)
      .addMethod(METHOD_GET_CONFIGURATION_CONSTANTS)
      .build()
  
  /** *
    * Provides simple configuration data to users. Unauthenticated users may call GetAuthenticationConstants
    * to discover hints on how they should proceed with providing their identity, while already-authenticated
    * clients may call GetConfigurationConstants for details on using the platform.
    */
  trait ConfigService extends _root_.scalapb.grpc.AbstractService {
    override def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConfigService] = ConfigService
    def getAuthenticationConstants(request: io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse]
    def getConfigurationConstants(request: io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse]
  }
  
  object ConfigService extends _root_.scalapb.grpc.ServiceCompanion[ConfigService] {
    implicit def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConfigService] = this
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.config.ConfigProto.javaDescriptor.getServices().get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.config.ConfigProto.scalaDescriptor.services(0)
    def bindService(serviceImpl: ConfigService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition =
      _root_.io.grpc.ServerServiceDefinition.builder(SERVICE)
      .addMethod(
        METHOD_GET_AUTHENTICATION_CONSTANTS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse]) => {
          serviceImpl.getAuthenticationConstants(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .addMethod(
        METHOD_GET_CONFIGURATION_CONSTANTS,
        _root_.io.grpc.stub.ServerCalls.asyncUnaryCall((request: io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest, observer: _root_.io.grpc.stub.StreamObserver[io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse]) => {
          serviceImpl.getConfigurationConstants(request).onComplete(scalapb.grpc.Grpc.completeObserver(observer))(
            executionContext)
        }))
      .build()
  }
  
  /** *
    * Provides simple configuration data to users. Unauthenticated users may call GetAuthenticationConstants
    * to discover hints on how they should proceed with providing their identity, while already-authenticated
    * clients may call GetConfigurationConstants for details on using the platform.
    */
  trait ConfigServiceBlockingClient {
    def serviceCompanion: _root_.scalapb.grpc.ServiceCompanion[ConfigService] = ConfigService
    def getAuthenticationConstants(request: io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest): io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse
    def getConfigurationConstants(request: io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest): io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse
  }
  
  class ConfigServiceBlockingStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ConfigServiceBlockingStub](channel, options) with ConfigServiceBlockingClient {
    override def getAuthenticationConstants(request: io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest): io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_AUTHENTICATION_CONSTANTS, options, request)
    }
    
    override def getConfigurationConstants(request: io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest): io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse = {
      _root_.scalapb.grpc.ClientCalls.blockingUnaryCall(channel, METHOD_GET_CONFIGURATION_CONSTANTS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConfigServiceBlockingStub = new ConfigServiceBlockingStub(channel, options)
  }
  
  class ConfigServiceStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions = _root_.io.grpc.CallOptions.DEFAULT) extends _root_.io.grpc.stub.AbstractStub[ConfigServiceStub](channel, options) with ConfigService {
    override def getAuthenticationConstants(request: io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.config.AuthenticationConstantsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_AUTHENTICATION_CONSTANTS, options, request)
    }
    
    override def getConfigurationConstants(request: io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsRequest): scala.concurrent.Future[io.deephaven.proto.backplane.grpc.config.ConfigurationConstantsResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_GET_CONFIGURATION_CONSTANTS, options, request)
    }
    
    override def build(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConfigServiceStub = new ConfigServiceStub(channel, options)
  }
  
  object ConfigServiceStub extends _root_.io.grpc.stub.AbstractStub.StubFactory[ConfigServiceStub] {
    override def newStub(channel: _root_.io.grpc.Channel, options: _root_.io.grpc.CallOptions): ConfigServiceStub = new ConfigServiceStub(channel, options)
    
    implicit val stubFactory: _root_.io.grpc.stub.AbstractStub.StubFactory[ConfigServiceStub] = this
  }
  
  def bindService(serviceImpl: ConfigService, executionContext: scala.concurrent.ExecutionContext): _root_.io.grpc.ServerServiceDefinition = ConfigService.bindService(serviceImpl, executionContext)
  
  def blockingStub(channel: _root_.io.grpc.Channel): ConfigServiceBlockingStub = new ConfigServiceBlockingStub(channel)
  
  def stub(channel: _root_.io.grpc.Channel): ConfigServiceStub = new ConfigServiceStub(channel)
  
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.ServiceDescriptor = io.deephaven.proto.backplane.grpc.config.ConfigProto.javaDescriptor.getServices().get(0)
  
}