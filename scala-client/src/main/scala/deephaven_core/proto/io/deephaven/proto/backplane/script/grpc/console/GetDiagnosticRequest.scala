// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.deephaven.proto.backplane.script.grpc.console

@SerialVersionUID(0L)
final case class GetDiagnosticRequest(
    textDocument: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier] = _root_.scala.None,
    identifier: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    previousResultId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None,
    unknownFields: _root_.scalapb.UnknownFieldSet = _root_.scalapb.UnknownFieldSet.empty
    ) extends scalapb.GeneratedMessage with scalapb.lenses.Updatable[GetDiagnosticRequest] {
    @transient
    private var __serializedSizeMemoized: _root_.scala.Int = 0
    private def __computeSerializedSize(): _root_.scala.Int = {
      var __size = 0
      if (textDocument.isDefined) {
        val __value = textDocument.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (identifier.isDefined) {
        val __value = identifier.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
      };
      if (previousResultId.isDefined) {
        val __value = previousResultId.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      __size += unknownFields.serializedSize
      __size
    }
    override def serializedSize: _root_.scala.Int = {
      var __size = __serializedSizeMemoized
      if (__size == 0) {
        __size = __computeSerializedSize() + 1
        __serializedSizeMemoized = __size
      }
      __size - 1
      
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      textDocument.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      identifier.foreach { __v =>
        val __m = __v
        _output__.writeString(2, __m)
      };
      previousResultId.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      unknownFields.writeTo(_output__)
    }
    def getTextDocument: io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier = textDocument.getOrElse(io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier.defaultInstance)
    def clearTextDocument: GetDiagnosticRequest = copy(textDocument = _root_.scala.None)
    def withTextDocument(__v: io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier): GetDiagnosticRequest = copy(textDocument = Option(__v))
    def getIdentifier: _root_.scala.Predef.String = identifier.getOrElse("")
    def clearIdentifier: GetDiagnosticRequest = copy(identifier = _root_.scala.None)
    def withIdentifier(__v: _root_.scala.Predef.String): GetDiagnosticRequest = copy(identifier = Option(__v))
    def getPreviousResultId: _root_.scala.Predef.String = previousResultId.getOrElse("")
    def clearPreviousResultId: GetDiagnosticRequest = copy(previousResultId = _root_.scala.None)
    def withPreviousResultId(__v: _root_.scala.Predef.String): GetDiagnosticRequest = copy(previousResultId = Option(__v))
    def withUnknownFields(__v: _root_.scalapb.UnknownFieldSet) = copy(unknownFields = __v)
    def discardUnknownFields = copy(unknownFields = _root_.scalapb.UnknownFieldSet.empty)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => textDocument.orNull
        case 2 => identifier.orNull
        case 3 => previousResultId.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => textDocument.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => identifier.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => previousResultId.map(_root_.scalapb.descriptors.PString(_)).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion: io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest.type = io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest
    // @@protoc_insertion_point(GeneratedMessage[io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest])
}

object GetDiagnosticRequest extends scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest] = this
  def parseFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest = {
    var __textDocument: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier] = _root_.scala.None
    var __identifier: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var __previousResultId: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    var `_unknownFields__`: _root_.scalapb.UnknownFieldSet.Builder = null
    var _done__ = false
    while (!_done__) {
      val _tag__ = _input__.readTag()
      _tag__ match {
        case 0 => _done__ = true
        case 10 =>
          __textDocument = _root_.scala.Option(__textDocument.fold(_root_.scalapb.LiteParser.readMessage[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier](_input__))(_root_.scalapb.LiteParser.readMessage(_input__, _)))
        case 18 =>
          __identifier = _root_.scala.Option(_input__.readStringRequireUtf8())
        case 26 =>
          __previousResultId = _root_.scala.Option(_input__.readStringRequireUtf8())
        case tag =>
          if (_unknownFields__ == null) {
            _unknownFields__ = new _root_.scalapb.UnknownFieldSet.Builder()
          }
          _unknownFields__.parseField(tag, _input__)
      }
    }
    io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest(
        textDocument = __textDocument,
        identifier = __identifier,
        previousResultId = __previousResultId,
        unknownFields = if (_unknownFields__ == null) _root_.scalapb.UnknownFieldSet.empty else _unknownFields__.result()
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage eq scalaDescriptor), "FieldDescriptor does not match message type.")
      io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest(
        textDocument = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier]]),
        identifier = __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]),
        previousResultId = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsoleProto.javaDescriptor.getMessageTypes().get(39)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsoleProto.scalaDescriptor.messages(39)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[?] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[?] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[? <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[?] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest(
    textDocument = _root_.scala.None,
    identifier = _root_.scala.None,
    previousResultId = _root_.scala.None
  )
  implicit class GetDiagnosticRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest](_l) {
    def textDocument: _root_.scalapb.lenses.Lens[UpperPB, io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier] = field(_.getTextDocument)((c_, f_) => c_.copy(textDocument = _root_.scala.Option(f_)))
    def optionalTextDocument: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier]] = field(_.textDocument)((c_, f_) => c_.copy(textDocument = f_))
    def identifier: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getIdentifier)((c_, f_) => c_.copy(identifier = _root_.scala.Option(f_)))
    def optionalIdentifier: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.identifier)((c_, f_) => c_.copy(identifier = f_))
    def previousResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getPreviousResultId)((c_, f_) => c_.copy(previousResultId = _root_.scala.Option(f_)))
    def optionalPreviousResultId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[_root_.scala.Predef.String]] = field(_.previousResultId)((c_, f_) => c_.copy(previousResultId = f_))
  }
  final val TEXT_DOCUMENT_FIELD_NUMBER = 1
  final val IDENTIFIER_FIELD_NUMBER = 2
  final val PREVIOUS_RESULT_ID_FIELD_NUMBER = 3
  def of(
    textDocument: _root_.scala.Option[io.deephaven.proto.backplane.script.grpc.console.VersionedTextDocumentIdentifier],
    identifier: _root_.scala.Option[_root_.scala.Predef.String],
    previousResultId: _root_.scala.Option[_root_.scala.Predef.String]
  ): _root_.io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest = _root_.io.deephaven.proto.backplane.script.grpc.console.GetDiagnosticRequest(
    textDocument,
    identifier,
    previousResultId
  )
  // @@protoc_insertion_point(GeneratedMessageCompanion[io.deephaven.proto.backplane.script.grpc.GetDiagnosticRequest])
}
