// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package io.deephaven.proto.backplane.grpc.table

/** Directives for how to handle {&#64;code null} and {&#64;code NaN} values
  */
sealed abstract class BadDataBehavior(val value: _root_.scala.Int) extends _root_.scalapb.GeneratedEnum {
  type EnumType = io.deephaven.proto.backplane.grpc.table.BadDataBehavior
  type RecognizedType = io.deephaven.proto.backplane.grpc.table.BadDataBehavior.Recognized
  def isBadDataBehaviorNotSpecified: _root_.scala.Boolean = false
  def isThrow: _root_.scala.Boolean = false
  def isReset: _root_.scala.Boolean = false
  def isSkip: _root_.scala.Boolean = false
  def isPoison: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[BadDataBehavior] = io.deephaven.proto.backplane.grpc.table.BadDataBehavior
  final def asRecognized: _root_.scala.Option[io.deephaven.proto.backplane.grpc.table.BadDataBehavior.Recognized] = if (isUnrecognized) _root_.scala.None else _root_.scala.Some(this.asInstanceOf[io.deephaven.proto.backplane.grpc.table.BadDataBehavior.Recognized])
}

object BadDataBehavior extends _root_.scalapb.GeneratedEnumCompanion[BadDataBehavior] {
  sealed trait Recognized extends BadDataBehavior
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[BadDataBehavior] = this
  
  /** When not specified will use the server default.
    */
  @SerialVersionUID(0L)
  case object BAD_DATA_BEHAVIOR_NOT_SPECIFIED extends BadDataBehavior(0) with BadDataBehavior.Recognized {
    val index = 0
    val name = "BAD_DATA_BEHAVIOR_NOT_SPECIFIED"
    override def isBadDataBehaviorNotSpecified: _root_.scala.Boolean = true
  }
  
  /** Throw an exception and abort processing when bad data is encountered.
    */
  @SerialVersionUID(0L)
  case object THROW extends BadDataBehavior(1) with BadDataBehavior.Recognized {
    val index = 1
    val name = "THROW"
    override def isThrow: _root_.scala.Boolean = true
  }
  
  /** Reset the state for the bucket to {&#64;code null} when invalid data is encountered.
    */
  @SerialVersionUID(0L)
  case object RESET extends BadDataBehavior(2) with BadDataBehavior.Recognized {
    val index = 2
    val name = "RESET"
    override def isReset: _root_.scala.Boolean = true
  }
  
  /** Skip and do not process the invalid data without changing state.
    */
  @SerialVersionUID(0L)
  case object SKIP extends BadDataBehavior(3) with BadDataBehavior.Recognized {
    val index = 3
    val name = "SKIP"
    override def isSkip: _root_.scala.Boolean = true
  }
  
  /** Allow the bad data to poison the result. This is only valid for use with NaN.
    */
  @SerialVersionUID(0L)
  case object POISON extends BadDataBehavior(4) with BadDataBehavior.Recognized {
    val index = 4
    val name = "POISON"
    override def isPoison: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(unrecognizedValue: _root_.scala.Int) extends BadDataBehavior(unrecognizedValue) with _root_.scalapb.UnrecognizedEnum
  lazy val values: scala.collection.immutable.Seq[ValueType] = scala.collection.immutable.Seq(BAD_DATA_BEHAVIOR_NOT_SPECIFIED, THROW, RESET, SKIP, POISON)
  def fromValue(__value: _root_.scala.Int): BadDataBehavior = __value match {
    case 0 => BAD_DATA_BEHAVIOR_NOT_SPECIFIED
    case 1 => THROW
    case 2 => RESET
    case 3 => SKIP
    case 4 => POISON
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.TableProto.javaDescriptor.getEnumTypes().get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.deephaven.proto.backplane.grpc.table.TableProto.scalaDescriptor.enums(0)
}