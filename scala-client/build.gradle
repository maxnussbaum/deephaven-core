import io.deephaven.tools.docker.DiffTask

plugins {
    id 'scala'
    id 'com.bmuschko.docker-remote-api'
    id 'io.deephaven.project.register'
    id 'io.deephaven.deephaven-in-docker'
    id 'java-library'
}

repositories {
    mavenCentral()
}

configurations {
    scala {}
}

//evaluationDependsOn Docker.registryProject('scala')

dependencies {
    implementation 'org.scala-lang:scala3-library_3:3.7.1'
    implementation 'com.thesamet.scalapb:scalapb-runtime_3:0.11.19'
    implementation 'com.thesamet.scalapb:scalapb-runtime-grpc_3:0.11.19'
    implementation 'io.grpc:grpc-netty:1.73.0'
    implementation 'io.grpc:grpc-protobuf:1.73.0'
    implementation 'io.grpc:grpc-stub:1.73.0'

//    api project(':qst-type')
    api project(':table-api')

    api project(':engine-api')
    implementation project(':engine-table')

    scala project(path: ':proto:proto-backplane-grpc', configuration: 'scala')

    testImplementation 'org.scalatest:scalatest_3:3.2.19'
    testImplementation 'org.scalatest:scalatest-funsuite_3:3.2.19'
    testImplementation 'junit:junit:4.13.2'
}

def compare = tasks.register('compareProtobuf', DiffTask) {
    expectedContents.set configurations.scala
    actualContents {
        directory layout.projectDirectory.dir('src/main/scala/deephaven_core/proto/')
//        directory "${layout.projectDirectory}/deephaven_core/proto/" as Directory
        ignore {
            it.exclude 'src/main/scala/deephaven_core/proto/**'
        }
    }
    generateTask.set ':scala-client:updateProtobuf'
}

sourceSets.main.scala.srcDirs = ['src/main/scala', 'src/main/scala/deephaven_core/proto']

// fail a "check" build if these are out of date
tasks.getByName('quick').dependsOn(compare)

tasks.register('updateProtobuf', Sync) {
    finalizedBy compare
    from configurations.scala
    into layout.projectDirectory.dir('src/main/scala/deephaven_core/proto/')
    preserve {
        exclude 'src/main/scala/deephaven_core/proto/**'
    }
    outputs.dir layout.projectDirectory.dir('src/main/scala/deephaven_core/proto/')
}

// Start up a docker container for the grpc server, then run scala client tests
String randomSuffix = UUID.randomUUID().toString();
deephavenDocker {
    envVars.set([
            'START_OPTS':'-Xmx512m -DAuthHandlers=io.deephaven.auth.AnonymousAuthenticationHandler,io.deephaven.authentication.psk.PskAuthenticationHandler '
                    + '-Dauthentication.psk=deephaven -DSystemicObjectTracker.enabled=true'
    ])
    containerName.set "scala-client-test-container-${randomSuffix}"
    networkName.set "scala-test-network-${randomSuffix}"
}

def testScalaClient = Docker.registerDockerTask(project, 'testScalaClient') {
    copyIn {
        from(layout.projectDirectory) {
            include 'src/**'
            include 'build.gradle'
        }
    }
    containerDependencies.dependsOn = [deephavenDocker.healthyTask]
    containerDependencies.finalizedBy = deephavenDocker.endTask
    network = deephavenDocker.networkName.get()
    dockerfile {
        from(Docker.localImageName('scala'))
        copyFile('src', '/project/src')
        copyFile('build.gradle', '/project/')
        workingDir('/project')
        runCommand '''set -eux; \\
                      mkdir -p /out/report; \\
                      apt-get update; \\
                      apt-get install -y --no-install-recommends curl unzip'''

        environmentVariable 'DH_HOST', deephavenDocker.containerName.get()
        environmentVariable 'DH_PORT', '10000'
    }
    parentContainers = [ Docker.registryTask(project, 'scala') ]
    entrypoint = ['gradle', 'test', '--info']
    copyOut {
        into layout.buildDirectory.dir('test-results')
    }
}

tasks.getByName('check').dependsOn(testScalaClient)
deephavenDocker.shouldLogIfTaskFails testScalaClient
